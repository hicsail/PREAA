// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ModelListModelsGetData, ModelListModelsGetResponses, ModelListModelsGetErrors, ModelListV1ModelsGetData, ModelListV1ModelsGetResponses, ModelListV1ModelsGetErrors, ChatCompletionOpenaiDeploymentsModelChatCompletionsPostData, ChatCompletionOpenaiDeploymentsModelChatCompletionsPostResponses, ChatCompletionOpenaiDeploymentsModelChatCompletionsPostErrors, ChatCompletionEnginesModelChatCompletionsPostData, ChatCompletionEnginesModelChatCompletionsPostResponses, ChatCompletionEnginesModelChatCompletionsPostErrors, ChatCompletionChatCompletionsPostData, ChatCompletionChatCompletionsPostResponses, ChatCompletionChatCompletionsPostErrors, ChatCompletionV1ChatCompletionsPostData, ChatCompletionV1ChatCompletionsPostResponses, ChatCompletionV1ChatCompletionsPostErrors, CompletionOpenaiDeploymentsModelCompletionsPostData, CompletionOpenaiDeploymentsModelCompletionsPostResponses, CompletionOpenaiDeploymentsModelCompletionsPostErrors, CompletionEnginesModelCompletionsPostData, CompletionEnginesModelCompletionsPostResponses, CompletionEnginesModelCompletionsPostErrors, CompletionCompletionsPostData, CompletionCompletionsPostResponses, CompletionCompletionsPostErrors, CompletionV1CompletionsPostData, CompletionV1CompletionsPostResponses, CompletionV1CompletionsPostErrors, EmbeddingsOpenaiDeploymentsModelEmbeddingsPostData, EmbeddingsOpenaiDeploymentsModelEmbeddingsPostResponses, EmbeddingsOpenaiDeploymentsModelEmbeddingsPostErrors, EmbeddingsEnginesModelEmbeddingsPostData, EmbeddingsEnginesModelEmbeddingsPostResponses, EmbeddingsEnginesModelEmbeddingsPostErrors, EmbeddingsEmbeddingsPostData, EmbeddingsEmbeddingsPostResponses, EmbeddingsEmbeddingsPostErrors, EmbeddingsV1EmbeddingsPostData, EmbeddingsV1EmbeddingsPostResponses, EmbeddingsV1EmbeddingsPostErrors, ImageGenerationImagesGenerationsPostData, ImageGenerationImagesGenerationsPostResponses, ImageGenerationV1ImagesGenerationsPostData, ImageGenerationV1ImagesGenerationsPostResponses, AudioSpeechAudioSpeechPostData, AudioSpeechAudioSpeechPostResponses, AudioSpeechV1AudioSpeechPostData, AudioSpeechV1AudioSpeechPostResponses, AudioTranscriptionsAudioTranscriptionsPostData, AudioTranscriptionsAudioTranscriptionsPostResponses, AudioTranscriptionsAudioTranscriptionsPostErrors, AudioTranscriptionsV1AudioTranscriptionsPostData, AudioTranscriptionsV1AudioTranscriptionsPostResponses, AudioTranscriptionsV1AudioTranscriptionsPostErrors, GetAssistantsAssistantsGetData, GetAssistantsAssistantsGetResponses, CreateAssistantAssistantsPostData, CreateAssistantAssistantsPostResponses, GetAssistantsV1AssistantsGetData, GetAssistantsV1AssistantsGetResponses, CreateAssistantV1AssistantsPostData, CreateAssistantV1AssistantsPostResponses, DeleteAssistantAssistantsAssistantIdDeleteData, DeleteAssistantAssistantsAssistantIdDeleteResponses, DeleteAssistantAssistantsAssistantIdDeleteErrors, DeleteAssistantV1AssistantsAssistantIdDeleteData, DeleteAssistantV1AssistantsAssistantIdDeleteResponses, DeleteAssistantV1AssistantsAssistantIdDeleteErrors, CreateThreadsThreadsPostData, CreateThreadsThreadsPostResponses, CreateThreadsV1ThreadsPostData, CreateThreadsV1ThreadsPostResponses, GetThreadThreadsThreadIdGetData, GetThreadThreadsThreadIdGetResponses, GetThreadThreadsThreadIdGetErrors, GetThreadV1ThreadsThreadIdGetData, GetThreadV1ThreadsThreadIdGetResponses, GetThreadV1ThreadsThreadIdGetErrors, GetMessagesThreadsThreadIdMessagesGetData, GetMessagesThreadsThreadIdMessagesGetResponses, GetMessagesThreadsThreadIdMessagesGetErrors, AddMessagesThreadsThreadIdMessagesPostData, AddMessagesThreadsThreadIdMessagesPostResponses, AddMessagesThreadsThreadIdMessagesPostErrors, GetMessagesV1ThreadsThreadIdMessagesGetData, GetMessagesV1ThreadsThreadIdMessagesGetResponses, GetMessagesV1ThreadsThreadIdMessagesGetErrors, AddMessagesV1ThreadsThreadIdMessagesPostData, AddMessagesV1ThreadsThreadIdMessagesPostResponses, AddMessagesV1ThreadsThreadIdMessagesPostErrors, RunThreadThreadsThreadIdRunsPostData, RunThreadThreadsThreadIdRunsPostResponses, RunThreadThreadsThreadIdRunsPostErrors, RunThreadV1ThreadsThreadIdRunsPostData, RunThreadV1ThreadsThreadIdRunsPostResponses, RunThreadV1ThreadsThreadIdRunsPostErrors, ModerationsModerationsPostData, ModerationsModerationsPostResponses, ModerationsV1ModerationsPostData, ModerationsV1ModerationsPostResponses, TokenCounterUtilsTokenCounterPostData, TokenCounterUtilsTokenCounterPostResponses, TokenCounterUtilsTokenCounterPostErrors, SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetData, SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetResponses, SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetErrors, TransformRequestUtilsTransformRequestPostData, TransformRequestUtilsTransformRequestPostResponses, TransformRequestUtilsTransformRequestPostErrors, ModelInfoV1V1ModelInfoGetData, ModelInfoV1V1ModelInfoGetResponses, ModelInfoV1V1ModelInfoGetErrors, ModelInfoV1ModelInfoGetData, ModelInfoV1ModelInfoGetResponses, ModelInfoV1ModelInfoGetErrors, ModelGroupInfoModelGroupInfoGetData, ModelGroupInfoModelGroupInfoGetResponses, ModelGroupInfoModelGroupInfoGetErrors, HomeGetData, HomeGetResponses, GetRoutesRoutesGetData, GetRoutesRoutesGetResponses, ResponsesApiResponsesPostData, ResponsesApiResponsesPostResponses, ResponsesApiV1ResponsesPostData, ResponsesApiV1ResponsesPostResponses, DeleteResponseResponsesResponseIdDeleteData, DeleteResponseResponsesResponseIdDeleteResponses, DeleteResponseResponsesResponseIdDeleteErrors, GetResponseResponsesResponseIdGetData, GetResponseResponsesResponseIdGetResponses, GetResponseResponsesResponseIdGetErrors, DeleteResponseV1ResponsesResponseIdDeleteData, DeleteResponseV1ResponsesResponseIdDeleteResponses, DeleteResponseV1ResponsesResponseIdDeleteErrors, GetResponseV1ResponsesResponseIdGetData, GetResponseV1ResponsesResponseIdGetResponses, GetResponseV1ResponsesResponseIdGetErrors, GetResponseInputItemsResponsesResponseIdInputItemsGetData, GetResponseInputItemsResponsesResponseIdInputItemsGetResponses, GetResponseInputItemsResponsesResponseIdInputItemsGetErrors, GetResponseInputItemsV1ResponsesResponseIdInputItemsGetData, GetResponseInputItemsV1ResponsesResponseIdInputItemsGetResponses, GetResponseInputItemsV1ResponsesResponseIdInputItemsGetErrors, ListBatchesBatchesGetData, ListBatchesBatchesGetResponses, ListBatchesBatchesGetErrors, CreateBatchBatchesPostData, CreateBatchBatchesPostResponses, CreateBatchBatchesPostErrors, ListBatchesV1BatchesGetData, ListBatchesV1BatchesGetResponses, ListBatchesV1BatchesGetErrors, CreateBatchV1BatchesPostData, CreateBatchV1BatchesPostResponses, CreateBatchV1BatchesPostErrors, ListBatchesProviderV1BatchesGetData, ListBatchesProviderV1BatchesGetResponses, ListBatchesProviderV1BatchesGetErrors, CreateBatchProviderV1BatchesPostData, CreateBatchProviderV1BatchesPostResponses, CreateBatchProviderV1BatchesPostErrors, RetrieveBatchBatchesBatchIdGetData, RetrieveBatchBatchesBatchIdGetResponses, RetrieveBatchBatchesBatchIdGetErrors, RetrieveBatchV1BatchesBatchIdGetData, RetrieveBatchV1BatchesBatchIdGetResponses, RetrieveBatchV1BatchesBatchIdGetErrors, RetrieveBatchProviderV1BatchesBatchIdGetData, RetrieveBatchProviderV1BatchesBatchIdGetResponses, RetrieveBatchProviderV1BatchesBatchIdGetErrors, CancelBatchBatchesBatchIdCancelPostData, CancelBatchBatchesBatchIdCancelPostResponses, CancelBatchBatchesBatchIdCancelPostErrors, CancelBatchV1BatchesBatchIdCancelPostData, CancelBatchV1BatchesBatchIdCancelPostResponses, CancelBatchV1BatchesBatchIdCancelPostErrors, CancelBatchProviderV1BatchesBatchIdCancelPostData, CancelBatchProviderV1BatchesBatchIdCancelPostResponses, CancelBatchProviderV1BatchesBatchIdCancelPostErrors, RerankRerankPostData, RerankRerankPostResponses, RerankV1RerankPostData, RerankV1RerankPostResponses, RerankV2RerankPostData, RerankV2RerankPostResponses, ListFineTuningJobsFineTuningJobsGetData, ListFineTuningJobsFineTuningJobsGetResponses, ListFineTuningJobsFineTuningJobsGetErrors, CreateFineTuningJobFineTuningJobsPostData, CreateFineTuningJobFineTuningJobsPostResponses, CreateFineTuningJobFineTuningJobsPostErrors, ListFineTuningJobsV1FineTuningJobsGetData, ListFineTuningJobsV1FineTuningJobsGetResponses, ListFineTuningJobsV1FineTuningJobsGetErrors, CreateFineTuningJobV1FineTuningJobsPostData, CreateFineTuningJobV1FineTuningJobsPostResponses, CreateFineTuningJobV1FineTuningJobsPostErrors, RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetData, RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetResponses, RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetErrors, RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetData, RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetResponses, RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetErrors, CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostData, CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostResponses, CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostErrors, CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostData, CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostResponses, CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostErrors, GetCredentialsCredentialsGetData, GetCredentialsCredentialsGetResponses, CreateCredentialCredentialsPostData, CreateCredentialCredentialsPostResponses, CreateCredentialCredentialsPostErrors, GetCredentialCredentialsByModelModelIdGetData, GetCredentialCredentialsByModelModelIdGetResponses, GetCredentialCredentialsByModelModelIdGetErrors, GetCredentialCredentialsByNameCredentialNameGetData, GetCredentialCredentialsByNameCredentialNameGetResponses, GetCredentialCredentialsByNameCredentialNameGetErrors, DeleteCredentialCredentialsCredentialNameDeleteData, DeleteCredentialCredentialsCredentialNameDeleteResponses, DeleteCredentialCredentialsCredentialNameDeleteErrors, UpdateCredentialCredentialsCredentialNamePatchData, UpdateCredentialCredentialsCredentialNamePatchResponses, UpdateCredentialCredentialsCredentialNamePatchErrors, GeminiProxyRouteGeminiEndpointDeleteData, GeminiProxyRouteGeminiEndpointDeleteResponses, GeminiProxyRouteGeminiEndpointDeleteErrors, GeminiProxyRouteGeminiEndpointDelete2Data, GeminiProxyRouteGeminiEndpointDelete2Responses, GeminiProxyRouteGeminiEndpointDelete2Errors, GeminiProxyRouteGeminiEndpointDelete3Data, GeminiProxyRouteGeminiEndpointDelete3Responses, GeminiProxyRouteGeminiEndpointDelete3Errors, GeminiProxyRouteGeminiEndpointDelete4Data, GeminiProxyRouteGeminiEndpointDelete4Responses, GeminiProxyRouteGeminiEndpointDelete4Errors, GeminiProxyRouteGeminiEndpointDelete5Data, GeminiProxyRouteGeminiEndpointDelete5Responses, GeminiProxyRouteGeminiEndpointDelete5Errors, CohereProxyRouteCohereEndpointDeleteData, CohereProxyRouteCohereEndpointDeleteResponses, CohereProxyRouteCohereEndpointDeleteErrors, CohereProxyRouteCohereEndpointDelete2Data, CohereProxyRouteCohereEndpointDelete2Responses, CohereProxyRouteCohereEndpointDelete2Errors, CohereProxyRouteCohereEndpointDelete3Data, CohereProxyRouteCohereEndpointDelete3Responses, CohereProxyRouteCohereEndpointDelete3Errors, CohereProxyRouteCohereEndpointDelete4Data, CohereProxyRouteCohereEndpointDelete4Responses, CohereProxyRouteCohereEndpointDelete4Errors, CohereProxyRouteCohereEndpointDelete5Data, CohereProxyRouteCohereEndpointDelete5Responses, CohereProxyRouteCohereEndpointDelete5Errors, VllmProxyRouteVllmEndpointDeleteData, VllmProxyRouteVllmEndpointDeleteResponses, VllmProxyRouteVllmEndpointDeleteErrors, VllmProxyRouteVllmEndpointDelete2Data, VllmProxyRouteVllmEndpointDelete2Responses, VllmProxyRouteVllmEndpointDelete2Errors, VllmProxyRouteVllmEndpointDelete3Data, VllmProxyRouteVllmEndpointDelete3Responses, VllmProxyRouteVllmEndpointDelete3Errors, VllmProxyRouteVllmEndpointDelete4Data, VllmProxyRouteVllmEndpointDelete4Responses, VllmProxyRouteVllmEndpointDelete4Errors, VllmProxyRouteVllmEndpointDelete5Data, VllmProxyRouteVllmEndpointDelete5Responses, VllmProxyRouteVllmEndpointDelete5Errors, MistralProxyRouteMistralEndpointDeleteData, MistralProxyRouteMistralEndpointDeleteResponses, MistralProxyRouteMistralEndpointDeleteErrors, MistralProxyRouteMistralEndpointDelete2Data, MistralProxyRouteMistralEndpointDelete2Responses, MistralProxyRouteMistralEndpointDelete2Errors, MistralProxyRouteMistralEndpointDelete3Data, MistralProxyRouteMistralEndpointDelete3Responses, MistralProxyRouteMistralEndpointDelete3Errors, MistralProxyRouteMistralEndpointDelete4Data, MistralProxyRouteMistralEndpointDelete4Responses, MistralProxyRouteMistralEndpointDelete4Errors, MistralProxyRouteMistralEndpointDelete5Data, MistralProxyRouteMistralEndpointDelete5Responses, MistralProxyRouteMistralEndpointDelete5Errors, AnthropicProxyRouteAnthropicEndpointDeleteData, AnthropicProxyRouteAnthropicEndpointDeleteResponses, AnthropicProxyRouteAnthropicEndpointDeleteErrors, AnthropicProxyRouteAnthropicEndpointDelete2Data, AnthropicProxyRouteAnthropicEndpointDelete2Responses, AnthropicProxyRouteAnthropicEndpointDelete2Errors, AnthropicProxyRouteAnthropicEndpointDelete3Data, AnthropicProxyRouteAnthropicEndpointDelete3Responses, AnthropicProxyRouteAnthropicEndpointDelete3Errors, AnthropicProxyRouteAnthropicEndpointDelete4Data, AnthropicProxyRouteAnthropicEndpointDelete4Responses, AnthropicProxyRouteAnthropicEndpointDelete4Errors, AnthropicProxyRouteAnthropicEndpointDelete5Data, AnthropicProxyRouteAnthropicEndpointDelete5Responses, AnthropicProxyRouteAnthropicEndpointDelete5Errors, BedrockProxyRouteBedrockEndpointDeleteData, BedrockProxyRouteBedrockEndpointDeleteResponses, BedrockProxyRouteBedrockEndpointDeleteErrors, BedrockProxyRouteBedrockEndpointDelete2Data, BedrockProxyRouteBedrockEndpointDelete2Responses, BedrockProxyRouteBedrockEndpointDelete2Errors, BedrockProxyRouteBedrockEndpointDelete3Data, BedrockProxyRouteBedrockEndpointDelete3Responses, BedrockProxyRouteBedrockEndpointDelete3Errors, BedrockProxyRouteBedrockEndpointDelete4Data, BedrockProxyRouteBedrockEndpointDelete4Responses, BedrockProxyRouteBedrockEndpointDelete4Errors, BedrockProxyRouteBedrockEndpointDelete5Data, BedrockProxyRouteBedrockEndpointDelete5Responses, BedrockProxyRouteBedrockEndpointDelete5Errors, AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteData, AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteResponses, AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteErrors, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Data, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Errors, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Data, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Errors, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Data, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Errors, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Data, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Errors, AssemblyaiProxyRouteAssemblyaiEndpointDeleteData, AssemblyaiProxyRouteAssemblyaiEndpointDeleteResponses, AssemblyaiProxyRouteAssemblyaiEndpointDeleteErrors, AssemblyaiProxyRouteAssemblyaiEndpointDelete2Data, AssemblyaiProxyRouteAssemblyaiEndpointDelete2Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete2Errors, AssemblyaiProxyRouteAssemblyaiEndpointDelete3Data, AssemblyaiProxyRouteAssemblyaiEndpointDelete3Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete3Errors, AssemblyaiProxyRouteAssemblyaiEndpointDelete4Data, AssemblyaiProxyRouteAssemblyaiEndpointDelete4Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete4Errors, AssemblyaiProxyRouteAssemblyaiEndpointDelete5Data, AssemblyaiProxyRouteAssemblyaiEndpointDelete5Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete5Errors, AzureProxyRouteAzureEndpointDeleteData, AzureProxyRouteAzureEndpointDeleteResponses, AzureProxyRouteAzureEndpointDeleteErrors, AzureProxyRouteAzureEndpointDelete2Data, AzureProxyRouteAzureEndpointDelete2Responses, AzureProxyRouteAzureEndpointDelete2Errors, AzureProxyRouteAzureEndpointDelete3Data, AzureProxyRouteAzureEndpointDelete3Responses, AzureProxyRouteAzureEndpointDelete3Errors, AzureProxyRouteAzureEndpointDelete4Data, AzureProxyRouteAzureEndpointDelete4Responses, AzureProxyRouteAzureEndpointDelete4Errors, AzureProxyRouteAzureEndpointDelete5Data, AzureProxyRouteAzureEndpointDelete5Responses, AzureProxyRouteAzureEndpointDelete5Errors, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteData, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteResponses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteErrors, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Data, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Errors, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Data, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Errors, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Data, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Errors, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Data, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Errors, VertexProxyRouteVertexAiEndpointDeleteData, VertexProxyRouteVertexAiEndpointDeleteResponses, VertexProxyRouteVertexAiEndpointDeleteErrors, VertexProxyRouteVertexAiEndpointDelete2Data, VertexProxyRouteVertexAiEndpointDelete2Responses, VertexProxyRouteVertexAiEndpointDelete2Errors, VertexProxyRouteVertexAiEndpointDelete3Data, VertexProxyRouteVertexAiEndpointDelete3Responses, VertexProxyRouteVertexAiEndpointDelete3Errors, VertexProxyRouteVertexAiEndpointDelete4Data, VertexProxyRouteVertexAiEndpointDelete4Responses, VertexProxyRouteVertexAiEndpointDelete4Errors, VertexProxyRouteVertexAiEndpointDelete5Data, VertexProxyRouteVertexAiEndpointDelete5Responses, VertexProxyRouteVertexAiEndpointDelete5Errors, OpenaiProxyRouteOpenaiEndpointDeleteData, OpenaiProxyRouteOpenaiEndpointDeleteResponses, OpenaiProxyRouteOpenaiEndpointDeleteErrors, OpenaiProxyRouteOpenaiEndpointDelete2Data, OpenaiProxyRouteOpenaiEndpointDelete2Responses, OpenaiProxyRouteOpenaiEndpointDelete2Errors, OpenaiProxyRouteOpenaiEndpointDelete3Data, OpenaiProxyRouteOpenaiEndpointDelete3Responses, OpenaiProxyRouteOpenaiEndpointDelete3Errors, OpenaiProxyRouteOpenaiEndpointDelete4Data, OpenaiProxyRouteOpenaiEndpointDelete4Responses, OpenaiProxyRouteOpenaiEndpointDelete4Errors, OpenaiProxyRouteOpenaiEndpointDelete5Data, OpenaiProxyRouteOpenaiEndpointDelete5Responses, OpenaiProxyRouteOpenaiEndpointDelete5Errors, HandleSseMcpGetData, HandleSseMcpGetResponses, HandleMessagesMcpSseMessagesPostData, HandleMessagesMcpSseMessagesPostResponses, ListToolRestApiMcpToolsListGetData, ListToolRestApiMcpToolsListGetResponses, CallToolRestApiMcpToolsCallPostData, CallToolRestApiMcpToolsCallPostResponses, LangfuseProxyRouteLangfuseEndpointDeleteData, LangfuseProxyRouteLangfuseEndpointDeleteResponses, LangfuseProxyRouteLangfuseEndpointDeleteErrors, LangfuseProxyRouteLangfuseEndpointDelete2Data, LangfuseProxyRouteLangfuseEndpointDelete2Responses, LangfuseProxyRouteLangfuseEndpointDelete2Errors, LangfuseProxyRouteLangfuseEndpointDelete3Data, LangfuseProxyRouteLangfuseEndpointDelete3Responses, LangfuseProxyRouteLangfuseEndpointDelete3Errors, LangfuseProxyRouteLangfuseEndpointDelete4Data, LangfuseProxyRouteLangfuseEndpointDelete4Responses, LangfuseProxyRouteLangfuseEndpointDelete4Errors, LangfuseProxyRouteLangfuseEndpointDelete5Data, LangfuseProxyRouteLangfuseEndpointDelete5Responses, LangfuseProxyRouteLangfuseEndpointDelete5Errors, DeletePassThroughEndpointsConfigPassThroughEndpointDeleteData, DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponses, DeletePassThroughEndpointsConfigPassThroughEndpointDeleteErrors, GetPassThroughEndpointsConfigPassThroughEndpointGetData, GetPassThroughEndpointsConfigPassThroughEndpointGetResponses, GetPassThroughEndpointsConfigPassThroughEndpointGetErrors, CreatePassThroughEndpointsConfigPassThroughEndpointPostData, CreatePassThroughEndpointsConfigPassThroughEndpointPostResponses, CreatePassThroughEndpointsConfigPassThroughEndpointPostErrors, UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostData, UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostResponses, UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostErrors, TestEndpointTestGetData, TestEndpointTestGetResponses, HealthServicesEndpointHealthServicesGetData, HealthServicesEndpointHealthServicesGetResponses, HealthServicesEndpointHealthServicesGetErrors, HealthEndpointHealthGetData, HealthEndpointHealthGetResponses, HealthEndpointHealthGetErrors, ActiveCallbacksActiveCallbacksGetData, ActiveCallbacksActiveCallbacksGetResponses, ActiveCallbacksSettingsGetData, ActiveCallbacksSettingsGetResponses, HealthReadinessHealthReadinessGetData, HealthReadinessHealthReadinessGetResponses, HealthReadinessOptionsHealthReadinessOptionsData, HealthReadinessOptionsHealthReadinessOptionsResponses, HealthLivelinessHealthLivenessGetData, HealthLivelinessHealthLivenessGetResponses, HealthLivelinessOptionsHealthLivenessOptionsData, HealthLivelinessOptionsHealthLivenessOptionsResponses, HealthLivelinessHealthLivelinessGetData, HealthLivelinessHealthLivelinessGetResponses, HealthLivelinessOptionsHealthLivelinessOptionsData, HealthLivelinessOptionsHealthLivelinessOptionsResponses, TestModelConnectionHealthTestConnectionPostData, TestModelConnectionHealthTestConnectionPostResponses, TestModelConnectionHealthTestConnectionPostErrors, GenerateKeyFnKeyGeneratePostData, GenerateKeyFnKeyGeneratePostResponses, GenerateKeyFnKeyGeneratePostErrors, UpdateKeyFnKeyUpdatePostData, UpdateKeyFnKeyUpdatePostResponses, UpdateKeyFnKeyUpdatePostErrors, DeleteKeyFnKeyDeletePostData, DeleteKeyFnKeyDeletePostResponses, DeleteKeyFnKeyDeletePostErrors, InfoKeyFnKeyInfoGetData, InfoKeyFnKeyInfoGetResponses, InfoKeyFnKeyInfoGetErrors, RegenerateKeyFnKeyRegeneratePostData, RegenerateKeyFnKeyRegeneratePostResponses, RegenerateKeyFnKeyRegeneratePostErrors, RegenerateKeyFnKeyKeyRegeneratePostData, RegenerateKeyFnKeyKeyRegeneratePostResponses, RegenerateKeyFnKeyKeyRegeneratePostErrors, ListKeysKeyListGetData, ListKeysKeyListGetResponses, ListKeysKeyListGetErrors, BlockKeyKeyBlockPostData, BlockKeyKeyBlockPostResponses, BlockKeyKeyBlockPostErrors, UnblockKeyKeyUnblockPostData, UnblockKeyKeyUnblockPostResponses, UnblockKeyKeyUnblockPostErrors, KeyHealthKeyHealthPostData, KeyHealthKeyHealthPostResponses, NewUserUserNewPostData, NewUserUserNewPostResponses, NewUserUserNewPostErrors, UserInfoUserInfoGetData, UserInfoUserInfoGetResponses, UserInfoUserInfoGetErrors, UserUpdateUserUpdatePostData, UserUpdateUserUpdatePostResponses, UserUpdateUserUpdatePostErrors, GetUsersUserListGetData, GetUsersUserListGetResponses, GetUsersUserListGetErrors, DeleteUserUserDeletePostData, DeleteUserUserDeletePostResponses, DeleteUserUserDeletePostErrors, GetUserDailyActivityUserDailyActivityGetData, GetUserDailyActivityUserDailyActivityGetResponses, GetUserDailyActivityUserDailyActivityGetErrors, NewTeamTeamNewPostData, NewTeamTeamNewPostResponses, NewTeamTeamNewPostErrors, UpdateTeamTeamUpdatePostData, UpdateTeamTeamUpdatePostResponses, UpdateTeamTeamUpdatePostErrors, TeamMemberAddTeamMemberAddPostData, TeamMemberAddTeamMemberAddPostResponses, TeamMemberAddTeamMemberAddPostErrors, TeamMemberDeleteTeamMemberDeletePostData, TeamMemberDeleteTeamMemberDeletePostResponses, TeamMemberDeleteTeamMemberDeletePostErrors, TeamMemberUpdateTeamMemberUpdatePostData, TeamMemberUpdateTeamMemberUpdatePostResponses, TeamMemberUpdateTeamMemberUpdatePostErrors, DeleteTeamTeamDeletePostData, DeleteTeamTeamDeletePostResponses, DeleteTeamTeamDeletePostErrors, TeamInfoTeamInfoGetData, TeamInfoTeamInfoGetResponses, TeamInfoTeamInfoGetErrors, BlockTeamTeamBlockPostData, BlockTeamTeamBlockPostResponses, BlockTeamTeamBlockPostErrors, UnblockTeamTeamUnblockPostData, UnblockTeamTeamUnblockPostResponses, UnblockTeamTeamUnblockPostErrors, ListAvailableTeamsTeamAvailableGetData, ListAvailableTeamsTeamAvailableGetResponses, ListAvailableTeamsTeamAvailableGetErrors, ListTeamV2V2TeamListGetData, ListTeamV2V2TeamListGetResponses, ListTeamV2V2TeamListGetErrors, ListTeamTeamListGetData, ListTeamTeamListGetResponses, ListTeamTeamListGetErrors, TeamModelAddTeamModelAddPostData, TeamModelAddTeamModelAddPostResponses, TeamModelAddTeamModelAddPostErrors, TeamModelDeleteTeamModelDeletePostData, TeamModelDeleteTeamModelDeletePostResponses, TeamModelDeleteTeamModelDeletePostErrors, TeamMemberPermissionsTeamPermissionsListGetData, TeamMemberPermissionsTeamPermissionsListGetResponses, TeamMemberPermissionsTeamPermissionsListGetErrors, UpdateTeamMemberPermissionsTeamPermissionsUpdatePostData, UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponses, UpdateTeamMemberPermissionsTeamPermissionsUpdatePostErrors, GetTeamDailyActivityTeamDailyActivityGetData, GetTeamDailyActivityTeamDailyActivityGetResponses, GetTeamDailyActivityTeamDailyActivityGetErrors, GetUsersScimV2UsersGetData, GetUsersScimV2UsersGetResponses, GetUsersScimV2UsersGetErrors, CreateUserScimV2UsersPostData, CreateUserScimV2UsersPostResponses, CreateUserScimV2UsersPostErrors, DeleteUserScimV2UsersUserIdDeleteData, DeleteUserScimV2UsersUserIdDeleteResponses, DeleteUserScimV2UsersUserIdDeleteErrors, GetUserScimV2UsersUserIdGetData, GetUserScimV2UsersUserIdGetResponses, GetUserScimV2UsersUserIdGetErrors, PatchUserScimV2UsersUserIdPatchData, PatchUserScimV2UsersUserIdPatchResponses, PatchUserScimV2UsersUserIdPatchErrors, UpdateUserScimV2UsersUserIdPutData, UpdateUserScimV2UsersUserIdPutResponses, UpdateUserScimV2UsersUserIdPutErrors, GetGroupsScimV2GroupsGetData, GetGroupsScimV2GroupsGetResponses, GetGroupsScimV2GroupsGetErrors, CreateGroupScimV2GroupsPostData, CreateGroupScimV2GroupsPostResponses, CreateGroupScimV2GroupsPostErrors, DeleteGroupScimV2GroupsGroupIdDeleteData, DeleteGroupScimV2GroupsGroupIdDeleteResponses, DeleteGroupScimV2GroupsGroupIdDeleteErrors, GetGroupScimV2GroupsGroupIdGetData, GetGroupScimV2GroupsGroupIdGetResponses, GetGroupScimV2GroupsGroupIdGetErrors, PatchGroupScimV2GroupsGroupIdPatchData, PatchGroupScimV2GroupsGroupIdPatchResponses, PatchGroupScimV2GroupsGroupIdPatchErrors, UpdateGroupScimV2GroupsGroupIdPutData, UpdateGroupScimV2GroupsGroupIdPutResponses, UpdateGroupScimV2GroupsGroupIdPutErrors, NewOrganizationOrganizationNewPostData, NewOrganizationOrganizationNewPostResponses, NewOrganizationOrganizationNewPostErrors, UpdateOrganizationOrganizationUpdatePatchData, UpdateOrganizationOrganizationUpdatePatchResponses, UpdateOrganizationOrganizationUpdatePatchErrors, DeleteOrganizationOrganizationDeleteDeleteData, DeleteOrganizationOrganizationDeleteDeleteResponses, DeleteOrganizationOrganizationDeleteDeleteErrors, ListOrganizationOrganizationListGetData, ListOrganizationOrganizationListGetResponses, InfoOrganizationOrganizationInfoGetData, InfoOrganizationOrganizationInfoGetResponses, InfoOrganizationOrganizationInfoGetErrors, DeprecatedInfoOrganizationOrganizationInfoPostData, DeprecatedInfoOrganizationOrganizationInfoPostResponses, DeprecatedInfoOrganizationOrganizationInfoPostErrors, OrganizationMemberAddOrganizationMemberAddPostData, OrganizationMemberAddOrganizationMemberAddPostResponses, OrganizationMemberAddOrganizationMemberAddPostErrors, OrganizationMemberUpdateOrganizationMemberUpdatePatchData, OrganizationMemberUpdateOrganizationMemberUpdatePatchResponses, OrganizationMemberUpdateOrganizationMemberUpdatePatchErrors, OrganizationMemberDeleteOrganizationMemberDeleteDeleteData, OrganizationMemberDeleteOrganizationMemberDeleteDeleteResponses, OrganizationMemberDeleteOrganizationMemberDeleteDeleteErrors, BlockUserCustomerBlockPostData, BlockUserCustomerBlockPostResponses, BlockUserCustomerBlockPostErrors, UnblockUserCustomerUnblockPostData, UnblockUserCustomerUnblockPostResponses, UnblockUserCustomerUnblockPostErrors, NewEndUserCustomerNewPostData, NewEndUserCustomerNewPostResponses, NewEndUserCustomerNewPostErrors, EndUserInfoCustomerInfoGetData, EndUserInfoCustomerInfoGetResponses, EndUserInfoCustomerInfoGetErrors, UpdateEndUserCustomerUpdatePostData, UpdateEndUserCustomerUpdatePostResponses, UpdateEndUserCustomerUpdatePostErrors, DeleteEndUserCustomerDeletePostData, DeleteEndUserCustomerDeletePostResponses, DeleteEndUserCustomerDeletePostErrors, ListEndUserCustomerListGetData, ListEndUserCustomerListGetResponses, ViewSpendTagsSpendTagsGetData, ViewSpendTagsSpendTagsGetResponses, ViewSpendTagsSpendTagsGetErrors, GetGlobalSpendReportGlobalSpendReportGetData, GetGlobalSpendReportGlobalSpendReportGetResponses, GetGlobalSpendReportGlobalSpendReportGetErrors, GlobalViewSpendTagsGlobalSpendTagsGetData, GlobalViewSpendTagsGlobalSpendTagsGetResponses, GlobalViewSpendTagsGlobalSpendTagsGetErrors, CalculateSpendSpendCalculatePostData, CalculateSpendSpendCalculatePostResponses, CalculateSpendSpendCalculatePostErrors, ViewSpendLogsSpendLogsGetData, ViewSpendLogsSpendLogsGetResponses, ViewSpendLogsSpendLogsGetErrors, GlobalSpendResetGlobalSpendResetPostData, GlobalSpendResetGlobalSpendResetPostResponses, ProviderBudgetsProviderBudgetsGetData, ProviderBudgetsProviderBudgetsGetResponses, CachePingCachePingGetData, CachePingCachePingGetResponses, CacheDeleteCacheDeletePostData, CacheDeleteCacheDeletePostResponses, CacheRedisInfoCacheRedisInfoGetData, CacheRedisInfoCacheRedisInfoGetResponses, CacheFlushallCacheFlushallPostData, CacheFlushallCacheFlushallPostResponses, ListGuardrailsGuardrailsListGetData, ListGuardrailsGuardrailsListGetResponses, AddAllowedIpAddAllowedIpPostData, AddAllowedIpAddAllowedIpPostResponses, AddAllowedIpAddAllowedIpPostErrors, DeleteAllowedIpDeleteAllowedIpPostData, DeleteAllowedIpDeleteAllowedIpPostResponses, DeleteAllowedIpDeleteAllowedIpPostErrors, GetSsoSettingsGetInternalUserSettingsGetData, GetSsoSettingsGetInternalUserSettingsGetResponses, GetDefaultTeamSettingsGetDefaultTeamSettingsGetData, GetDefaultTeamSettingsGetDefaultTeamSettingsGetResponses, UpdateInternalUserSettingsUpdateInternalUserSettingsPatchData, UpdateInternalUserSettingsUpdateInternalUserSettingsPatchResponses, UpdateInternalUserSettingsUpdateInternalUserSettingsPatchErrors, UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchData, UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchResponses, UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchErrors, ListFilesFilesGetData, ListFilesFilesGetResponses, ListFilesFilesGetErrors, CreateFileFilesPostData, CreateFileFilesPostResponses, CreateFileFilesPostErrors, ListFilesV1FilesGetData, ListFilesV1FilesGetResponses, ListFilesV1FilesGetErrors, CreateFileV1FilesPostData, CreateFileV1FilesPostResponses, CreateFileV1FilesPostErrors, ListFilesProviderV1FilesGetData, ListFilesProviderV1FilesGetResponses, ListFilesProviderV1FilesGetErrors, CreateFileProviderV1FilesPostData, CreateFileProviderV1FilesPostResponses, CreateFileProviderV1FilesPostErrors, GetFileContentFilesFileIdContentGetData, GetFileContentFilesFileIdContentGetResponses, GetFileContentFilesFileIdContentGetErrors, GetFileContentV1FilesFileIdContentGetData, GetFileContentV1FilesFileIdContentGetResponses, GetFileContentV1FilesFileIdContentGetErrors, GetFileContentProviderV1FilesFileIdContentGetData, GetFileContentProviderV1FilesFileIdContentGetResponses, GetFileContentProviderV1FilesFileIdContentGetErrors, DeleteFileFilesFileIdDeleteData, DeleteFileFilesFileIdDeleteResponses, DeleteFileFilesFileIdDeleteErrors, GetFileFilesFileIdGetData, GetFileFilesFileIdGetResponses, GetFileFilesFileIdGetErrors, DeleteFileV1FilesFileIdDeleteData, DeleteFileV1FilesFileIdDeleteResponses, DeleteFileV1FilesFileIdDeleteErrors, GetFileV1FilesFileIdGetData, GetFileV1FilesFileIdGetResponses, GetFileV1FilesFileIdGetErrors, DeleteFileProviderV1FilesFileIdDeleteData, DeleteFileProviderV1FilesFileIdDeleteResponses, DeleteFileProviderV1FilesFileIdDeleteErrors, GetFileProviderV1FilesFileIdGetData, GetFileProviderV1FilesFileIdGetResponses, GetFileProviderV1FilesFileIdGetErrors, GetTeamCallbacksTeamTeamIdCallbackGetData, GetTeamCallbacksTeamTeamIdCallbackGetResponses, GetTeamCallbacksTeamTeamIdCallbackGetErrors, AddTeamCallbacksTeamTeamIdCallbackPostData, AddTeamCallbacksTeamTeamIdCallbackPostResponses, AddTeamCallbacksTeamTeamIdCallbackPostErrors, DisableTeamLoggingTeamTeamIdDisableLoggingPostData, DisableTeamLoggingTeamTeamIdDisableLoggingPostResponses, DisableTeamLoggingTeamTeamIdDisableLoggingPostErrors, NewBudgetBudgetNewPostData, NewBudgetBudgetNewPostResponses, NewBudgetBudgetNewPostErrors, UpdateBudgetBudgetUpdatePostData, UpdateBudgetBudgetUpdatePostResponses, UpdateBudgetBudgetUpdatePostErrors, InfoBudgetBudgetInfoPostData, InfoBudgetBudgetInfoPostResponses, InfoBudgetBudgetInfoPostErrors, BudgetSettingsBudgetSettingsGetData, BudgetSettingsBudgetSettingsGetResponses, BudgetSettingsBudgetSettingsGetErrors, ListBudgetBudgetListGetData, ListBudgetBudgetListGetResponses, DeleteBudgetBudgetDeletePostData, DeleteBudgetBudgetDeletePostResponses, DeleteBudgetBudgetDeletePostErrors, PatchModelModelModelIdUpdatePatchData, PatchModelModelModelIdUpdatePatchResponses, PatchModelModelModelIdUpdatePatchErrors, DeleteModelModelDeletePostData, DeleteModelModelDeletePostResponses, DeleteModelModelDeletePostErrors, AddNewModelModelNewPostData, AddNewModelModelNewPostResponses, AddNewModelModelNewPostErrors, UpdateModelModelUpdatePostData, UpdateModelModelUpdatePostResponses, UpdateModelModelUpdatePostErrors, NewTagTagNewPostData, NewTagTagNewPostResponses, NewTagTagNewPostErrors, UpdateTagTagUpdatePostData, UpdateTagTagUpdatePostResponses, UpdateTagTagUpdatePostErrors, InfoTagTagInfoPostData, InfoTagTagInfoPostResponses, InfoTagTagInfoPostErrors, ListTagsTagListGetData, ListTagsTagListGetResponses, DeleteTagTagDeletePostData, DeleteTagTagDeletePostResponses, DeleteTagTagDeletePostErrors, GetTagDailyActivityTagDailyActivityGetData, GetTagDailyActivityTagDailyActivityGetResponses, GetTagDailyActivityTagDailyActivityGetErrors, NewVectorStoreVectorStoreNewPostData, NewVectorStoreVectorStoreNewPostResponses, NewVectorStoreVectorStoreNewPostErrors, ListVectorStoresVectorStoreListGetData, ListVectorStoresVectorStoreListGetResponses, ListVectorStoresVectorStoreListGetErrors, DeleteVectorStoreVectorStoreDeletePostData, DeleteVectorStoreVectorStoreDeletePostResponses, DeleteVectorStoreVectorStoreDeletePostErrors, GetRobotsRobotsTxtGetData, GetRobotsRobotsTxtGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Model List
 * Use `/model/info` - to get detailed model information, example - pricing, mode, etc.
 *
 * This is just for compatibility with openai projects like aider.
 */
export const modelListModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ModelListModelsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ModelListModelsGetResponses, ModelListModelsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/models',
        ...options
    });
};

/**
 * Model List
 * Use `/model/info` - to get detailed model information, example - pricing, mode, etc.
 *
 * This is just for compatibility with openai projects like aider.
 */
export const modelListV1ModelsGet = <ThrowOnError extends boolean = false>(options?: Options<ModelListV1ModelsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ModelListV1ModelsGetResponses, ModelListV1ModelsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/models',
        ...options
    });
};

/**
 * Chat Completion
 * Follows the exact same API spec as `OpenAI's Chat API https://platform.openai.com/docs/api-reference/chat`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/chat/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-4o",
 * "messages": [
 * {
 * "role": "user",
 * "content": "Hello!"
 * }
 * ]
 * }'
 * ```
 */
export const chatCompletionOpenaiDeploymentsModelChatCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<ChatCompletionOpenaiDeploymentsModelChatCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatCompletionOpenaiDeploymentsModelChatCompletionsPostResponses, ChatCompletionOpenaiDeploymentsModelChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/deployments/{model}/chat/completions',
        ...options
    });
};

/**
 * Chat Completion
 * Follows the exact same API spec as `OpenAI's Chat API https://platform.openai.com/docs/api-reference/chat`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/chat/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-4o",
 * "messages": [
 * {
 * "role": "user",
 * "content": "Hello!"
 * }
 * ]
 * }'
 * ```
 */
export const chatCompletionEnginesModelChatCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<ChatCompletionEnginesModelChatCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatCompletionEnginesModelChatCompletionsPostResponses, ChatCompletionEnginesModelChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/engines/{model}/chat/completions',
        ...options
    });
};

/**
 * Chat Completion
 * Follows the exact same API spec as `OpenAI's Chat API https://platform.openai.com/docs/api-reference/chat`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/chat/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-4o",
 * "messages": [
 * {
 * "role": "user",
 * "content": "Hello!"
 * }
 * ]
 * }'
 * ```
 */
export const chatCompletionChatCompletionsPost = <ThrowOnError extends boolean = false>(options?: Options<ChatCompletionChatCompletionsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatCompletionChatCompletionsPostResponses, ChatCompletionChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/chat/completions',
        ...options
    });
};

/**
 * Chat Completion
 * Follows the exact same API spec as `OpenAI's Chat API https://platform.openai.com/docs/api-reference/chat`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/chat/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-4o",
 * "messages": [
 * {
 * "role": "user",
 * "content": "Hello!"
 * }
 * ]
 * }'
 * ```
 */
export const chatCompletionV1ChatCompletionsPost = <ThrowOnError extends boolean = false>(options?: Options<ChatCompletionV1ChatCompletionsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ChatCompletionV1ChatCompletionsPostResponses, ChatCompletionV1ChatCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/chat/completions',
        ...options
    });
};

/**
 * Completion
 * Follows the exact same API spec as `OpenAI's Completions API https://platform.openai.com/docs/api-reference/completions`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-3.5-turbo-instruct",
 * "prompt": "Once upon a time",
 * "max_tokens": 50,
 * "temperature": 0.7
 * }'
 * ```
 */
export const completionOpenaiDeploymentsModelCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<CompletionOpenaiDeploymentsModelCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompletionOpenaiDeploymentsModelCompletionsPostResponses, CompletionOpenaiDeploymentsModelCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/deployments/{model}/completions',
        ...options
    });
};

/**
 * Completion
 * Follows the exact same API spec as `OpenAI's Completions API https://platform.openai.com/docs/api-reference/completions`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-3.5-turbo-instruct",
 * "prompt": "Once upon a time",
 * "max_tokens": 50,
 * "temperature": 0.7
 * }'
 * ```
 */
export const completionEnginesModelCompletionsPost = <ThrowOnError extends boolean = false>(options: Options<CompletionEnginesModelCompletionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompletionEnginesModelCompletionsPostResponses, CompletionEnginesModelCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/engines/{model}/completions',
        ...options
    });
};

/**
 * Completion
 * Follows the exact same API spec as `OpenAI's Completions API https://platform.openai.com/docs/api-reference/completions`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-3.5-turbo-instruct",
 * "prompt": "Once upon a time",
 * "max_tokens": 50,
 * "temperature": 0.7
 * }'
 * ```
 */
export const completionCompletionsPost = <ThrowOnError extends boolean = false>(options?: Options<CompletionCompletionsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompletionCompletionsPostResponses, CompletionCompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/completions',
        ...options
    });
};

/**
 * Completion
 * Follows the exact same API spec as `OpenAI's Completions API https://platform.openai.com/docs/api-reference/completions`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/completions
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "gpt-3.5-turbo-instruct",
 * "prompt": "Once upon a time",
 * "max_tokens": 50,
 * "temperature": 0.7
 * }'
 * ```
 */
export const completionV1CompletionsPost = <ThrowOnError extends boolean = false>(options?: Options<CompletionV1CompletionsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompletionV1CompletionsPostResponses, CompletionV1CompletionsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/completions',
        ...options
    });
};

/**
 * Embeddings
 * Follows the exact same API spec as `OpenAI's Embeddings API https://platform.openai.com/docs/api-reference/embeddings`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/embeddings
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "text-embedding-ada-002",
 * "input": "The quick brown fox jumps over the lazy dog"
 * }'
 * ```
 */
export const embeddingsOpenaiDeploymentsModelEmbeddingsPost = <ThrowOnError extends boolean = false>(options: Options<EmbeddingsOpenaiDeploymentsModelEmbeddingsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmbeddingsOpenaiDeploymentsModelEmbeddingsPostResponses, EmbeddingsOpenaiDeploymentsModelEmbeddingsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/deployments/{model}/embeddings',
        ...options
    });
};

/**
 * Embeddings
 * Follows the exact same API spec as `OpenAI's Embeddings API https://platform.openai.com/docs/api-reference/embeddings`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/embeddings
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "text-embedding-ada-002",
 * "input": "The quick brown fox jumps over the lazy dog"
 * }'
 * ```
 */
export const embeddingsEnginesModelEmbeddingsPost = <ThrowOnError extends boolean = false>(options: Options<EmbeddingsEnginesModelEmbeddingsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmbeddingsEnginesModelEmbeddingsPostResponses, EmbeddingsEnginesModelEmbeddingsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/engines/{model}/embeddings',
        ...options
    });
};

/**
 * Embeddings
 * Follows the exact same API spec as `OpenAI's Embeddings API https://platform.openai.com/docs/api-reference/embeddings`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/embeddings
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "text-embedding-ada-002",
 * "input": "The quick brown fox jumps over the lazy dog"
 * }'
 * ```
 */
export const embeddingsEmbeddingsPost = <ThrowOnError extends boolean = false>(options?: Options<EmbeddingsEmbeddingsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmbeddingsEmbeddingsPostResponses, EmbeddingsEmbeddingsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/embeddings',
        ...options
    });
};

/**
 * Embeddings
 * Follows the exact same API spec as `OpenAI's Embeddings API https://platform.openai.com/docs/api-reference/embeddings`
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/embeddings
 * -H "Content-Type: application/json"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "model": "text-embedding-ada-002",
 * "input": "The quick brown fox jumps over the lazy dog"
 * }'
 * ```
 */
export const embeddingsV1EmbeddingsPost = <ThrowOnError extends boolean = false>(options?: Options<EmbeddingsV1EmbeddingsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmbeddingsV1EmbeddingsPostResponses, EmbeddingsV1EmbeddingsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/embeddings',
        ...options
    });
};

/**
 * Image Generation
 */
export const imageGenerationImagesGenerationsPost = <ThrowOnError extends boolean = false>(options?: Options<ImageGenerationImagesGenerationsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ImageGenerationImagesGenerationsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/images/generations',
        ...options
    });
};

/**
 * Image Generation
 */
export const imageGenerationV1ImagesGenerationsPost = <ThrowOnError extends boolean = false>(options?: Options<ImageGenerationV1ImagesGenerationsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ImageGenerationV1ImagesGenerationsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/images/generations',
        ...options
    });
};

/**
 * Audio Speech
 * Same params as:
 *
 * https://platform.openai.com/docs/api-reference/audio/createSpeech
 */
export const audioSpeechAudioSpeechPost = <ThrowOnError extends boolean = false>(options?: Options<AudioSpeechAudioSpeechPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AudioSpeechAudioSpeechPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/audio/speech',
        ...options
    });
};

/**
 * Audio Speech
 * Same params as:
 *
 * https://platform.openai.com/docs/api-reference/audio/createSpeech
 */
export const audioSpeechV1AudioSpeechPost = <ThrowOnError extends boolean = false>(options?: Options<AudioSpeechV1AudioSpeechPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AudioSpeechV1AudioSpeechPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/audio/speech',
        ...options
    });
};

/**
 * Audio Transcriptions
 * Same params as:
 *
 * https://platform.openai.com/docs/api-reference/audio/createTranscription?lang=curl
 */
export const audioTranscriptionsAudioTranscriptionsPost = <ThrowOnError extends boolean = false>(options: Options<AudioTranscriptionsAudioTranscriptionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AudioTranscriptionsAudioTranscriptionsPostResponses, AudioTranscriptionsAudioTranscriptionsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/audio/transcriptions',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Audio Transcriptions
 * Same params as:
 *
 * https://platform.openai.com/docs/api-reference/audio/createTranscription?lang=curl
 */
export const audioTranscriptionsV1AudioTranscriptionsPost = <ThrowOnError extends boolean = false>(options: Options<AudioTranscriptionsV1AudioTranscriptionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AudioTranscriptionsV1AudioTranscriptionsPostResponses, AudioTranscriptionsV1AudioTranscriptionsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/audio/transcriptions',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Assistants
 * Returns a list of assistants.
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/listAssistants
 */
export const getAssistantsAssistantsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAssistantsAssistantsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAssistantsAssistantsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assistants',
        ...options
    });
};

/**
 * Create Assistant
 * Create assistant
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/createAssistant
 */
export const createAssistantAssistantsPost = <ThrowOnError extends boolean = false>(options?: Options<CreateAssistantAssistantsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAssistantAssistantsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assistants',
        ...options
    });
};

/**
 * Get Assistants
 * Returns a list of assistants.
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/listAssistants
 */
export const getAssistantsV1AssistantsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAssistantsV1AssistantsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAssistantsV1AssistantsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/assistants',
        ...options
    });
};

/**
 * Create Assistant
 * Create assistant
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/createAssistant
 */
export const createAssistantV1AssistantsPost = <ThrowOnError extends boolean = false>(options?: Options<CreateAssistantV1AssistantsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAssistantV1AssistantsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/assistants',
        ...options
    });
};

/**
 * Delete Assistant
 * Delete assistant
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/createAssistant
 */
export const deleteAssistantAssistantsAssistantIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAssistantAssistantsAssistantIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssistantAssistantsAssistantIdDeleteResponses, DeleteAssistantAssistantsAssistantIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assistants/{assistant_id}',
        ...options
    });
};

/**
 * Delete Assistant
 * Delete assistant
 *
 * API Reference docs - https://platform.openai.com/docs/api-reference/assistants/createAssistant
 */
export const deleteAssistantV1AssistantsAssistantIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAssistantV1AssistantsAssistantIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssistantV1AssistantsAssistantIdDeleteResponses, DeleteAssistantV1AssistantsAssistantIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/assistants/{assistant_id}',
        ...options
    });
};

/**
 * Create Threads
 * Create a thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/threads/createThread
 */
export const createThreadsThreadsPost = <ThrowOnError extends boolean = false>(options?: Options<CreateThreadsThreadsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateThreadsThreadsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/threads',
        ...options
    });
};

/**
 * Create Threads
 * Create a thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/threads/createThread
 */
export const createThreadsV1ThreadsPost = <ThrowOnError extends boolean = false>(options?: Options<CreateThreadsV1ThreadsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateThreadsV1ThreadsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/threads',
        ...options
    });
};

/**
 * Get Thread
 * Retrieves a thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/threads/getThread
 */
export const getThreadThreadsThreadIdGet = <ThrowOnError extends boolean = false>(options: Options<GetThreadThreadsThreadIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadThreadsThreadIdGetResponses, GetThreadThreadsThreadIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/threads/{thread_id}',
        ...options
    });
};

/**
 * Get Thread
 * Retrieves a thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/threads/getThread
 */
export const getThreadV1ThreadsThreadIdGet = <ThrowOnError extends boolean = false>(options: Options<GetThreadV1ThreadsThreadIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThreadV1ThreadsThreadIdGetResponses, GetThreadV1ThreadsThreadIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/threads/{thread_id}',
        ...options
    });
};

/**
 * Get Messages
 * Returns a list of messages for a given thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/messages/listMessages
 */
export const getMessagesThreadsThreadIdMessagesGet = <ThrowOnError extends boolean = false>(options: Options<GetMessagesThreadsThreadIdMessagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessagesThreadsThreadIdMessagesGetResponses, GetMessagesThreadsThreadIdMessagesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/threads/{thread_id}/messages',
        ...options
    });
};

/**
 * Add Messages
 * Create a message.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/messages/createMessage
 */
export const addMessagesThreadsThreadIdMessagesPost = <ThrowOnError extends boolean = false>(options: Options<AddMessagesThreadsThreadIdMessagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMessagesThreadsThreadIdMessagesPostResponses, AddMessagesThreadsThreadIdMessagesPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/threads/{thread_id}/messages',
        ...options
    });
};

/**
 * Get Messages
 * Returns a list of messages for a given thread.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/messages/listMessages
 */
export const getMessagesV1ThreadsThreadIdMessagesGet = <ThrowOnError extends boolean = false>(options: Options<GetMessagesV1ThreadsThreadIdMessagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessagesV1ThreadsThreadIdMessagesGetResponses, GetMessagesV1ThreadsThreadIdMessagesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/threads/{thread_id}/messages',
        ...options
    });
};

/**
 * Add Messages
 * Create a message.
 *
 * API Reference - https://platform.openai.com/docs/api-reference/messages/createMessage
 */
export const addMessagesV1ThreadsThreadIdMessagesPost = <ThrowOnError extends boolean = false>(options: Options<AddMessagesV1ThreadsThreadIdMessagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMessagesV1ThreadsThreadIdMessagesPostResponses, AddMessagesV1ThreadsThreadIdMessagesPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/threads/{thread_id}/messages',
        ...options
    });
};

/**
 * Run Thread
 * Create a run.
 *
 * API Reference: https://platform.openai.com/docs/api-reference/runs/createRun
 */
export const runThreadThreadsThreadIdRunsPost = <ThrowOnError extends boolean = false>(options: Options<RunThreadThreadsThreadIdRunsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunThreadThreadsThreadIdRunsPostResponses, RunThreadThreadsThreadIdRunsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/threads/{thread_id}/runs',
        ...options
    });
};

/**
 * Run Thread
 * Create a run.
 *
 * API Reference: https://platform.openai.com/docs/api-reference/runs/createRun
 */
export const runThreadV1ThreadsThreadIdRunsPost = <ThrowOnError extends boolean = false>(options: Options<RunThreadV1ThreadsThreadIdRunsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunThreadV1ThreadsThreadIdRunsPostResponses, RunThreadV1ThreadsThreadIdRunsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/threads/{thread_id}/runs',
        ...options
    });
};

/**
 * Moderations
 * The moderations endpoint is a tool you can use to check whether content complies with an LLM Providers policies.
 *
 * Quick Start
 * ```
 * curl --location 'http://0.0.0.0:4000/moderations'     --header 'Content-Type: application/json'     --header 'Authorization: Bearer sk-1234'     --data '{"input": "Sample text goes here", "model": "text-moderation-stable"}'
 * ```
 */
export const moderationsModerationsPost = <ThrowOnError extends boolean = false>(options?: Options<ModerationsModerationsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ModerationsModerationsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/moderations',
        ...options
    });
};

/**
 * Moderations
 * The moderations endpoint is a tool you can use to check whether content complies with an LLM Providers policies.
 *
 * Quick Start
 * ```
 * curl --location 'http://0.0.0.0:4000/moderations'     --header 'Content-Type: application/json'     --header 'Authorization: Bearer sk-1234'     --data '{"input": "Sample text goes here", "model": "text-moderation-stable"}'
 * ```
 */
export const moderationsV1ModerationsPost = <ThrowOnError extends boolean = false>(options?: Options<ModerationsV1ModerationsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ModerationsV1ModerationsPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/moderations',
        ...options
    });
};

/**
 * Token Counter
 */
export const tokenCounterUtilsTokenCounterPost = <ThrowOnError extends boolean = false>(options: Options<TokenCounterUtilsTokenCounterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenCounterUtilsTokenCounterPostResponses, TokenCounterUtilsTokenCounterPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/utils/token_counter',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Supported Openai Params
 * Returns supported openai params for a given litellm model name
 *
 * e.g. `gpt-4` vs `gpt-3.5-turbo`
 *
 * Example curl:
 * ```
 * curl -X GET --location 'http://localhost:4000/utils/supported_openai_params?model=gpt-3.5-turbo-16k'         --header 'Authorization: Bearer sk-1234'
 * ```
 */
export const supportedOpenaiParamsUtilsSupportedOpenaiParamsGet = <ThrowOnError extends boolean = false>(options: Options<SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetResponses, SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/utils/supported_openai_params',
        ...options
    });
};

/**
 * Transform Request
 */
export const transformRequestUtilsTransformRequestPost = <ThrowOnError extends boolean = false>(options: Options<TransformRequestUtilsTransformRequestPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TransformRequestUtilsTransformRequestPostResponses, TransformRequestUtilsTransformRequestPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/utils/transform_request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Model Info V1
 * Provides more info about each model in /models, including config.yaml descriptions (except api key and api base)
 *
 * Parameters:
 * litellm_model_id: Optional[str] = None (this is the value of `x-litellm-model-id` returned in response headers)
 *
 * - When litellm_model_id is passed, it will return the info for that specific model
 * - When litellm_model_id is not passed, it will return the info for all models
 *
 * Returns:
 * Returns a dictionary containing information about each model.
 *
 * Example Response:
 * ```json
 * {
 * "data": [
 * {
 * "model_name": "fake-openai-endpoint",
 * "litellm_params": {
 * "api_base": "https://exampleopenaiendpoint-production.up.railway.app/",
 * "model": "openai/fake"
 * },
 * "model_info": {
 * "id": "112f74fab24a7a5245d2ced3536dd8f5f9192c57ee6e332af0f0512e08bed5af",
 * "db_model": false
 * }
 * }
 * ]
 * }
 *
 * ```
 */
export const modelInfoV1V1ModelInfoGet = <ThrowOnError extends boolean = false>(options?: Options<ModelInfoV1V1ModelInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ModelInfoV1V1ModelInfoGetResponses, ModelInfoV1V1ModelInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/model/info',
        ...options
    });
};

/**
 * Model Info V1
 * Provides more info about each model in /models, including config.yaml descriptions (except api key and api base)
 *
 * Parameters:
 * litellm_model_id: Optional[str] = None (this is the value of `x-litellm-model-id` returned in response headers)
 *
 * - When litellm_model_id is passed, it will return the info for that specific model
 * - When litellm_model_id is not passed, it will return the info for all models
 *
 * Returns:
 * Returns a dictionary containing information about each model.
 *
 * Example Response:
 * ```json
 * {
 * "data": [
 * {
 * "model_name": "fake-openai-endpoint",
 * "litellm_params": {
 * "api_base": "https://exampleopenaiendpoint-production.up.railway.app/",
 * "model": "openai/fake"
 * },
 * "model_info": {
 * "id": "112f74fab24a7a5245d2ced3536dd8f5f9192c57ee6e332af0f0512e08bed5af",
 * "db_model": false
 * }
 * }
 * ]
 * }
 *
 * ```
 */
export const modelInfoV1ModelInfoGet = <ThrowOnError extends boolean = false>(options?: Options<ModelInfoV1ModelInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ModelInfoV1ModelInfoGetResponses, ModelInfoV1ModelInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model/info',
        ...options
    });
};

/**
 * Model Group Info
 * Get information about all the deployments on litellm proxy, including config.yaml descriptions (except api key and api base)
 *
 * - /model_group/info returns all model groups. End users of proxy should use /model_group/info since those models will be used for /chat/completions, /embeddings, etc.
 * - /model_group/info?model_group=rerank-english-v3.0 returns all model groups for a specific model group (`model_name` in config.yaml)
 *
 *
 *
 * Example Request (All Models):
 * ```shell
 * curl -X 'GET'     'http://localhost:4000/model_group/info'     -H 'accept: application/json'     -H 'x-api-key: sk-1234'
 * ```
 *
 * Example Request (Specific Model Group):
 * ```shell
 * curl -X 'GET'     'http://localhost:4000/model_group/info?model_group=rerank-english-v3.0'     -H 'accept: application/json'     -H 'Authorization: Bearer sk-1234'
 * ```
 *
 * Example Request (Specific Wildcard Model Group): (e.g. `model_name: openai*` on config.yaml)
 * ```shell
 * curl -X 'GET'     'http://localhost:4000/model_group/info?model_group=openai/tts-1'
 * -H 'accept: application/json'     -H 'Authorization: Bearersk-1234'
 * ```
 *
 * Learn how to use and set wildcard models [here](https://docs.litellm.ai/docs/wildcard_routing)
 *
 * Example Response:
 * ```json
 * {
 * "data": [
 * {
 * "model_group": "rerank-english-v3.0",
 * "providers": [
 * "cohere"
 * ],
 * "max_input_tokens": null,
 * "max_output_tokens": null,
 * "input_cost_per_token": 0.0,
 * "output_cost_per_token": 0.0,
 * "mode": null,
 * "tpm": null,
 * "rpm": null,
 * "supports_parallel_function_calling": false,
 * "supports_vision": false,
 * "supports_function_calling": false,
 * "supported_openai_params": [
 * "stream",
 * "temperature",
 * "max_tokens",
 * "logit_bias",
 * "top_p",
 * "frequency_penalty",
 * "presence_penalty",
 * "stop",
 * "n",
 * "extra_headers"
 * ]
 * },
 * {
 * "model_group": "gpt-3.5-turbo",
 * "providers": [
 * "openai"
 * ],
 * "max_input_tokens": 16385.0,
 * "max_output_tokens": 4096.0,
 * "input_cost_per_token": 1.5e-06,
 * "output_cost_per_token": 2e-06,
 * "mode": "chat",
 * "tpm": null,
 * "rpm": null,
 * "supports_parallel_function_calling": false,
 * "supports_vision": false,
 * "supports_function_calling": true,
 * "supported_openai_params": [
 * "frequency_penalty",
 * "logit_bias",
 * "logprobs",
 * "top_logprobs",
 * "max_tokens",
 * "max_completion_tokens",
 * "n",
 * "presence_penalty",
 * "seed",
 * "stop",
 * "stream",
 * "stream_options",
 * "temperature",
 * "top_p",
 * "tools",
 * "tool_choice",
 * "function_call",
 * "functions",
 * "max_retries",
 * "extra_headers",
 * "parallel_tool_calls",
 * "response_format"
 * ]
 * },
 * {
 * "model_group": "llava-hf",
 * "providers": [
 * "openai"
 * ],
 * "max_input_tokens": null,
 * "max_output_tokens": null,
 * "input_cost_per_token": 0.0,
 * "output_cost_per_token": 0.0,
 * "mode": null,
 * "tpm": null,
 * "rpm": null,
 * "supports_parallel_function_calling": false,
 * "supports_vision": true,
 * "supports_function_calling": false,
 * "supported_openai_params": [
 * "frequency_penalty",
 * "logit_bias",
 * "logprobs",
 * "top_logprobs",
 * "max_tokens",
 * "max_completion_tokens",
 * "n",
 * "presence_penalty",
 * "seed",
 * "stop",
 * "stream",
 * "stream_options",
 * "temperature",
 * "top_p",
 * "tools",
 * "tool_choice",
 * "function_call",
 * "functions",
 * "max_retries",
 * "extra_headers",
 * "parallel_tool_calls",
 * "response_format"
 * ]
 * }
 * ]
 * }
 * ```
 */
export const modelGroupInfoModelGroupInfoGet = <ThrowOnError extends boolean = false>(options?: Options<ModelGroupInfoModelGroupInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ModelGroupInfoModelGroupInfoGetResponses, ModelGroupInfoModelGroupInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model_group/info',
        ...options
    });
};

/**
 * Home
 */
export const homeGet = <ThrowOnError extends boolean = false>(options?: Options<HomeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HomeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/',
        ...options
    });
};

/**
 * Get Routes
 * Get a list of available routes in the FastAPI application.
 */
export const getRoutesRoutesGet = <ThrowOnError extends boolean = false>(options?: Options<GetRoutesRoutesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRoutesRoutesGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/routes',
        ...options
    });
};

/**
 * Responses Api
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/responses     -H "Content-Type: application/json"     -H "Authorization: Bearer sk-1234"     -d '{
 * "model": "gpt-4o",
 * "input": "Tell me about AI"
 * }'
 * ```
 */
export const responsesApiResponsesPost = <ThrowOnError extends boolean = false>(options?: Options<ResponsesApiResponsesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResponsesApiResponsesPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/responses',
        ...options
    });
};

/**
 * Responses Api
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses
 *
 * ```bash
 * curl -X POST http://localhost:4000/v1/responses     -H "Content-Type: application/json"     -H "Authorization: Bearer sk-1234"     -d '{
 * "model": "gpt-4o",
 * "input": "Tell me about AI"
 * }'
 * ```
 */
export const responsesApiV1ResponsesPost = <ThrowOnError extends boolean = false>(options?: Options<ResponsesApiV1ResponsesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResponsesApiV1ResponsesPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/responses',
        ...options
    });
};

/**
 * Delete Response
 * Delete a response by ID.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/delete
 *
 * ```bash
 * curl -X DELETE http://localhost:4000/v1/responses/resp_abc123     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const deleteResponseResponsesResponseIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteResponseResponsesResponseIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponseResponsesResponseIdDeleteResponses, DeleteResponseResponsesResponseIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/responses/{response_id}',
        ...options
    });
};

/**
 * Get Response
 * Get a response by ID.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/get
 *
 * ```bash
 * curl -X GET http://localhost:4000/v1/responses/resp_abc123     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const getResponseResponsesResponseIdGet = <ThrowOnError extends boolean = false>(options: Options<GetResponseResponsesResponseIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResponseResponsesResponseIdGetResponses, GetResponseResponsesResponseIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/responses/{response_id}',
        ...options
    });
};

/**
 * Delete Response
 * Delete a response by ID.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/delete
 *
 * ```bash
 * curl -X DELETE http://localhost:4000/v1/responses/resp_abc123     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const deleteResponseV1ResponsesResponseIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteResponseV1ResponsesResponseIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteResponseV1ResponsesResponseIdDeleteResponses, DeleteResponseV1ResponsesResponseIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/responses/{response_id}',
        ...options
    });
};

/**
 * Get Response
 * Get a response by ID.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/get
 *
 * ```bash
 * curl -X GET http://localhost:4000/v1/responses/resp_abc123     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const getResponseV1ResponsesResponseIdGet = <ThrowOnError extends boolean = false>(options: Options<GetResponseV1ResponsesResponseIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResponseV1ResponsesResponseIdGetResponses, GetResponseV1ResponsesResponseIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/responses/{response_id}',
        ...options
    });
};

/**
 * Get Response Input Items
 * Get input items for a response.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/input-items
 *
 * ```bash
 * curl -X GET http://localhost:4000/v1/responses/resp_abc123/input_items     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const getResponseInputItemsResponsesResponseIdInputItemsGet = <ThrowOnError extends boolean = false>(options: Options<GetResponseInputItemsResponsesResponseIdInputItemsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResponseInputItemsResponsesResponseIdInputItemsGetResponses, GetResponseInputItemsResponsesResponseIdInputItemsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/responses/{response_id}/input_items',
        ...options
    });
};

/**
 * Get Response Input Items
 * Get input items for a response.
 *
 * Follows the OpenAI Responses API spec: https://platform.openai.com/docs/api-reference/responses/input-items
 *
 * ```bash
 * curl -X GET http://localhost:4000/v1/responses/resp_abc123/input_items     -H "Authorization: Bearer sk-1234"
 * ```
 */
export const getResponseInputItemsV1ResponsesResponseIdInputItemsGet = <ThrowOnError extends boolean = false>(options: Options<GetResponseInputItemsV1ResponsesResponseIdInputItemsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResponseInputItemsV1ResponsesResponseIdInputItemsGetResponses, GetResponseInputItemsV1ResponsesResponseIdInputItemsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/responses/{response_id}/input_items',
        ...options
    });
};

/**
 * List Batches
 * Lists
 * This is the equivalent of GET https://api.openai.com/v1/batches/
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches?limit=2     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const listBatchesBatchesGet = <ThrowOnError extends boolean = false>(options?: Options<ListBatchesBatchesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBatchesBatchesGetResponses, ListBatchesBatchesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/batches',
        ...options
    });
};

/**
 * Create Batch
 * Create large batches of API requests for asynchronous processing.
 * This is the equivalent of POST https://api.openai.com/v1/batch
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -d '{
 * "input_file_id": "file-abc123",
 * "endpoint": "/v1/chat/completions",
 * "completion_window": "24h"
 * }'
 * ```
 */
export const createBatchBatchesPost = <ThrowOnError extends boolean = false>(options?: Options<CreateBatchBatchesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateBatchBatchesPostResponses, CreateBatchBatchesPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/batches',
        ...options
    });
};

/**
 * List Batches
 * Lists
 * This is the equivalent of GET https://api.openai.com/v1/batches/
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches?limit=2     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const listBatchesV1BatchesGet = <ThrowOnError extends boolean = false>(options?: Options<ListBatchesV1BatchesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBatchesV1BatchesGetResponses, ListBatchesV1BatchesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/batches',
        ...options
    });
};

/**
 * Create Batch
 * Create large batches of API requests for asynchronous processing.
 * This is the equivalent of POST https://api.openai.com/v1/batch
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -d '{
 * "input_file_id": "file-abc123",
 * "endpoint": "/v1/chat/completions",
 * "completion_window": "24h"
 * }'
 * ```
 */
export const createBatchV1BatchesPost = <ThrowOnError extends boolean = false>(options?: Options<CreateBatchV1BatchesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateBatchV1BatchesPostResponses, CreateBatchV1BatchesPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/batches',
        ...options
    });
};

/**
 * List Batches
 * Lists
 * This is the equivalent of GET https://api.openai.com/v1/batches/
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches?limit=2     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const listBatchesProviderV1BatchesGet = <ThrowOnError extends boolean = false>(options: Options<ListBatchesProviderV1BatchesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBatchesProviderV1BatchesGetResponses, ListBatchesProviderV1BatchesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/batches',
        ...options
    });
};

/**
 * Create Batch
 * Create large batches of API requests for asynchronous processing.
 * This is the equivalent of POST https://api.openai.com/v1/batch
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -d '{
 * "input_file_id": "file-abc123",
 * "endpoint": "/v1/chat/completions",
 * "completion_window": "24h"
 * }'
 * ```
 */
export const createBatchProviderV1BatchesPost = <ThrowOnError extends boolean = false>(options: Options<CreateBatchProviderV1BatchesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBatchProviderV1BatchesPostResponses, CreateBatchProviderV1BatchesPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/batches',
        ...options
    });
};

/**
 * Retrieve Batch
 * Retrieves a batch.
 * This is the equivalent of GET https://api.openai.com/v1/batches/{batch_id}
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const retrieveBatchBatchesBatchIdGet = <ThrowOnError extends boolean = false>(options: Options<RetrieveBatchBatchesBatchIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveBatchBatchesBatchIdGetResponses, RetrieveBatchBatchesBatchIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/batches/{batch_id}',
        ...options
    });
};

/**
 * Retrieve Batch
 * Retrieves a batch.
 * This is the equivalent of GET https://api.openai.com/v1/batches/{batch_id}
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const retrieveBatchV1BatchesBatchIdGet = <ThrowOnError extends boolean = false>(options: Options<RetrieveBatchV1BatchesBatchIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveBatchV1BatchesBatchIdGetResponses, RetrieveBatchV1BatchesBatchIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/batches/{batch_id}',
        ...options
    });
};

/**
 * Retrieve Batch
 * Retrieves a batch.
 * This is the equivalent of GET https://api.openai.com/v1/batches/{batch_id}
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123     -H "Authorization: Bearer sk-1234"     -H "Content-Type: application/json"
 * ```
 */
export const retrieveBatchProviderV1BatchesBatchIdGet = <ThrowOnError extends boolean = false>(options: Options<RetrieveBatchProviderV1BatchesBatchIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveBatchProviderV1BatchesBatchIdGetResponses, RetrieveBatchProviderV1BatchesBatchIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/batches/{batch_id}',
        ...options
    });
};

/**
 * Cancel Batch
 * Cancel a batch.
 * This is the equivalent of POST https://api.openai.com/v1/batches/{batch_id}/cancel
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/cancel
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123/cancel         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -X POST
 *
 * ```
 */
export const cancelBatchBatchesBatchIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelBatchBatchesBatchIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelBatchBatchesBatchIdCancelPostResponses, CancelBatchBatchesBatchIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/batches/{batch_id}/cancel',
        ...options
    });
};

/**
 * Cancel Batch
 * Cancel a batch.
 * This is the equivalent of POST https://api.openai.com/v1/batches/{batch_id}/cancel
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/cancel
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123/cancel         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -X POST
 *
 * ```
 */
export const cancelBatchV1BatchesBatchIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelBatchV1BatchesBatchIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelBatchV1BatchesBatchIdCancelPostResponses, CancelBatchV1BatchesBatchIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/batches/{batch_id}/cancel',
        ...options
    });
};

/**
 * Cancel Batch
 * Cancel a batch.
 * This is the equivalent of POST https://api.openai.com/v1/batches/{batch_id}/cancel
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/batch/cancel
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/batches/batch_abc123/cancel         -H "Authorization: Bearer sk-1234"         -H "Content-Type: application/json"         -X POST
 *
 * ```
 */
export const cancelBatchProviderV1BatchesBatchIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelBatchProviderV1BatchesBatchIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelBatchProviderV1BatchesBatchIdCancelPostResponses, CancelBatchProviderV1BatchesBatchIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/batches/{batch_id}/cancel',
        ...options
    });
};

/**
 * Rerank
 */
export const rerankRerankPost = <ThrowOnError extends boolean = false>(options?: Options<RerankRerankPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RerankRerankPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/rerank',
        ...options
    });
};

/**
 * Rerank
 */
export const rerankV1RerankPost = <ThrowOnError extends boolean = false>(options?: Options<RerankV1RerankPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RerankV1RerankPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/rerank',
        ...options
    });
};

/**
 * Rerank
 */
export const rerankV2RerankPost = <ThrowOnError extends boolean = false>(options?: Options<RerankV2RerankPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RerankV2RerankPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v2/rerank',
        ...options
    });
};

/**
 * ✨ (Enterprise) List Fine-Tuning Jobs
 * Lists fine-tuning jobs for the organization.
 * This is the equivalent of GET https://api.openai.com/v1/fine_tuning/jobs
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `after`: Identifier for the last job from the previous pagination request.
 * - `limit`: Number of fine-tuning jobs to retrieve (default is 20).
 */
export const listFineTuningJobsFineTuningJobsGet = <ThrowOnError extends boolean = false>(options: Options<ListFineTuningJobsFineTuningJobsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFineTuningJobsFineTuningJobsGetResponses, ListFineTuningJobsFineTuningJobsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/fine_tuning/jobs',
        ...options
    });
};

/**
 * ✨ (Enterprise) Create Fine-Tuning Job
 * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
 * This is the equivalent of POST https://api.openai.com/v1/fine_tuning/jobs
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/fine-tuning/create
 *
 * Example Curl:
 * ```
 * curl http://localhost:4000/v1/fine_tuning/jobs       -H "Content-Type: application/json"       -H "Authorization: Bearer sk-1234"       -d '{
 * "model": "gpt-3.5-turbo",
 * "training_file": "file-abc123",
 * "hyperparameters": {
 * "n_epochs": 4
 * }
 * }'
 * ```
 */
export const createFineTuningJobFineTuningJobsPost = <ThrowOnError extends boolean = false>(options: Options<CreateFineTuningJobFineTuningJobsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFineTuningJobFineTuningJobsPostResponses, CreateFineTuningJobFineTuningJobsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/fine_tuning/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ✨ (Enterprise) List Fine-Tuning Jobs
 * Lists fine-tuning jobs for the organization.
 * This is the equivalent of GET https://api.openai.com/v1/fine_tuning/jobs
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `after`: Identifier for the last job from the previous pagination request.
 * - `limit`: Number of fine-tuning jobs to retrieve (default is 20).
 */
export const listFineTuningJobsV1FineTuningJobsGet = <ThrowOnError extends boolean = false>(options: Options<ListFineTuningJobsV1FineTuningJobsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFineTuningJobsV1FineTuningJobsGetResponses, ListFineTuningJobsV1FineTuningJobsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/fine_tuning/jobs',
        ...options
    });
};

/**
 * ✨ (Enterprise) Create Fine-Tuning Job
 * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
 * This is the equivalent of POST https://api.openai.com/v1/fine_tuning/jobs
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/fine-tuning/create
 *
 * Example Curl:
 * ```
 * curl http://localhost:4000/v1/fine_tuning/jobs       -H "Content-Type: application/json"       -H "Authorization: Bearer sk-1234"       -d '{
 * "model": "gpt-3.5-turbo",
 * "training_file": "file-abc123",
 * "hyperparameters": {
 * "n_epochs": 4
 * }
 * }'
 * ```
 */
export const createFineTuningJobV1FineTuningJobsPost = <ThrowOnError extends boolean = false>(options: Options<CreateFineTuningJobV1FineTuningJobsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFineTuningJobV1FineTuningJobsPostResponses, CreateFineTuningJobV1FineTuningJobsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/fine_tuning/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ✨ (Enterprise) Retrieve Fine-Tuning Job
 * Retrieves a fine-tuning job.
 * This is the equivalent of GET https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `fine_tuning_job_id`: The ID of the fine-tuning job to retrieve.
 */
export const retrieveFineTuningJobFineTuningJobsFineTuningJobIdGet = <ThrowOnError extends boolean = false>(options: Options<RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetResponses, RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/fine_tuning/jobs/{fine_tuning_job_id}',
        ...options
    });
};

/**
 * ✨ (Enterprise) Retrieve Fine-Tuning Job
 * Retrieves a fine-tuning job.
 * This is the equivalent of GET https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `fine_tuning_job_id`: The ID of the fine-tuning job to retrieve.
 */
export const retrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGet = <ThrowOnError extends boolean = false>(options: Options<RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetResponses, RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/fine_tuning/jobs/{fine_tuning_job_id}',
        ...options
    });
};

/**
 * ✨ (Enterprise) Cancel Fine-Tuning Jobs
 * Cancel a fine-tuning job.
 *
 * This is the equivalent of POST https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `fine_tuning_job_id`: The ID of the fine-tuning job to cancel.
 */
export const cancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostResponses, CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/fine_tuning/jobs/{fine_tuning_job_id}/cancel',
        ...options
    });
};

/**
 * ✨ (Enterprise) Cancel Fine-Tuning Jobs
 * Cancel a fine-tuning job.
 *
 * This is the equivalent of POST https://api.openai.com/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel
 *
 * Supported Query Params:
 * - `custom_llm_provider`: Name of the LiteLLM provider
 * - `fine_tuning_job_id`: The ID of the fine-tuning job to cancel.
 */
export const cancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostResponses, CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel',
        ...options
    });
};

/**
 * Get Credentials
 * [BETA] endpoint. This might change unexpectedly.
 */
export const getCredentialsCredentialsGet = <ThrowOnError extends boolean = false>(options?: Options<GetCredentialsCredentialsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCredentialsCredentialsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials',
        ...options
    });
};

/**
 * Create Credential
 * [BETA] endpoint. This might change unexpectedly.
 * Stores credential in DB.
 * Reloads credentials in memory.
 */
export const createCredentialCredentialsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCredentialCredentialsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCredentialCredentialsPostResponses, CreateCredentialCredentialsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Credential
 * [BETA] endpoint. This might change unexpectedly.
 */
export const getCredentialCredentialsByModelModelIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCredentialCredentialsByModelModelIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCredentialCredentialsByModelModelIdGetResponses, GetCredentialCredentialsByModelModelIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials/by_model/{model_id}',
        ...options
    });
};

/**
 * Get Credential
 * [BETA] endpoint. This might change unexpectedly.
 */
export const getCredentialCredentialsByNameCredentialNameGet = <ThrowOnError extends boolean = false>(options: Options<GetCredentialCredentialsByNameCredentialNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCredentialCredentialsByNameCredentialNameGetResponses, GetCredentialCredentialsByNameCredentialNameGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials/by_name/{credential_name}',
        ...options
    });
};

/**
 * Delete Credential
 * [BETA] endpoint. This might change unexpectedly.
 */
export const deleteCredentialCredentialsCredentialNameDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCredentialCredentialsCredentialNameDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCredentialCredentialsCredentialNameDeleteResponses, DeleteCredentialCredentialsCredentialNameDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{credential_name}',
        ...options
    });
};

/**
 * Update Credential
 * [BETA] endpoint. This might change unexpectedly.
 */
export const updateCredentialCredentialsCredentialNamePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCredentialCredentialsCredentialNamePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCredentialCredentialsCredentialNamePatchResponses, UpdateCredentialCredentialsCredentialNamePatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/credentials/{credential_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gemini Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/google_ai_studio)
 */
export const geminiProxyRouteGeminiEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<GeminiProxyRouteGeminiEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GeminiProxyRouteGeminiEndpointDeleteResponses, GeminiProxyRouteGeminiEndpointDeleteErrors, ThrowOnError>({
        url: '/gemini/{endpoint}',
        ...options
    });
};

/**
 * Gemini Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/google_ai_studio)
 */
export const geminiProxyRouteGeminiEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<GeminiProxyRouteGeminiEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GeminiProxyRouteGeminiEndpointDelete2Responses, GeminiProxyRouteGeminiEndpointDelete2Errors, ThrowOnError>({
        url: '/gemini/{endpoint}',
        ...options
    });
};

/**
 * Gemini Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/google_ai_studio)
 */
export const geminiProxyRouteGeminiEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<GeminiProxyRouteGeminiEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GeminiProxyRouteGeminiEndpointDelete3Responses, GeminiProxyRouteGeminiEndpointDelete3Errors, ThrowOnError>({
        url: '/gemini/{endpoint}',
        ...options
    });
};

/**
 * Gemini Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/google_ai_studio)
 */
export const geminiProxyRouteGeminiEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<GeminiProxyRouteGeminiEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GeminiProxyRouteGeminiEndpointDelete4Responses, GeminiProxyRouteGeminiEndpointDelete4Errors, ThrowOnError>({
        url: '/gemini/{endpoint}',
        ...options
    });
};

/**
 * Gemini Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/google_ai_studio)
 */
export const geminiProxyRouteGeminiEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<GeminiProxyRouteGeminiEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GeminiProxyRouteGeminiEndpointDelete5Responses, GeminiProxyRouteGeminiEndpointDelete5Errors, ThrowOnError>({
        url: '/gemini/{endpoint}',
        ...options
    });
};

/**
 * Cohere Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/cohere)
 */
export const cohereProxyRouteCohereEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<CohereProxyRouteCohereEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CohereProxyRouteCohereEndpointDeleteResponses, CohereProxyRouteCohereEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cohere/{endpoint}',
        ...options
    });
};

/**
 * Cohere Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/cohere)
 */
export const cohereProxyRouteCohereEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<CohereProxyRouteCohereEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CohereProxyRouteCohereEndpointDelete2Responses, CohereProxyRouteCohereEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cohere/{endpoint}',
        ...options
    });
};

/**
 * Cohere Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/cohere)
 */
export const cohereProxyRouteCohereEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<CohereProxyRouteCohereEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CohereProxyRouteCohereEndpointDelete3Responses, CohereProxyRouteCohereEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cohere/{endpoint}',
        ...options
    });
};

/**
 * Cohere Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/cohere)
 */
export const cohereProxyRouteCohereEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<CohereProxyRouteCohereEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CohereProxyRouteCohereEndpointDelete4Responses, CohereProxyRouteCohereEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cohere/{endpoint}',
        ...options
    });
};

/**
 * Cohere Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/cohere)
 */
export const cohereProxyRouteCohereEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<CohereProxyRouteCohereEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CohereProxyRouteCohereEndpointDelete5Responses, CohereProxyRouteCohereEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cohere/{endpoint}',
        ...options
    });
};

/**
 * Vllm Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/vllm)
 */
export const vllmProxyRouteVllmEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<VllmProxyRouteVllmEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VllmProxyRouteVllmEndpointDeleteResponses, VllmProxyRouteVllmEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vllm/{endpoint}',
        ...options
    });
};

/**
 * Vllm Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/vllm)
 */
export const vllmProxyRouteVllmEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<VllmProxyRouteVllmEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VllmProxyRouteVllmEndpointDelete2Responses, VllmProxyRouteVllmEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vllm/{endpoint}',
        ...options
    });
};

/**
 * Vllm Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/vllm)
 */
export const vllmProxyRouteVllmEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<VllmProxyRouteVllmEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VllmProxyRouteVllmEndpointDelete3Responses, VllmProxyRouteVllmEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vllm/{endpoint}',
        ...options
    });
};

/**
 * Vllm Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/vllm)
 */
export const vllmProxyRouteVllmEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<VllmProxyRouteVllmEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VllmProxyRouteVllmEndpointDelete4Responses, VllmProxyRouteVllmEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vllm/{endpoint}',
        ...options
    });
};

/**
 * Vllm Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/vllm)
 */
export const vllmProxyRouteVllmEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<VllmProxyRouteVllmEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<VllmProxyRouteVllmEndpointDelete5Responses, VllmProxyRouteVllmEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vllm/{endpoint}',
        ...options
    });
};

/**
 * Mistral Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const mistralProxyRouteMistralEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<MistralProxyRouteMistralEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MistralProxyRouteMistralEndpointDeleteResponses, MistralProxyRouteMistralEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mistral/{endpoint}',
        ...options
    });
};

/**
 * Mistral Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const mistralProxyRouteMistralEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<MistralProxyRouteMistralEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MistralProxyRouteMistralEndpointDelete2Responses, MistralProxyRouteMistralEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mistral/{endpoint}',
        ...options
    });
};

/**
 * Mistral Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const mistralProxyRouteMistralEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<MistralProxyRouteMistralEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MistralProxyRouteMistralEndpointDelete3Responses, MistralProxyRouteMistralEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mistral/{endpoint}',
        ...options
    });
};

/**
 * Mistral Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const mistralProxyRouteMistralEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<MistralProxyRouteMistralEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MistralProxyRouteMistralEndpointDelete4Responses, MistralProxyRouteMistralEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mistral/{endpoint}',
        ...options
    });
};

/**
 * Mistral Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const mistralProxyRouteMistralEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<MistralProxyRouteMistralEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MistralProxyRouteMistralEndpointDelete5Responses, MistralProxyRouteMistralEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mistral/{endpoint}',
        ...options
    });
};

/**
 * Anthropic Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const anthropicProxyRouteAnthropicEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<AnthropicProxyRouteAnthropicEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AnthropicProxyRouteAnthropicEndpointDeleteResponses, AnthropicProxyRouteAnthropicEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/anthropic/{endpoint}',
        ...options
    });
};

/**
 * Anthropic Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const anthropicProxyRouteAnthropicEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<AnthropicProxyRouteAnthropicEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnthropicProxyRouteAnthropicEndpointDelete2Responses, AnthropicProxyRouteAnthropicEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/anthropic/{endpoint}',
        ...options
    });
};

/**
 * Anthropic Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const anthropicProxyRouteAnthropicEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<AnthropicProxyRouteAnthropicEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AnthropicProxyRouteAnthropicEndpointDelete3Responses, AnthropicProxyRouteAnthropicEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/anthropic/{endpoint}',
        ...options
    });
};

/**
 * Anthropic Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const anthropicProxyRouteAnthropicEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<AnthropicProxyRouteAnthropicEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnthropicProxyRouteAnthropicEndpointDelete4Responses, AnthropicProxyRouteAnthropicEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/anthropic/{endpoint}',
        ...options
    });
};

/**
 * Anthropic Proxy Route
 * [Docs](https://docs.litellm.ai/docs/anthropic_completion)
 */
export const anthropicProxyRouteAnthropicEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<AnthropicProxyRouteAnthropicEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AnthropicProxyRouteAnthropicEndpointDelete5Responses, AnthropicProxyRouteAnthropicEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/anthropic/{endpoint}',
        ...options
    });
};

/**
 * Bedrock Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/bedrock)
 */
export const bedrockProxyRouteBedrockEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<BedrockProxyRouteBedrockEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BedrockProxyRouteBedrockEndpointDeleteResponses, BedrockProxyRouteBedrockEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/bedrock/{endpoint}',
        ...options
    });
};

/**
 * Bedrock Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/bedrock)
 */
export const bedrockProxyRouteBedrockEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<BedrockProxyRouteBedrockEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BedrockProxyRouteBedrockEndpointDelete2Responses, BedrockProxyRouteBedrockEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/bedrock/{endpoint}',
        ...options
    });
};

/**
 * Bedrock Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/bedrock)
 */
export const bedrockProxyRouteBedrockEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<BedrockProxyRouteBedrockEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BedrockProxyRouteBedrockEndpointDelete3Responses, BedrockProxyRouteBedrockEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/bedrock/{endpoint}',
        ...options
    });
};

/**
 * Bedrock Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/bedrock)
 */
export const bedrockProxyRouteBedrockEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<BedrockProxyRouteBedrockEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BedrockProxyRouteBedrockEndpointDelete4Responses, BedrockProxyRouteBedrockEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/bedrock/{endpoint}',
        ...options
    });
};

/**
 * Bedrock Proxy Route
 * [Docs](https://docs.litellm.ai/docs/pass_through/bedrock)
 */
export const bedrockProxyRouteBedrockEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<BedrockProxyRouteBedrockEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BedrockProxyRouteBedrockEndpointDelete5Responses, BedrockProxyRouteBedrockEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/bedrock/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteEuAssemblyaiEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteResponses, AssemblyaiProxyRouteEuAssemblyaiEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/eu.assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteEuAssemblyaiEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/eu.assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteEuAssemblyaiEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/eu.assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteEuAssemblyaiEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/eu.assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteEuAssemblyaiEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Responses, AssemblyaiProxyRouteEuAssemblyaiEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/eu.assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteAssemblyaiEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteAssemblyaiEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AssemblyaiProxyRouteAssemblyaiEndpointDeleteResponses, AssemblyaiProxyRouteAssemblyaiEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteAssemblyaiEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteAssemblyaiEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AssemblyaiProxyRouteAssemblyaiEndpointDelete2Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteAssemblyaiEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteAssemblyaiEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AssemblyaiProxyRouteAssemblyaiEndpointDelete3Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteAssemblyaiEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteAssemblyaiEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssemblyaiProxyRouteAssemblyaiEndpointDelete4Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Assemblyai Proxy Route
 */
export const assemblyaiProxyRouteAssemblyaiEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<AssemblyaiProxyRouteAssemblyaiEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AssemblyaiProxyRouteAssemblyaiEndpointDelete5Responses, AssemblyaiProxyRouteAssemblyaiEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/assemblyai/{endpoint}',
        ...options
    });
};

/**
 * Azure Proxy Route
 * Call any azure endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/azure/{endpoint:path}`
 */
export const azureProxyRouteAzureEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<AzureProxyRouteAzureEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureProxyRouteAzureEndpointDeleteResponses, AzureProxyRouteAzureEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/azure/{endpoint}',
        ...options
    });
};

/**
 * Azure Proxy Route
 * Call any azure endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/azure/{endpoint:path}`
 */
export const azureProxyRouteAzureEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<AzureProxyRouteAzureEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureProxyRouteAzureEndpointDelete2Responses, AzureProxyRouteAzureEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/azure/{endpoint}',
        ...options
    });
};

/**
 * Azure Proxy Route
 * Call any azure endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/azure/{endpoint:path}`
 */
export const azureProxyRouteAzureEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<AzureProxyRouteAzureEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureProxyRouteAzureEndpointDelete3Responses, AzureProxyRouteAzureEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/azure/{endpoint}',
        ...options
    });
};

/**
 * Azure Proxy Route
 * Call any azure endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/azure/{endpoint:path}`
 */
export const azureProxyRouteAzureEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<AzureProxyRouteAzureEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureProxyRouteAzureEndpointDelete4Responses, AzureProxyRouteAzureEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/azure/{endpoint}',
        ...options
    });
};

/**
 * Azure Proxy Route
 * Call any azure endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/azure/{endpoint:path}`
 */
export const azureProxyRouteAzureEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<AzureProxyRouteAzureEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureProxyRouteAzureEndpointDelete5Responses, AzureProxyRouteAzureEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/azure/{endpoint}',
        ...options
    });
};

/**
 * Vertex Discovery Proxy Route
 * Call any vertex discovery endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/vertex_ai/discovery/{endpoint:path}`
 *
 * Target url: `https://discoveryengine.googleapis.com`
 */
export const vertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteResponses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDeleteErrors, ThrowOnError>({
        url: '/vertex_ai/discovery/{endpoint}',
        ...options
    });
};

/**
 * Vertex Discovery Proxy Route
 * Call any vertex discovery endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/vertex_ai/discovery/{endpoint:path}`
 *
 * Target url: `https://discoveryengine.googleapis.com`
 */
export const vertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete2Errors, ThrowOnError>({
        url: '/vertex_ai/discovery/{endpoint}',
        ...options
    });
};

/**
 * Vertex Discovery Proxy Route
 * Call any vertex discovery endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/vertex_ai/discovery/{endpoint:path}`
 *
 * Target url: `https://discoveryengine.googleapis.com`
 */
export const vertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete3Errors, ThrowOnError>({
        url: '/vertex_ai/discovery/{endpoint}',
        ...options
    });
};

/**
 * Vertex Discovery Proxy Route
 * Call any vertex discovery endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/vertex_ai/discovery/{endpoint:path}`
 *
 * Target url: `https://discoveryengine.googleapis.com`
 */
export const vertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete4Errors, ThrowOnError>({
        url: '/vertex_ai/discovery/{endpoint}',
        ...options
    });
};

/**
 * Vertex Discovery Proxy Route
 * Call any vertex discovery endpoint using the proxy.
 *
 * Just use `{PROXY_BASE_URL}/vertex_ai/discovery/{endpoint:path}`
 *
 * Target url: `https://discoveryengine.googleapis.com`
 */
export const vertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Responses, VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointDelete5Errors, ThrowOnError>({
        url: '/vertex_ai/discovery/{endpoint}',
        ...options
    });
};

/**
 * Vertex Proxy Route
 * Call LiteLLM proxy via Vertex AI SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/vertex_ai)
 */
export const vertexProxyRouteVertexAiEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<VertexProxyRouteVertexAiEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VertexProxyRouteVertexAiEndpointDeleteResponses, VertexProxyRouteVertexAiEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vertex_ai/{endpoint}',
        ...options
    });
};

/**
 * Vertex Proxy Route
 * Call LiteLLM proxy via Vertex AI SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/vertex_ai)
 */
export const vertexProxyRouteVertexAiEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<VertexProxyRouteVertexAiEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VertexProxyRouteVertexAiEndpointDelete2Responses, VertexProxyRouteVertexAiEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vertex_ai/{endpoint}',
        ...options
    });
};

/**
 * Vertex Proxy Route
 * Call LiteLLM proxy via Vertex AI SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/vertex_ai)
 */
export const vertexProxyRouteVertexAiEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<VertexProxyRouteVertexAiEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VertexProxyRouteVertexAiEndpointDelete3Responses, VertexProxyRouteVertexAiEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vertex_ai/{endpoint}',
        ...options
    });
};

/**
 * Vertex Proxy Route
 * Call LiteLLM proxy via Vertex AI SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/vertex_ai)
 */
export const vertexProxyRouteVertexAiEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<VertexProxyRouteVertexAiEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VertexProxyRouteVertexAiEndpointDelete4Responses, VertexProxyRouteVertexAiEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vertex_ai/{endpoint}',
        ...options
    });
};

/**
 * Vertex Proxy Route
 * Call LiteLLM proxy via Vertex AI SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/vertex_ai)
 */
export const vertexProxyRouteVertexAiEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<VertexProxyRouteVertexAiEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<VertexProxyRouteVertexAiEndpointDelete5Responses, VertexProxyRouteVertexAiEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vertex_ai/{endpoint}',
        ...options
    });
};

/**
 * Openai Proxy Route
 * Simple pass-through for OpenAI. Use this if you want to directly send a request to OpenAI.
 */
export const openaiProxyRouteOpenaiEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<OpenaiProxyRouteOpenaiEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenaiProxyRouteOpenaiEndpointDeleteResponses, OpenaiProxyRouteOpenaiEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/{endpoint}',
        ...options
    });
};

/**
 * Openai Proxy Route
 * Simple pass-through for OpenAI. Use this if you want to directly send a request to OpenAI.
 */
export const openaiProxyRouteOpenaiEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<OpenaiProxyRouteOpenaiEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenaiProxyRouteOpenaiEndpointDelete2Responses, OpenaiProxyRouteOpenaiEndpointDelete2Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/{endpoint}',
        ...options
    });
};

/**
 * Openai Proxy Route
 * Simple pass-through for OpenAI. Use this if you want to directly send a request to OpenAI.
 */
export const openaiProxyRouteOpenaiEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<OpenaiProxyRouteOpenaiEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenaiProxyRouteOpenaiEndpointDelete3Responses, OpenaiProxyRouteOpenaiEndpointDelete3Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/{endpoint}',
        ...options
    });
};

/**
 * Openai Proxy Route
 * Simple pass-through for OpenAI. Use this if you want to directly send a request to OpenAI.
 */
export const openaiProxyRouteOpenaiEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<OpenaiProxyRouteOpenaiEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenaiProxyRouteOpenaiEndpointDelete4Responses, OpenaiProxyRouteOpenaiEndpointDelete4Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/{endpoint}',
        ...options
    });
};

/**
 * Openai Proxy Route
 * Simple pass-through for OpenAI. Use this if you want to directly send a request to OpenAI.
 */
export const openaiProxyRouteOpenaiEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<OpenaiProxyRouteOpenaiEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenaiProxyRouteOpenaiEndpointDelete5Responses, OpenaiProxyRouteOpenaiEndpointDelete5Errors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/openai/{endpoint}',
        ...options
    });
};

/**
 * Handle Sse
 */
export const handleSseMcpGet = <ThrowOnError extends boolean = false>(options?: Options<HandleSseMcpGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HandleSseMcpGetResponses, unknown, ThrowOnError>({
        url: '/mcp/',
        ...options
    });
};

/**
 * Handle Messages
 */
export const handleMessagesMcpSseMessagesPost = <ThrowOnError extends boolean = false>(options?: Options<HandleMessagesMcpSseMessagesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<HandleMessagesMcpSseMessagesPostResponses, unknown, ThrowOnError>({
        url: '/mcp/sse/messages',
        ...options
    });
};

/**
 * List Tool Rest Api
 * List all available tools with information about the server they belong to.
 *
 * Example response:
 * Tools:
 * [
 * {
 * "name": "create_zap",
 * "description": "Create a new zap",
 * "inputSchema": "tool_input_schema",
 * "mcp_info": {
 * "server_name": "zapier",
 * "logo_url": "https://www.zapier.com/logo.png",
 * }
 * },
 * {
 * "name": "fetch_data",
 * "description": "Fetch data from a URL",
 * "inputSchema": "tool_input_schema",
 * "mcp_info": {
 * "server_name": "fetch",
 * "logo_url": "https://www.fetch.com/logo.png",
 * }
 * }
 * ]
 */
export const listToolRestApiMcpToolsListGet = <ThrowOnError extends boolean = false>(options?: Options<ListToolRestApiMcpToolsListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListToolRestApiMcpToolsListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mcp/tools/list',
        ...options
    });
};

/**
 * Call Tool Rest Api
 * REST API to call a specific MCP tool with the provided arguments
 */
export const callToolRestApiMcpToolsCallPost = <ThrowOnError extends boolean = false>(options?: Options<CallToolRestApiMcpToolsCallPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CallToolRestApiMcpToolsCallPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/mcp/tools/call',
        ...options
    });
};

/**
 * Langfuse Proxy Route
 * Call Langfuse via LiteLLM proxy. Works with Langfuse SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/langfuse)
 */
export const langfuseProxyRouteLangfuseEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<LangfuseProxyRouteLangfuseEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LangfuseProxyRouteLangfuseEndpointDeleteResponses, LangfuseProxyRouteLangfuseEndpointDeleteErrors, ThrowOnError>({
        url: '/langfuse/{endpoint}',
        ...options
    });
};

/**
 * Langfuse Proxy Route
 * Call Langfuse via LiteLLM proxy. Works with Langfuse SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/langfuse)
 */
export const langfuseProxyRouteLangfuseEndpointDelete2 = <ThrowOnError extends boolean = false>(options: Options<LangfuseProxyRouteLangfuseEndpointDelete2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LangfuseProxyRouteLangfuseEndpointDelete2Responses, LangfuseProxyRouteLangfuseEndpointDelete2Errors, ThrowOnError>({
        url: '/langfuse/{endpoint}',
        ...options
    });
};

/**
 * Langfuse Proxy Route
 * Call Langfuse via LiteLLM proxy. Works with Langfuse SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/langfuse)
 */
export const langfuseProxyRouteLangfuseEndpointDelete3 = <ThrowOnError extends boolean = false>(options: Options<LangfuseProxyRouteLangfuseEndpointDelete3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LangfuseProxyRouteLangfuseEndpointDelete3Responses, LangfuseProxyRouteLangfuseEndpointDelete3Errors, ThrowOnError>({
        url: '/langfuse/{endpoint}',
        ...options
    });
};

/**
 * Langfuse Proxy Route
 * Call Langfuse via LiteLLM proxy. Works with Langfuse SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/langfuse)
 */
export const langfuseProxyRouteLangfuseEndpointDelete4 = <ThrowOnError extends boolean = false>(options: Options<LangfuseProxyRouteLangfuseEndpointDelete4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LangfuseProxyRouteLangfuseEndpointDelete4Responses, LangfuseProxyRouteLangfuseEndpointDelete4Errors, ThrowOnError>({
        url: '/langfuse/{endpoint}',
        ...options
    });
};

/**
 * Langfuse Proxy Route
 * Call Langfuse via LiteLLM proxy. Works with Langfuse SDK.
 *
 * [Docs](https://docs.litellm.ai/docs/pass_through/langfuse)
 */
export const langfuseProxyRouteLangfuseEndpointDelete5 = <ThrowOnError extends boolean = false>(options: Options<LangfuseProxyRouteLangfuseEndpointDelete5Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LangfuseProxyRouteLangfuseEndpointDelete5Responses, LangfuseProxyRouteLangfuseEndpointDelete5Errors, ThrowOnError>({
        url: '/langfuse/{endpoint}',
        ...options
    });
};

/**
 * Delete Pass Through Endpoints
 * Delete a pass-through endpoint
 *
 * Returns - the deleted endpoint
 */
export const deletePassThroughEndpointsConfigPassThroughEndpointDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePassThroughEndpointsConfigPassThroughEndpointDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponses, DeletePassThroughEndpointsConfigPassThroughEndpointDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/config/pass_through_endpoint',
        ...options
    });
};

/**
 * Get Pass Through Endpoints
 * GET configured pass through endpoint.
 *
 * If no endpoint_id given, return all configured endpoints.
 */
export const getPassThroughEndpointsConfigPassThroughEndpointGet = <ThrowOnError extends boolean = false>(options?: Options<GetPassThroughEndpointsConfigPassThroughEndpointGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPassThroughEndpointsConfigPassThroughEndpointGetResponses, GetPassThroughEndpointsConfigPassThroughEndpointGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/config/pass_through_endpoint',
        ...options
    });
};

/**
 * Create Pass Through Endpoints
 * Create new pass-through endpoint
 */
export const createPassThroughEndpointsConfigPassThroughEndpointPost = <ThrowOnError extends boolean = false>(options: Options<CreatePassThroughEndpointsConfigPassThroughEndpointPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePassThroughEndpointsConfigPassThroughEndpointPostResponses, CreatePassThroughEndpointsConfigPassThroughEndpointPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/config/pass_through_endpoint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Pass Through Endpoints
 * Update a pass-through endpoint
 */
export const updatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPost = <ThrowOnError extends boolean = false>(options: Options<UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostResponses, UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/config/pass_through_endpoint/{endpoint_id}',
        ...options
    });
};

/**
 * Test Endpoint
 * [DEPRECATED] use `/health/liveliness` instead.
 *
 * A test endpoint that pings the proxy server to check if it's healthy.
 *
 * Parameters:
 * request (Request): The incoming request.
 *
 * Returns:
 * dict: A dictionary containing the route of the request URL.
 */
export const testEndpointTestGet = <ThrowOnError extends boolean = false>(options?: Options<TestEndpointTestGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestEndpointTestGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/test',
        ...options
    });
};

/**
 * Health Services Endpoint
 * Use this admin-only endpoint to check if the service is healthy.
 *
 * Example:
 * ```
 * curl -L -X GET 'http://0.0.0.0:4000/health/services?service=datadog'     -H 'Authorization: Bearer sk-1234'
 * ```
 */
export const healthServicesEndpointHealthServicesGet = <ThrowOnError extends boolean = false>(options: Options<HealthServicesEndpointHealthServicesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HealthServicesEndpointHealthServicesGetResponses, HealthServicesEndpointHealthServicesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/services',
        ...options
    });
};

/**
 * Health Endpoint
 * 🚨 USE `/health/liveliness` to health check the proxy 🚨
 *
 * See more 👉 https://docs.litellm.ai/docs/proxy/health
 *
 *
 * Check the health of all the endpoints in config.yaml
 *
 * To run health checks in the background, add this to config.yaml:
 * ```
 * general_settings:
 * # ... other settings
 * background_health_checks: True
 * ```
 * else, the health checks will be run on models when /health is called.
 */
export const healthEndpointHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthEndpointHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthEndpointHealthGetResponses, HealthEndpointHealthGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health',
        ...options
    });
};

/**
 * Active Callbacks
 * Returns a list of litellm level settings
 *
 * This is useful for debugging and ensuring the proxy server is configured correctly.
 *
 * Response schema:
 * ```
 * {
 * "alerting": _alerting,
 * "litellm.callbacks": litellm_callbacks,
 * "litellm.input_callback": litellm_input_callbacks,
 * "litellm.failure_callback": litellm_failure_callbacks,
 * "litellm.success_callback": litellm_success_callbacks,
 * "litellm._async_success_callback": litellm_async_success_callbacks,
 * "litellm._async_failure_callback": litellm_async_failure_callbacks,
 * "litellm._async_input_callback": litellm_async_input_callbacks,
 * "all_litellm_callbacks": all_litellm_callbacks,
 * "num_callbacks": len(all_litellm_callbacks),
 * "num_alerting": _num_alerting,
 * "litellm.request_timeout": litellm.request_timeout,
 * }
 * ```
 */
export const activeCallbacksActiveCallbacksGet = <ThrowOnError extends boolean = false>(options?: Options<ActiveCallbacksActiveCallbacksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActiveCallbacksActiveCallbacksGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/active/callbacks',
        ...options
    });
};

/**
 * Active Callbacks
 * Returns a list of litellm level settings
 *
 * This is useful for debugging and ensuring the proxy server is configured correctly.
 *
 * Response schema:
 * ```
 * {
 * "alerting": _alerting,
 * "litellm.callbacks": litellm_callbacks,
 * "litellm.input_callback": litellm_input_callbacks,
 * "litellm.failure_callback": litellm_failure_callbacks,
 * "litellm.success_callback": litellm_success_callbacks,
 * "litellm._async_success_callback": litellm_async_success_callbacks,
 * "litellm._async_failure_callback": litellm_async_failure_callbacks,
 * "litellm._async_input_callback": litellm_async_input_callbacks,
 * "all_litellm_callbacks": all_litellm_callbacks,
 * "num_callbacks": len(all_litellm_callbacks),
 * "num_alerting": _num_alerting,
 * "litellm.request_timeout": litellm.request_timeout,
 * }
 * ```
 */
export const activeCallbacksSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<ActiveCallbacksSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ActiveCallbacksSettingsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/settings',
        ...options
    });
};

/**
 * Health Readiness
 * Unprotected endpoint for checking if worker can receive requests
 */
export const healthReadinessHealthReadinessGet = <ThrowOnError extends boolean = false>(options?: Options<HealthReadinessHealthReadinessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthReadinessHealthReadinessGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/readiness',
        ...options
    });
};

/**
 * Health Readiness Options
 * Options endpoint for health/readiness check.
 */
export const healthReadinessOptionsHealthReadinessOptions = <ThrowOnError extends boolean = false>(options?: Options<HealthReadinessOptionsHealthReadinessOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).options<HealthReadinessOptionsHealthReadinessOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/readiness',
        ...options
    });
};

/**
 * Health Liveliness
 * Unprotected endpoint for checking if worker is alive
 */
export const healthLivelinessHealthLivenessGet = <ThrowOnError extends boolean = false>(options?: Options<HealthLivelinessHealthLivenessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthLivelinessHealthLivenessGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/liveness',
        ...options
    });
};

/**
 * Health Liveliness Options
 * Options endpoint for health/liveliness check.
 */
export const healthLivelinessOptionsHealthLivenessOptions = <ThrowOnError extends boolean = false>(options?: Options<HealthLivelinessOptionsHealthLivenessOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).options<HealthLivelinessOptionsHealthLivenessOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/liveness',
        ...options
    });
};

/**
 * Health Liveliness
 * Unprotected endpoint for checking if worker is alive
 */
export const healthLivelinessHealthLivelinessGet = <ThrowOnError extends boolean = false>(options?: Options<HealthLivelinessHealthLivelinessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthLivelinessHealthLivelinessGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/liveliness',
        ...options
    });
};

/**
 * Health Liveliness Options
 * Options endpoint for health/liveliness check.
 */
export const healthLivelinessOptionsHealthLivelinessOptions = <ThrowOnError extends boolean = false>(options?: Options<HealthLivelinessOptionsHealthLivelinessOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).options<HealthLivelinessOptionsHealthLivelinessOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/liveliness',
        ...options
    });
};

/**
 * Test Model Connection
 * Test a direct connection to a specific model.
 *
 * This endpoint allows you to verify if your proxy can successfully connect to a specific model.
 * It's useful for troubleshooting model connectivity issues without going through the full proxy routing.
 *
 * Example:
 * ```bash
 * curl -X POST 'http://localhost:4000/health/test_connection' \
 * -H 'Authorization: Bearer sk-1234' \
 * -H 'Content-Type: application/json' \
 * -d '{
 * "litellm_params": {
 * "model": "gpt-4",
 * "custom_llm_provider": "azure_ai",
 * "litellm_credential_name": null,
 * "api_key": "6xxxxxxx",
 * "api_base": "https://litellm8397336933.openai.azure.com/openai/deployments/gpt-4o/chat/completions?api-version=2024-10-21",
 * },
 * "mode": "chat"
 * }'
 * ```
 *
 * Returns:
 * dict: A dictionary containing the health check result with either success information or error details.
 */
export const testModelConnectionHealthTestConnectionPost = <ThrowOnError extends boolean = false>(options?: Options<TestModelConnectionHealthTestConnectionPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TestModelConnectionHealthTestConnectionPostResponses, TestModelConnectionHealthTestConnectionPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/health/test_connection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate Key Fn
 * Generate an API key based on the provided data.
 *
 * Docs: https://docs.litellm.ai/docs/proxy/virtual_keys
 *
 * Parameters:
 * - duration: Optional[str] - Specify the length of time the token is valid for. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d").
 * - key_alias: Optional[str] - User defined key alias
 * - key: Optional[str] - User defined key value. If not set, a 16-digit unique sk-key is created for you.
 * - team_id: Optional[str] - The team id of the key
 * - user_id: Optional[str] - The user id of the key
 * - budget_id: Optional[str] - The budget id associated with the key. Created by calling `/budget/new`.
 * - models: Optional[list] - Model_name's a user is allowed to call. (if empty, key is allowed to call all models)
 * - aliases: Optional[dict] - Any alias mappings, on top of anything in the config.yaml model list. - https://docs.litellm.ai/docs/proxy/virtual_keys#managing-auth---upgradedowngrade-models
 * - config: Optional[dict] - any key-specific configs, overrides config in config.yaml
 * - spend: Optional[int] - Amount spent by key. Default is 0. Will be updated by proxy whenever key is used. https://docs.litellm.ai/docs/proxy/virtual_keys#managing-auth---tracking-spend
 * - send_invite_email: Optional[bool] - Whether to send an invite email to the user_id, with the generate key
 * - max_budget: Optional[float] - Specify max budget for a given key.
 * - budget_duration: Optional[str] - Budget is reset at the end of specified duration. If not set, budget is never reset. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d").
 * - max_parallel_requests: Optional[int] - Rate limit a user based on the number of parallel requests. Raises 429 error, if user's parallel requests > x.
 * - metadata: Optional[dict] - Metadata for key, store information for key. Example metadata = {"team": "core-infra", "app": "app2", "email": "ishaan@berri.ai" }
 * - guardrails: Optional[List[str]] - List of active guardrails for the key
 * - permissions: Optional[dict] - key-specific permissions. Currently just used for turning off pii masking (if connected). Example - {"pii": false}
 * - model_max_budget: Optional[Dict[str, BudgetConfig]] - Model-specific budgets {"gpt-4": {"budget_limit": 0.0005, "time_period": "30d"}}}. IF null or {} then no model specific budget.
 * - model_rpm_limit: Optional[dict] - key-specific model rpm limit. Example - {"text-davinci-002": 1000, "gpt-3.5-turbo": 1000}. IF null or {} then no model specific rpm limit.
 * - model_tpm_limit: Optional[dict] - key-specific model tpm limit. Example - {"text-davinci-002": 1000, "gpt-3.5-turbo": 1000}. IF null or {} then no model specific tpm limit.
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values. Example - ["no-cache", "no-store"]. See all values - https://docs.litellm.ai/docs/proxy/caching#turn-on--off-caching-per-request
 * - blocked: Optional[bool] - Whether the key is blocked.
 * - rpm_limit: Optional[int] - Specify rpm limit for a given key (Requests per minute)
 * - tpm_limit: Optional[int] - Specify tpm limit for a given key (Tokens per minute)
 * - soft_budget: Optional[float] - Specify soft budget for a given key. Will trigger a slack alert when this soft budget is reached.
 * - tags: Optional[List[str]] - Tags for [tracking spend](https://litellm.vercel.app/docs/proxy/enterprise#tracking-spend-for-custom-tags) and/or doing [tag-based routing](https://litellm.vercel.app/docs/proxy/tag_routing).
 * - enforced_params: Optional[List[str]] - List of enforced params for the key (Enterprise only). [Docs](https://docs.litellm.ai/docs/proxy/enterprise#enforce-required-params-for-llm-requests)
 * - allowed_routes: Optional[list] - List of allowed routes for the key. Store the actual route or store a wildcard pattern for a set of routes. Example - ["/chat/completions", "/embeddings", "/keys*"]
 * Examples:
 *
 * 1. Allow users to turn on/off pii masking
 *
 * ```bash
 * curl --location 'http://0.0.0.0:4000/key/generate'         --header 'Authorization: Bearer sk-1234'         --header 'Content-Type: application/json'         --data '{
 * "permissions": {"allow_pii_controls": true}
 * }'
 * ```
 *
 * Returns:
 * - key: (str) The generated api key
 * - expires: (datetime) Datetime object for when key expires.
 * - user_id: (str) Unique user id - used for tracking spend across multiple keys for same user id.
 */
export const generateKeyFnKeyGeneratePost = <ThrowOnError extends boolean = false>(options: Options<GenerateKeyFnKeyGeneratePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateKeyFnKeyGeneratePostResponses, GenerateKeyFnKeyGeneratePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Key Fn
 * Update an existing API key's parameters.
 *
 * Parameters:
 * - key: str - The key to update
 * - key_alias: Optional[str] - User-friendly key alias
 * - user_id: Optional[str] - User ID associated with key
 * - team_id: Optional[str] - Team ID associated with key
 * - budget_id: Optional[str] - The budget id associated with the key. Created by calling `/budget/new`.
 * - models: Optional[list] - Model_name's a user is allowed to call
 * - tags: Optional[List[str]] - Tags for organizing keys (Enterprise only)
 * - enforced_params: Optional[List[str]] - List of enforced params for the key (Enterprise only). [Docs](https://docs.litellm.ai/docs/proxy/enterprise#enforce-required-params-for-llm-requests)
 * - spend: Optional[float] - Amount spent by key
 * - max_budget: Optional[float] - Max budget for key
 * - model_max_budget: Optional[Dict[str, BudgetConfig]] - Model-specific budgets {"gpt-4": {"budget_limit": 0.0005, "time_period": "30d"}}
 * - budget_duration: Optional[str] - Budget reset period ("30d", "1h", etc.)
 * - soft_budget: Optional[float] - [TODO] Soft budget limit (warning vs. hard stop). Will trigger a slack alert when this soft budget is reached.
 * - max_parallel_requests: Optional[int] - Rate limit for parallel requests
 * - metadata: Optional[dict] - Metadata for key. Example {"team": "core-infra", "app": "app2"}
 * - tpm_limit: Optional[int] - Tokens per minute limit
 * - rpm_limit: Optional[int] - Requests per minute limit
 * - model_rpm_limit: Optional[dict] - Model-specific RPM limits {"gpt-4": 100, "claude-v1": 200}
 * - model_tpm_limit: Optional[dict] - Model-specific TPM limits {"gpt-4": 100000, "claude-v1": 200000}
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values
 * - duration: Optional[str] - Key validity duration ("30d", "1h", etc.)
 * - permissions: Optional[dict] - Key-specific permissions
 * - send_invite_email: Optional[bool] - Send invite email to user_id
 * - guardrails: Optional[List[str]] - List of active guardrails for the key
 * - blocked: Optional[bool] - Whether the key is blocked
 * - aliases: Optional[dict] - Model aliases for the key - [Docs](https://litellm.vercel.app/docs/proxy/virtual_keys#model-aliases)
 * - config: Optional[dict] - [DEPRECATED PARAM] Key-specific config.
 * - temp_budget_increase: Optional[float] - Temporary budget increase for the key (Enterprise only).
 * - temp_budget_expiry: Optional[str] - Expiry time for the temporary budget increase (Enterprise only).
 * - allowed_routes: Optional[list] - List of allowed routes for the key. Store the actual route or store a wildcard pattern for a set of routes. Example - ["/chat/completions", "/embeddings", "/keys*"]
 *
 * Example:
 * ```bash
 * curl --location 'http://0.0.0.0:4000/key/update'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "key": "sk-1234",
 * "key_alias": "my-key",
 * "user_id": "user-1234",
 * "team_id": "team-1234",
 * "max_budget": 100,
 * "metadata": {"any_key": "any-val"},
 * }'
 * ```
 */
export const updateKeyFnKeyUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateKeyFnKeyUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateKeyFnKeyUpdatePostResponses, UpdateKeyFnKeyUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Key Fn
 * Delete a key from the key management system.
 *
 * Parameters::
 * - keys (List[str]): A list of keys or hashed keys to delete. Example {"keys": ["sk-QWrxEynunsNpV1zT48HIrw", "837e17519f44683334df5291321d97b8bf1098cd490e49e215f6fea935aa28be"]}
 * - key_aliases (List[str]): A list of key aliases to delete. Can be passed instead of `keys`.Example {"key_aliases": ["alias1", "alias2"]}
 *
 * Returns:
 * - deleted_keys (List[str]): A list of deleted keys. Example {"deleted_keys": ["sk-QWrxEynunsNpV1zT48HIrw", "837e17519f44683334df5291321d97b8bf1098cd490e49e215f6fea935aa28be"]}
 *
 * Example:
 * ```bash
 * curl --location 'http://0.0.0.0:4000/key/delete'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "keys": ["sk-QWrxEynunsNpV1zT48HIrw"]
 * }'
 * ```
 *
 * Raises:
 * HTTPException: If an error occurs during key deletion.
 */
export const deleteKeyFnKeyDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteKeyFnKeyDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteKeyFnKeyDeletePostResponses, DeleteKeyFnKeyDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Info Key Fn
 * Retrieve information about a key.
 * Parameters:
 * key: Optional[str] = Query parameter representing the key in the request
 * user_api_key_dict: UserAPIKeyAuth = Dependency representing the user's API key
 * Returns:
 * Dict containing the key and its associated information
 *
 * Example Curl:
 * ```
 * curl -X GET "http://0.0.0.0:4000/key/info?key=sk-02Wr4IAlN3NvPXvL5JVvDA" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Example Curl - if no key is passed, it will use the Key Passed in Authorization Header
 * ```
 * curl -X GET "http://0.0.0.0:4000/key/info" -H "Authorization: Bearer sk-02Wr4IAlN3NvPXvL5JVvDA"
 * ```
 */
export const infoKeyFnKeyInfoGet = <ThrowOnError extends boolean = false>(options?: Options<InfoKeyFnKeyInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InfoKeyFnKeyInfoGetResponses, InfoKeyFnKeyInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/info',
        ...options
    });
};

/**
 * Regenerate Key Fn
 * Regenerate an existing API key while optionally updating its parameters.
 *
 * Parameters:
 * - key: str (path parameter) - The key to regenerate
 * - data: Optional[RegenerateKeyRequest] - Request body containing optional parameters to update
 * - key_alias: Optional[str] - User-friendly key alias
 * - user_id: Optional[str] - User ID associated with key
 * - team_id: Optional[str] - Team ID associated with key
 * - models: Optional[list] - Model_name's a user is allowed to call
 * - tags: Optional[List[str]] - Tags for organizing keys (Enterprise only)
 * - spend: Optional[float] - Amount spent by key
 * - max_budget: Optional[float] - Max budget for key
 * - model_max_budget: Optional[Dict[str, BudgetConfig]] - Model-specific budgets {"gpt-4": {"budget_limit": 0.0005, "time_period": "30d"}}
 * - budget_duration: Optional[str] - Budget reset period ("30d", "1h", etc.)
 * - soft_budget: Optional[float] - Soft budget limit (warning vs. hard stop). Will trigger a slack alert when this soft budget is reached.
 * - max_parallel_requests: Optional[int] - Rate limit for parallel requests
 * - metadata: Optional[dict] - Metadata for key. Example {"team": "core-infra", "app": "app2"}
 * - tpm_limit: Optional[int] - Tokens per minute limit
 * - rpm_limit: Optional[int] - Requests per minute limit
 * - model_rpm_limit: Optional[dict] - Model-specific RPM limits {"gpt-4": 100, "claude-v1": 200}
 * - model_tpm_limit: Optional[dict] - Model-specific TPM limits {"gpt-4": 100000, "claude-v1": 200000}
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values
 * - duration: Optional[str] - Key validity duration ("30d", "1h", etc.)
 * - permissions: Optional[dict] - Key-specific permissions
 * - guardrails: Optional[List[str]] - List of active guardrails for the key
 * - blocked: Optional[bool] - Whether the key is blocked
 *
 *
 * Returns:
 * - GenerateKeyResponse containing the new key and its updated parameters
 *
 * Example:
 * ```bash
 * curl --location --request POST 'http://localhost:4000/key/sk-1234/regenerate'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data-raw '{
 * "max_budget": 100,
 * "metadata": {"team": "core-infra"},
 * "models": ["gpt-4", "gpt-3.5-turbo"]
 * }'
 * ```
 *
 * Note: This is an Enterprise feature. It requires a premium license to use.
 */
export const regenerateKeyFnKeyRegeneratePost = <ThrowOnError extends boolean = false>(options?: Options<RegenerateKeyFnKeyRegeneratePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegenerateKeyFnKeyRegeneratePostResponses, RegenerateKeyFnKeyRegeneratePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/regenerate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Regenerate Key Fn
 * Regenerate an existing API key while optionally updating its parameters.
 *
 * Parameters:
 * - key: str (path parameter) - The key to regenerate
 * - data: Optional[RegenerateKeyRequest] - Request body containing optional parameters to update
 * - key_alias: Optional[str] - User-friendly key alias
 * - user_id: Optional[str] - User ID associated with key
 * - team_id: Optional[str] - Team ID associated with key
 * - models: Optional[list] - Model_name's a user is allowed to call
 * - tags: Optional[List[str]] - Tags for organizing keys (Enterprise only)
 * - spend: Optional[float] - Amount spent by key
 * - max_budget: Optional[float] - Max budget for key
 * - model_max_budget: Optional[Dict[str, BudgetConfig]] - Model-specific budgets {"gpt-4": {"budget_limit": 0.0005, "time_period": "30d"}}
 * - budget_duration: Optional[str] - Budget reset period ("30d", "1h", etc.)
 * - soft_budget: Optional[float] - Soft budget limit (warning vs. hard stop). Will trigger a slack alert when this soft budget is reached.
 * - max_parallel_requests: Optional[int] - Rate limit for parallel requests
 * - metadata: Optional[dict] - Metadata for key. Example {"team": "core-infra", "app": "app2"}
 * - tpm_limit: Optional[int] - Tokens per minute limit
 * - rpm_limit: Optional[int] - Requests per minute limit
 * - model_rpm_limit: Optional[dict] - Model-specific RPM limits {"gpt-4": 100, "claude-v1": 200}
 * - model_tpm_limit: Optional[dict] - Model-specific TPM limits {"gpt-4": 100000, "claude-v1": 200000}
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values
 * - duration: Optional[str] - Key validity duration ("30d", "1h", etc.)
 * - permissions: Optional[dict] - Key-specific permissions
 * - guardrails: Optional[List[str]] - List of active guardrails for the key
 * - blocked: Optional[bool] - Whether the key is blocked
 *
 *
 * Returns:
 * - GenerateKeyResponse containing the new key and its updated parameters
 *
 * Example:
 * ```bash
 * curl --location --request POST 'http://localhost:4000/key/sk-1234/regenerate'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data-raw '{
 * "max_budget": 100,
 * "metadata": {"team": "core-infra"},
 * "models": ["gpt-4", "gpt-3.5-turbo"]
 * }'
 * ```
 *
 * Note: This is an Enterprise feature. It requires a premium license to use.
 */
export const regenerateKeyFnKeyKeyRegeneratePost = <ThrowOnError extends boolean = false>(options: Options<RegenerateKeyFnKeyKeyRegeneratePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegenerateKeyFnKeyKeyRegeneratePostResponses, RegenerateKeyFnKeyKeyRegeneratePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/{key}/regenerate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Keys
 * List all keys for a given user / team / organization.
 *
 * Returns:
 * {
 * "keys": List[str] or List[UserAPIKeyAuth],
 * "total_count": int,
 * "current_page": int,
 * "total_pages": int,
 * }
 */
export const listKeysKeyListGet = <ThrowOnError extends boolean = false>(options?: Options<ListKeysKeyListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListKeysKeyListGetResponses, ListKeysKeyListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/list',
        ...options
    });
};

/**
 * Block Key
 * Block an Virtual key from making any requests.
 *
 * Parameters:
 * - key: str - The key to block. Can be either the unhashed key (sk-...) or the hashed key value
 *
 * Example:
 * ```bash
 * curl --location 'http://0.0.0.0:4000/key/block'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "key": "sk-Fn8Ej39NxjAXrvpUGKghGw"
 * }'
 * ```
 *
 * Note: This is an admin-only endpoint. Only proxy admins can block keys.
 */
export const blockKeyKeyBlockPost = <ThrowOnError extends boolean = false>(options: Options<BlockKeyKeyBlockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlockKeyKeyBlockPostResponses, BlockKeyKeyBlockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/block',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unblock Key
 * Unblock a Virtual key to allow it to make requests again.
 *
 * Parameters:
 * - key: str - The key to unblock. Can be either the unhashed key (sk-...) or the hashed key value
 *
 * Example:
 * ```bash
 * curl --location 'http://0.0.0.0:4000/key/unblock'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "key": "sk-Fn8Ej39NxjAXrvpUGKghGw"
 * }'
 * ```
 *
 * Note: This is an admin-only endpoint. Only proxy admins can unblock keys.
 */
export const unblockKeyKeyUnblockPost = <ThrowOnError extends boolean = false>(options: Options<UnblockKeyKeyUnblockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnblockKeyKeyUnblockPostResponses, UnblockKeyKeyUnblockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/unblock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Key Health
 * Check the health of the key
 *
 * Checks:
 * - If key based logging is configured correctly - sends a test log
 *
 * Usage
 *
 * Pass the key in the request header
 *
 * ```bash
 * curl -X POST "http://localhost:4000/key/health"      -H "Authorization: Bearer sk-1234"      -H "Content-Type: application/json"
 * ```
 *
 * Response when logging callbacks are setup correctly:
 *
 * ```json
 * {
 * "key": "healthy",
 * "logging_callbacks": {
 * "callbacks": [
 * "gcs_bucket"
 * ],
 * "status": "healthy",
 * "details": "No logger exceptions triggered, system is healthy. Manually check if logs were sent to ['gcs_bucket']"
 * }
 * }
 * ```
 *
 *
 * Response when logging callbacks are not setup correctly:
 * ```json
 * {
 * "key": "unhealthy",
 * "logging_callbacks": {
 * "callbacks": [
 * "gcs_bucket"
 * ],
 * "status": "unhealthy",
 * "details": "Logger exceptions triggered, system is unhealthy: Failed to load vertex credentials. Check to see if credentials containing partial/invalid information."
 * }
 * }
 * ```
 */
export const keyHealthKeyHealthPost = <ThrowOnError extends boolean = false>(options?: Options<KeyHealthKeyHealthPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<KeyHealthKeyHealthPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/key/health',
        ...options
    });
};

/**
 * New User
 * Use this to create a new INTERNAL user with a budget.
 * Internal Users can access LiteLLM Admin UI to make keys, request access to models.
 * This creates a new user and generates a new api key for the new user. The new api key is returned.
 *
 * Returns user id, budget + new key.
 *
 * Parameters:
 * - user_id: Optional[str] - Specify a user id. If not set, a unique id will be generated.
 * - user_alias: Optional[str] - A descriptive name for you to know who this user id refers to.
 * - teams: Optional[list] - specify a list of team id's a user belongs to.
 * - user_email: Optional[str] - Specify a user email.
 * - send_invite_email: Optional[bool] - Specify if an invite email should be sent.
 * - user_role: Optional[str] - Specify a user role - "proxy_admin", "proxy_admin_viewer", "internal_user", "internal_user_viewer", "team", "customer". Info about each role here: `https://github.com/BerriAI/litellm/litellm/proxy/_types.py#L20`
 * - max_budget: Optional[float] - Specify max budget for a given user.
 * - budget_duration: Optional[str] - Budget is reset at the end of specified duration. If not set, budget is never reset. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d"), months ("1mo").
 * - models: Optional[list] - Model_name's a user is allowed to call. (if empty, key is allowed to call all models). Set to ['no-default-models'] to block all model access. Restricting user to only team-based model access.
 * - tpm_limit: Optional[int] - Specify tpm limit for a given user (Tokens per minute)
 * - rpm_limit: Optional[int] - Specify rpm limit for a given user (Requests per minute)
 * - auto_create_key: bool - Default=True. Flag used for returning a key as part of the /user/new response
 * - aliases: Optional[dict] - Model aliases for the user - [Docs](https://litellm.vercel.app/docs/proxy/virtual_keys#model-aliases)
 * - config: Optional[dict] - [DEPRECATED PARAM] User-specific config.
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values. Example - ["no-cache", "no-store"]. See all values - https://docs.litellm.ai/docs/proxy/caching#turn-on--off-caching-per-request-
 * - blocked: Optional[bool] - [Not Implemented Yet] Whether the user is blocked.
 * - guardrails: Optional[List[str]] - [Not Implemented Yet] List of active guardrails for the user
 * - permissions: Optional[dict] - [Not Implemented Yet] User-specific permissions, eg. turning off pii masking.
 * - metadata: Optional[dict] - Metadata for user, store information for user. Example metadata = {"team": "core-infra", "app": "app2", "email": "ishaan@berri.ai" }
 * - max_parallel_requests: Optional[int] - Rate limit a user based on the number of parallel requests. Raises 429 error, if user's parallel requests > x.
 * - soft_budget: Optional[float] - Get alerts when user crosses given budget, doesn't block requests.
 * - model_max_budget: Optional[dict] - Model-specific max budget for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-budgets-to-keys)
 * - model_rpm_limit: Optional[float] - Model-specific rpm limit for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-limits-to-keys)
 * - model_tpm_limit: Optional[float] - Model-specific tpm limit for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-limits-to-keys)
 * - spend: Optional[float] - Amount spent by user. Default is 0. Will be updated by proxy whenever user is used. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d"), months ("1mo").
 * - team_id: Optional[str] - [DEPRECATED PARAM] The team id of the user. Default is None.
 * - duration: Optional[str] - Duration for the key auto-created on `/user/new`. Default is None.
 * - key_alias: Optional[str] - Alias for the key auto-created on `/user/new`. Default is None.
 * - sso_user_id: Optional[str] - The id of the user in the SSO provider.
 *
 * Returns:
 * - key: (str) The generated api key for the user
 * - expires: (datetime) Datetime object for when key expires.
 * - user_id: (str) Unique user id - used for tracking spend across multiple keys for same user id.
 * - max_budget: (float|None) Max budget for given user.
 *
 * Usage Example
 *
 * ```shell
 * curl -X POST "http://localhost:4000/user/new"      -H "Content-Type: application/json"      -H "Authorization: Bearer sk-1234"      -d '{
 * "username": "new_user",
 * "email": "new_user@example.com"
 * }'
 * ```
 */
export const newUserUserNewPost = <ThrowOnError extends boolean = false>(options: Options<NewUserUserNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewUserUserNewPostResponses, NewUserUserNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User Info
 * [10/07/2024]
 * Note: To get all users (+pagination), use `/user/list` endpoint.
 *
 *
 * Use this to get user information. (user row + all user key info)
 *
 * Example request
 * ```
 * curl -X GET 'http://localhost:4000/user/info?user_id=krrish7%40berri.ai'     --header 'Authorization: Bearer sk-1234'
 * ```
 */
export const userInfoUserInfoGet = <ThrowOnError extends boolean = false>(options?: Options<UserInfoUserInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserInfoUserInfoGetResponses, UserInfoUserInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/info',
        ...options
    });
};

/**
 * User Update
 * Example curl
 *
 * ```
 * curl --location 'http://0.0.0.0:4000/user/update'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "user_id": "test-litellm-user-4",
 * "user_role": "proxy_admin_viewer"
 * }'
 * ```
 *
 * Parameters:
 * - user_id: Optional[str] - Specify a user id. If not set, a unique id will be generated.
 * - user_email: Optional[str] - Specify a user email.
 * - password: Optional[str] - Specify a user password.
 * - user_alias: Optional[str] - A descriptive name for you to know who this user id refers to.
 * - teams: Optional[list] - specify a list of team id's a user belongs to.
 * - send_invite_email: Optional[bool] - Specify if an invite email should be sent.
 * - user_role: Optional[str] - Specify a user role - "proxy_admin", "proxy_admin_viewer", "internal_user", "internal_user_viewer", "team", "customer". Info about each role here: `https://github.com/BerriAI/litellm/litellm/proxy/_types.py#L20`
 * - max_budget: Optional[float] - Specify max budget for a given user.
 * - budget_duration: Optional[str] - Budget is reset at the end of specified duration. If not set, budget is never reset. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d"), months ("1mo").
 * - models: Optional[list] - Model_name's a user is allowed to call. (if empty, key is allowed to call all models)
 * - tpm_limit: Optional[int] - Specify tpm limit for a given user (Tokens per minute)
 * - rpm_limit: Optional[int] - Specify rpm limit for a given user (Requests per minute)
 * - auto_create_key: bool - Default=True. Flag used for returning a key as part of the /user/new response
 * - aliases: Optional[dict] - Model aliases for the user - [Docs](https://litellm.vercel.app/docs/proxy/virtual_keys#model-aliases)
 * - config: Optional[dict] - [DEPRECATED PARAM] User-specific config.
 * - allowed_cache_controls: Optional[list] - List of allowed cache control values. Example - ["no-cache", "no-store"]. See all values - https://docs.litellm.ai/docs/proxy/caching#turn-on--off-caching-per-request-
 * - blocked: Optional[bool] - [Not Implemented Yet] Whether the user is blocked.
 * - guardrails: Optional[List[str]] - [Not Implemented Yet] List of active guardrails for the user
 * - permissions: Optional[dict] - [Not Implemented Yet] User-specific permissions, eg. turning off pii masking.
 * - metadata: Optional[dict] - Metadata for user, store information for user. Example metadata = {"team": "core-infra", "app": "app2", "email": "ishaan@berri.ai" }
 * - max_parallel_requests: Optional[int] - Rate limit a user based on the number of parallel requests. Raises 429 error, if user's parallel requests > x.
 * - soft_budget: Optional[float] - Get alerts when user crosses given budget, doesn't block requests.
 * - model_max_budget: Optional[dict] - Model-specific max budget for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-budgets-to-keys)
 * - model_rpm_limit: Optional[float] - Model-specific rpm limit for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-limits-to-keys)
 * - model_tpm_limit: Optional[float] - Model-specific tpm limit for user. [Docs](https://docs.litellm.ai/docs/proxy/users#add-model-specific-limits-to-keys)
 * - spend: Optional[float] - Amount spent by user. Default is 0. Will be updated by proxy whenever user is used. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d"), months ("1mo").
 * - team_id: Optional[str] - [DEPRECATED PARAM] The team id of the user. Default is None.
 * - duration: Optional[str] - [NOT IMPLEMENTED].
 * - key_alias: Optional[str] - [NOT IMPLEMENTED].
 */
export const userUpdateUserUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UserUpdateUserUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserUpdateUserUpdatePostResponses, UserUpdateUserUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Users
 * Get a paginated list of users with filtering and sorting options.
 *
 * Parameters:
 * role: Optional[str]
 * Filter users by role. Can be one of:
 * - proxy_admin
 * - proxy_admin_viewer
 * - internal_user
 * - internal_user_viewer
 * user_ids: Optional[str]
 * Get list of users by user_ids. Comma separated list of user_ids.
 * sso_ids: Optional[str]
 * Get list of users by sso_ids. Comma separated list of sso_ids.
 * user_email: Optional[str]
 * Filter users by partial email match
 * team: Optional[str]
 * Filter users by team id. Will match if user has this team in their teams array.
 * page: int
 * The page number to return
 * page_size: int
 * The number of items per page
 * sort_by: Optional[str]
 * Column to sort by (e.g. 'user_id', 'user_email', 'created_at', 'spend')
 * sort_order: Optional[str]
 * Sort order ('asc' or 'desc')
 */
export const getUsersUserListGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersUserListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersUserListGetResponses, GetUsersUserListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/list',
        ...options
    });
};

/**
 * Delete User
 * delete user and associated user keys
 *
 * ```
 * curl --location 'http://0.0.0.0:4000/user/delete'
 * --header 'Authorization: Bearer sk-1234'
 * --header 'Content-Type: application/json'
 * --data-raw '{
 * "user_ids": ["45e3e396-ee08-4a61-a88e-16b3ce7e0849"]
 * }'
 * ```
 *
 * Parameters:
 * - user_ids: List[str] - The list of user id's to be deleted.
 */
export const deleteUserUserDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUserDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteUserUserDeletePostResponses, DeleteUserUserDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Daily Activity
 * [BETA] This is a beta endpoint. It will change.
 *
 * Meant to optimize querying spend data for analytics for a user.
 *
 * Returns:
 * (by date)
 * - spend
 * - prompt_tokens
 * - completion_tokens
 * - cache_read_input_tokens
 * - cache_creation_input_tokens
 * - total_tokens
 * - api_requests
 * - breakdown by model, api_key, provider
 */
export const getUserDailyActivityUserDailyActivityGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserDailyActivityUserDailyActivityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserDailyActivityUserDailyActivityGetResponses, GetUserDailyActivityUserDailyActivityGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/user/daily/activity',
        ...options
    });
};

/**
 * New Team
 * Allow users to create a new team. Apply user permissions to their team.
 *
 * 👉 [Detailed Doc on setting team budgets](https://docs.litellm.ai/docs/proxy/team_budgets)
 *
 *
 * Parameters:
 * - team_alias: Optional[str] - User defined team alias
 * - team_id: Optional[str] - The team id of the user. If none passed, we'll generate it.
 * - members_with_roles: List[{"role": "admin" or "user", "user_id": "<user-id>"}] - A list of users and their roles in the team. Get user_id when making a new user via `/user/new`.
 * - team_member_permissions: Optional[List[str]] - A list of routes that non-admin team members can access. example: ["/key/generate", "/key/update", "/key/delete"]
 * - metadata: Optional[dict] - Metadata for team, store information for team. Example metadata = {"extra_info": "some info"}
 * - tpm_limit: Optional[int] - The TPM (Tokens Per Minute) limit for this team - all keys with this team_id will have at max this TPM limit
 * - rpm_limit: Optional[int] - The RPM (Requests Per Minute) limit for this team - all keys associated with this team_id will have at max this RPM limit
 * - max_budget: Optional[float] - The maximum budget allocated to the team - all keys for this team_id will have at max this max_budget
 * - budget_duration: Optional[str] - The duration of the budget for the team. Doc [here](https://docs.litellm.ai/docs/proxy/team_budgets)
 * - models: Optional[list] - A list of models associated with the team - all keys for this team_id will have at most, these models. If empty, assumes all models are allowed.
 * - blocked: bool - Flag indicating if the team is blocked or not - will stop all calls from keys with this team_id.
 * - members: Optional[List] - Control team members via `/team/member/add` and `/team/member/delete`.
 * - tags: Optional[List[str]] - Tags for [tracking spend](https://litellm.vercel.app/docs/proxy/enterprise#tracking-spend-for-custom-tags) and/or doing [tag-based routing](https://litellm.vercel.app/docs/proxy/tag_routing).
 * - organization_id: Optional[str] - The organization id of the team. Default is None. Create via `/organization/new`.
 * - model_aliases: Optional[dict] - Model aliases for the team. [Docs](https://docs.litellm.ai/docs/proxy/team_based_routing#create-team-with-model-alias)
 * - guardrails: Optional[List[str]] - Guardrails for the team. [Docs](https://docs.litellm.ai/docs/proxy/guardrails)
 * Returns:
 * - team_id: (str) Unique team id - used for tracking spend across multiple keys for same team id.
 *
 * _deprecated_params:
 * - admins: list - A list of user_id's for the admin role
 * - users: list - A list of user_id's for the user role
 *
 * Example Request:
 * ```
 * curl --location 'http://0.0.0.0:4000/team/new'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_alias": "my-new-team_2",
 * "members_with_roles": [{"role": "admin", "user_id": "user-1234"},
 * {"role": "user", "user_id": "user-2434"}]
 * }'
 *
 * ```
 *
 * ```
 * curl --location 'http://0.0.0.0:4000/team/new'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_alias": "QA Prod Bot",
 * "max_budget": 0.000000001,
 * "budget_duration": "1d"
 * }'
 * ```
 */
export const newTeamTeamNewPost = <ThrowOnError extends boolean = false>(options: Options<NewTeamTeamNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewTeamTeamNewPostResponses, NewTeamTeamNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Team
 * Use `/team/member_add` AND `/team/member/delete` to add/remove new team members
 *
 * You can now update team budget / rate limits via /team/update
 *
 * Parameters:
 * - team_id: str - The team id of the user. Required param.
 * - team_alias: Optional[str] - User defined team alias
 * - team_member_permissions: Optional[List[str]] - A list of routes that non-admin team members can access. example: ["/key/generate", "/key/update", "/key/delete"]
 * - metadata: Optional[dict] - Metadata for team, store information for team. Example metadata = {"team": "core-infra", "app": "app2", "email": "ishaan@berri.ai" }
 * - tpm_limit: Optional[int] - The TPM (Tokens Per Minute) limit for this team - all keys with this team_id will have at max this TPM limit
 * - rpm_limit: Optional[int] - The RPM (Requests Per Minute) limit for this team - all keys associated with this team_id will have at max this RPM limit
 * - max_budget: Optional[float] - The maximum budget allocated to the team - all keys for this team_id will have at max this max_budget
 * - budget_duration: Optional[str] - The duration of the budget for the team. Doc [here](https://docs.litellm.ai/docs/proxy/team_budgets)
 * - models: Optional[list] - A list of models associated with the team - all keys for this team_id will have at most, these models. If empty, assumes all models are allowed.
 * - blocked: bool - Flag indicating if the team is blocked or not - will stop all calls from keys with this team_id.
 * - tags: Optional[List[str]] - Tags for [tracking spend](https://litellm.vercel.app/docs/proxy/enterprise#tracking-spend-for-custom-tags) and/or doing [tag-based routing](https://litellm.vercel.app/docs/proxy/tag_routing).
 * - organization_id: Optional[str] - The organization id of the team. Default is None. Create via `/organization/new`.
 * - model_aliases: Optional[dict] - Model aliases for the team. [Docs](https://docs.litellm.ai/docs/proxy/team_based_routing#create-team-with-model-alias)
 * - guardrails: Optional[List[str]] - Guardrails for the team. [Docs](https://docs.litellm.ai/docs/proxy/guardrails)
 * Example - update team TPM Limit
 *
 * ```
 * curl --location 'http://0.0.0.0:4000/team/update'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data-raw '{
 * "team_id": "8d916b1c-510d-4894-a334-1c16a93344f5",
 * "tpm_limit": 100
 * }'
 * ```
 *
 * Example - Update Team `max_budget` budget
 * ```
 * curl --location 'http://0.0.0.0:4000/team/update'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data-raw '{
 * "team_id": "8d916b1c-510d-4894-a334-1c16a93344f5",
 * "max_budget": 10
 * }'
 * ```
 */
export const updateTeamTeamUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamTeamUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTeamTeamUpdatePostResponses, UpdateTeamTeamUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Member Add
 * [BETA]
 *
 * Add new members (either via user_email or user_id) to a team
 *
 * If user doesn't exist, new user row will also be added to User Table
 *
 * Only proxy_admin or admin of team, allowed to access this endpoint.
 * ```
 *
 * curl -X POST 'http://0.0.0.0:4000/team/member_add'     -H 'Authorization: Bearer sk-1234'     -H 'Content-Type: application/json'     -d '{"team_id": "45e3e396-ee08-4a61-a88e-16b3ce7e0849", "member": {"role": "user", "user_id": "krrish247652@berri.ai"}}'
 *
 * ```
 */
export const teamMemberAddTeamMemberAddPost = <ThrowOnError extends boolean = false>(options: Options<TeamMemberAddTeamMemberAddPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TeamMemberAddTeamMemberAddPostResponses, TeamMemberAddTeamMemberAddPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/member_add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Member Delete
 * [BETA]
 *
 * delete members (either via user_email or user_id) from a team
 *
 * If user doesn't exist, an exception will be raised
 * ```
 * curl -X POST 'http://0.0.0.0:8000/team/member_delete'
 * -H 'Authorization: Bearer sk-1234'
 * -H 'Content-Type: application/json'
 * -d '{
 * "team_id": "45e3e396-ee08-4a61-a88e-16b3ce7e0849",
 * "user_id": "krrish247652@berri.ai"
 * }'
 * ```
 */
export const teamMemberDeleteTeamMemberDeletePost = <ThrowOnError extends boolean = false>(options: Options<TeamMemberDeleteTeamMemberDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TeamMemberDeleteTeamMemberDeletePostResponses, TeamMemberDeleteTeamMemberDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/member_delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Member Update
 * [BETA]
 *
 * Update team member budgets and team member role
 */
export const teamMemberUpdateTeamMemberUpdatePost = <ThrowOnError extends boolean = false>(options: Options<TeamMemberUpdateTeamMemberUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TeamMemberUpdateTeamMemberUpdatePostResponses, TeamMemberUpdateTeamMemberUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/member_update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Team
 * delete team and associated team keys
 *
 * Parameters:
 * - team_ids: List[str] - Required. List of team IDs to delete. Example: ["team-1234", "team-5678"]
 *
 * ```
 * curl --location 'http://0.0.0.0:4000/team/delete'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data-raw '{
 * "team_ids": ["8d916b1c-510d-4894-a334-1c16a93344f5"]
 * }'
 * ```
 */
export const deleteTeamTeamDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamTeamDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteTeamTeamDeletePostResponses, DeleteTeamTeamDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Info
 * get info on team + related keys
 *
 * Parameters:
 * - team_id: str - Required. The unique identifier of the team to get info on.
 *
 * ```
 * curl --location 'http://localhost:4000/team/info?team_id=your_team_id_here'     --header 'Authorization: Bearer your_api_key_here'
 * ```
 */
export const teamInfoTeamInfoGet = <ThrowOnError extends boolean = false>(options?: Options<TeamInfoTeamInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TeamInfoTeamInfoGetResponses, TeamInfoTeamInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/info',
        ...options
    });
};

/**
 * Block Team
 * Blocks all calls from keys with this team id.
 *
 * Parameters:
 * - team_id: str - Required. The unique identifier of the team to block.
 *
 * Example:
 * ```
 * curl --location 'http://0.0.0.0:4000/team/block'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_id": "team-1234"
 * }'
 * ```
 *
 * Returns:
 * - The updated team record with blocked=True
 */
export const blockTeamTeamBlockPost = <ThrowOnError extends boolean = false>(options: Options<BlockTeamTeamBlockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlockTeamTeamBlockPostResponses, BlockTeamTeamBlockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/block',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unblock Team
 * Blocks all calls from keys with this team id.
 *
 * Parameters:
 * - team_id: str - Required. The unique identifier of the team to unblock.
 *
 * Example:
 * ```
 * curl --location 'http://0.0.0.0:4000/team/unblock'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_id": "team-1234"
 * }'
 * ```
 */
export const unblockTeamTeamUnblockPost = <ThrowOnError extends boolean = false>(options: Options<UnblockTeamTeamUnblockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnblockTeamTeamUnblockPostResponses, UnblockTeamTeamUnblockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/unblock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Available Teams
 */
export const listAvailableTeamsTeamAvailableGet = <ThrowOnError extends boolean = false>(options?: Options<ListAvailableTeamsTeamAvailableGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAvailableTeamsTeamAvailableGetResponses, ListAvailableTeamsTeamAvailableGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/available',
        ...options
    });
};

/**
 * List Team V2
 * Get a paginated list of teams with filtering and sorting options.
 *
 * Parameters:
 * user_id: Optional[str]
 * Only return teams which this user belongs to
 * organization_id: Optional[str]
 * Only return teams which belong to this organization
 * team_id: Optional[str]
 * Filter teams by exact team_id match
 * team_alias: Optional[str]
 * Filter teams by partial team_alias match
 * page: int
 * The page number to return
 * page_size: int
 * The number of items per page
 * sort_by: Optional[str]
 * Column to sort by (e.g. 'team_id', 'team_alias', 'created_at')
 * sort_order: str
 * Sort order ('asc' or 'desc')
 */
export const listTeamV2V2TeamListGet = <ThrowOnError extends boolean = false>(options?: Options<ListTeamV2V2TeamListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamV2V2TeamListGetResponses, ListTeamV2V2TeamListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v2/team/list',
        ...options
    });
};

/**
 * List Team
 * ```
 * curl --location --request GET 'http://0.0.0.0:4000/team/list'         --header 'Authorization: Bearer sk-1234'
 * ```
 *
 * Parameters:
 * - user_id: str - Optional. If passed will only return teams that the user_id is a member of.
 * - organization_id: str - Optional. If passed will only return teams that belong to the organization_id. Pass 'default_organization' to get all teams without organization_id.
 */
export const listTeamTeamListGet = <ThrowOnError extends boolean = false>(options?: Options<ListTeamTeamListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamTeamListGetResponses, ListTeamTeamListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/list',
        ...options
    });
};

/**
 * Team Model Add
 * Add models to a team's allowed model list. Only proxy admin or team admin can add models.
 *
 * Parameters:
 * - team_id: str - Required. The team to add models to
 * - models: List[str] - Required. List of models to add to the team
 *
 * Example Request:
 * ```
 * curl --location 'http://0.0.0.0:4000/team/model/add'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_id": "team-1234",
 * "models": ["gpt-4", "claude-2"]
 * }'
 * ```
 */
export const teamModelAddTeamModelAddPost = <ThrowOnError extends boolean = false>(options: Options<TeamModelAddTeamModelAddPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TeamModelAddTeamModelAddPostResponses, TeamModelAddTeamModelAddPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/model/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Model Delete
 * Remove models from a team's allowed model list. Only proxy admin or team admin can remove models.
 *
 * Parameters:
 * - team_id: str - Required. The team to remove models from
 * - models: List[str] - Required. List of models to remove from the team
 *
 * Example Request:
 * ```
 * curl --location 'http://0.0.0.0:4000/team/model/delete'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "team_id": "team-1234",
 * "models": ["gpt-4"]
 * }'
 * ```
 */
export const teamModelDeleteTeamModelDeletePost = <ThrowOnError extends boolean = false>(options: Options<TeamModelDeleteTeamModelDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TeamModelDeleteTeamModelDeletePostResponses, TeamModelDeleteTeamModelDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/model/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Team Member Permissions
 * Get the team member permissions for a team
 */
export const teamMemberPermissionsTeamPermissionsListGet = <ThrowOnError extends boolean = false>(options?: Options<TeamMemberPermissionsTeamPermissionsListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TeamMemberPermissionsTeamPermissionsListGetResponses, TeamMemberPermissionsTeamPermissionsListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/permissions_list',
        ...options
    });
};

/**
 * Update Team Member Permissions
 * Update the team member permissions for a team
 */
export const updateTeamMemberPermissionsTeamPermissionsUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamMemberPermissionsTeamPermissionsUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponses, UpdateTeamMemberPermissionsTeamPermissionsUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/permissions_update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Team Daily Activity
 * Get daily activity for specific teams or all teams.
 *
 * Args:
 * team_ids (Optional[str]): Comma-separated list of team IDs to filter by. If not provided, returns data for all teams.
 * start_date (Optional[str]): Start date for the activity period (YYYY-MM-DD).
 * end_date (Optional[str]): End date for the activity period (YYYY-MM-DD).
 * model (Optional[str]): Filter by model name.
 * api_key (Optional[str]): Filter by API key.
 * page (int): Page number for pagination.
 * page_size (int): Number of items per page.
 * exclude_team_ids (Optional[str]): Comma-separated list of team IDs to exclude.
 * Returns:
 * SpendAnalyticsPaginatedResponse: Paginated response containing daily activity data.
 */
export const getTeamDailyActivityTeamDailyActivityGet = <ThrowOnError extends boolean = false>(options?: Options<GetTeamDailyActivityTeamDailyActivityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamDailyActivityTeamDailyActivityGetResponses, GetTeamDailyActivityTeamDailyActivityGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/daily/activity',
        ...options
    });
};

/**
 * Get Users
 * Get a list of users according to SCIM v2 protocol
 */
export const getUsersScimV2UsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersScimV2UsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersScimV2UsersGetResponses, GetUsersScimV2UsersGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users',
        ...options
    });
};

/**
 * Create User
 * Create a user according to SCIM v2 protocol
 */
export const createUserScimV2UsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserScimV2UsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserScimV2UsersPostResponses, CreateUserScimV2UsersPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 * Delete a user according to SCIM v2 protocol
 */
export const deleteUserScimV2UsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserScimV2UsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserScimV2UsersUserIdDeleteResponses, DeleteUserScimV2UsersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users/{user_id}',
        ...options
    });
};

/**
 * Get User
 * Get a single user by ID according to SCIM v2 protocol
 */
export const getUserScimV2UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserScimV2UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserScimV2UsersUserIdGetResponses, GetUserScimV2UsersUserIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users/{user_id}',
        ...options
    });
};

/**
 * Patch User
 * Patch a user according to SCIM v2 protocol
 */
export const patchUserScimV2UsersUserIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchUserScimV2UsersUserIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUserScimV2UsersUserIdPatchResponses, PatchUserScimV2UsersUserIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update User
 * Update a user according to SCIM v2 protocol
 */
export const updateUserScimV2UsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserScimV2UsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserScimV2UsersUserIdPutResponses, UpdateUserScimV2UsersUserIdPutErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Groups
 * Get a list of groups according to SCIM v2 protocol
 */
export const getGroupsScimV2GroupsGet = <ThrowOnError extends boolean = false>(options?: Options<GetGroupsScimV2GroupsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupsScimV2GroupsGetResponses, GetGroupsScimV2GroupsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups',
        ...options
    });
};

/**
 * Create Group
 * Create a group according to SCIM v2 protocol
 */
export const createGroupScimV2GroupsPost = <ThrowOnError extends boolean = false>(options: Options<CreateGroupScimV2GroupsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupScimV2GroupsPostResponses, CreateGroupScimV2GroupsPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Group
 * Delete a group according to SCIM v2 protocol
 */
export const deleteGroupScimV2GroupsGroupIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupScimV2GroupsGroupIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupScimV2GroupsGroupIdDeleteResponses, DeleteGroupScimV2GroupsGroupIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups/{group_id}',
        ...options
    });
};

/**
 * Get Group
 * Get a single group by ID according to SCIM v2 protocol
 */
export const getGroupScimV2GroupsGroupIdGet = <ThrowOnError extends boolean = false>(options: Options<GetGroupScimV2GroupsGroupIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGroupScimV2GroupsGroupIdGetResponses, GetGroupScimV2GroupsGroupIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups/{group_id}',
        ...options
    });
};

/**
 * Patch Group
 * Patch a group according to SCIM v2 protocol
 */
export const patchGroupScimV2GroupsGroupIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchGroupScimV2GroupsGroupIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchGroupScimV2GroupsGroupIdPatchResponses, PatchGroupScimV2GroupsGroupIdPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Group
 * Update a group according to SCIM v2 protocol
 */
export const updateGroupScimV2GroupsGroupIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupScimV2GroupsGroupIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupScimV2GroupsGroupIdPutResponses, UpdateGroupScimV2GroupsGroupIdPutErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/scim/v2/Groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * New Organization
 * Allow orgs to own teams
 *
 * Set org level budgets + model access.
 *
 * Only admins can create orgs.
 *
 * # Parameters
 *
 * - organization_alias: *str* - The name of the organization.
 * - models: *List* - The models the organization has access to.
 * - budget_id: *Optional[str]* - The id for a budget (tpm/rpm/max budget) for the organization.
 * ### IF NO BUDGET ID - CREATE ONE WITH THESE PARAMS ###
 * - max_budget: *Optional[float]* - Max budget for org
 * - tpm_limit: *Optional[int]* - Max tpm limit for org
 * - rpm_limit: *Optional[int]* - Max rpm limit for org
 * - max_parallel_requests: *Optional[int]* - [Not Implemented Yet] Max parallel requests for org
 * - soft_budget: *Optional[float]* - [Not Implemented Yet] Get a slack alert when this soft budget is reached. Don't block requests.
 * - model_max_budget: *Optional[dict]* - Max budget for a specific model
 * - budget_duration: *Optional[str]* - Frequency of reseting org budget
 * - metadata: *Optional[dict]* - Metadata for organization, store information for organization. Example metadata - {"extra_info": "some info"}
 * - blocked: *bool* - Flag indicating if the org is blocked or not - will stop all calls from keys with this org_id.
 * - tags: *Optional[List[str]]* - Tags for [tracking spend](https://litellm.vercel.app/docs/proxy/enterprise#tracking-spend-for-custom-tags) and/or doing [tag-based routing](https://litellm.vercel.app/docs/proxy/tag_routing).
 * - organization_id: *Optional[str]* - The organization id of the team. Default is None. Create via `/organization/new`.
 * - model_aliases: Optional[dict] - Model aliases for the team. [Docs](https://docs.litellm.ai/docs/proxy/team_based_routing#create-team-with-model-alias)
 *
 * Case 1: Create new org **without** a budget_id
 *
 * ```bash
 * curl --location 'http://0.0.0.0:4000/organization/new'
 * --header 'Authorization: Bearer sk-1234'
 * --header 'Content-Type: application/json'
 * --data '{
 * "organization_alias": "my-secret-org",
 * "models": ["model1", "model2"],
 * "max_budget": 100
 * }'
 *
 *
 * ```
 *
 * Case 2: Create new org **with** a budget_id
 *
 * ```bash
 * curl --location 'http://0.0.0.0:4000/organization/new'
 * --header 'Authorization: Bearer sk-1234'
 * --header 'Content-Type: application/json'
 * --data '{
 * "organization_alias": "my-secret-org",
 * "models": ["model1", "model2"],
 * "budget_id": "428eeaa8-f3ac-4e85-a8fb-7dc8d7aa8689"
 * }'
 * ```
 */
export const newOrganizationOrganizationNewPost = <ThrowOnError extends boolean = false>(options: Options<NewOrganizationOrganizationNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewOrganizationOrganizationNewPostResponses, NewOrganizationOrganizationNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Organization
 * Update an organization
 */
export const updateOrganizationOrganizationUpdatePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationOrganizationUpdatePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOrganizationOrganizationUpdatePatchResponses, UpdateOrganizationOrganizationUpdatePatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Organization
 * Delete an organization
 *
 * # Parameters:
 *
 * - organization_ids: List[str] - The organization ids to delete.
 */
export const deleteOrganizationOrganizationDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationOrganizationDeleteDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationOrganizationDeleteDeleteResponses, DeleteOrganizationOrganizationDeleteDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Organization
 * ```
 * curl --location --request GET 'http://0.0.0.0:4000/organization/list'         --header 'Authorization: Bearer sk-1234'
 * ```
 */
export const listOrganizationOrganizationListGet = <ThrowOnError extends boolean = false>(options?: Options<ListOrganizationOrganizationListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOrganizationOrganizationListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/list',
        ...options
    });
};

/**
 * Info Organization
 * Get the org specific information
 */
export const infoOrganizationOrganizationInfoGet = <ThrowOnError extends boolean = false>(options: Options<InfoOrganizationOrganizationInfoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InfoOrganizationOrganizationInfoGetResponses, InfoOrganizationOrganizationInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/info',
        ...options
    });
};

/**
 * Deprecated Info Organization
 * DEPRECATED: Use GET /organization/info instead
 */
export const deprecatedInfoOrganizationOrganizationInfoPost = <ThrowOnError extends boolean = false>(options: Options<DeprecatedInfoOrganizationOrganizationInfoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeprecatedInfoOrganizationOrganizationInfoPostResponses, DeprecatedInfoOrganizationOrganizationInfoPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Organization Member Add
 * [BETA]
 *
 * Add new members (either via user_email or user_id) to an organization
 *
 * If user doesn't exist, new user row will also be added to User Table
 *
 * Only proxy_admin or org_admin of organization, allowed to access this endpoint.
 *
 * # Parameters:
 *
 * - organization_id: str (required)
 * - member: Union[List[Member], Member] (required)
 * - role: Literal[LitellmUserRoles] (required)
 * - user_id: Optional[str]
 * - user_email: Optional[str]
 *
 * Note: Either user_id or user_email must be provided for each member.
 *
 * Example:
 * ```
 * curl -X POST 'http://0.0.0.0:4000/organization/member_add'     -H 'Authorization: Bearer sk-1234'     -H 'Content-Type: application/json'     -d '{
 * "organization_id": "45e3e396-ee08-4a61-a88e-16b3ce7e0849",
 * "member": {
 * "role": "internal_user",
 * "user_id": "krrish247652@berri.ai"
 * },
 * "max_budget_in_organization": 100.0
 * }'
 * ```
 *
 * The following is executed in this function:
 *
 * 1. Check if organization exists
 * 2. Creates a new Internal User if the user_id or user_email is not found in LiteLLM_UserTable
 * 3. Add Internal User to the `LiteLLM_OrganizationMembership` table
 */
export const organizationMemberAddOrganizationMemberAddPost = <ThrowOnError extends boolean = false>(options: Options<OrganizationMemberAddOrganizationMemberAddPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationMemberAddOrganizationMemberAddPostResponses, OrganizationMemberAddOrganizationMemberAddPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/member_add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Organization Member Update
 * Update a member's role in an organization
 */
export const organizationMemberUpdateOrganizationMemberUpdatePatch = <ThrowOnError extends boolean = false>(options: Options<OrganizationMemberUpdateOrganizationMemberUpdatePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationMemberUpdateOrganizationMemberUpdatePatchResponses, OrganizationMemberUpdateOrganizationMemberUpdatePatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/member_update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Organization Member Delete
 * Delete a member from an organization
 */
export const organizationMemberDeleteOrganizationMemberDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<OrganizationMemberDeleteOrganizationMemberDeleteDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationMemberDeleteOrganizationMemberDeleteDeleteResponses, OrganizationMemberDeleteOrganizationMemberDeleteDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/organization/member_delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Block User
 * [BETA] Reject calls with this end-user id
 *
 * Parameters:
 * - user_ids (List[str], required): The unique `user_id`s for the users to block
 *
 * (any /chat/completion call with this user={end-user-id} param, will be rejected.)
 *
 * ```
 * curl -X POST "http://0.0.0.0:8000/user/block"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "user_ids": [<user_id>, ...]
 * }'
 * ```
 */
export const blockUserCustomerBlockPost = <ThrowOnError extends boolean = false>(options: Options<BlockUserCustomerBlockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlockUserCustomerBlockPostResponses, BlockUserCustomerBlockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/block',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unblock User
 * [BETA] Unblock calls with this user id
 *
 * Example
 * ```
 * curl -X POST "http://0.0.0.0:8000/user/unblock"
 * -H "Authorization: Bearer sk-1234"
 * -d '{
 * "user_ids": [<user_id>, ...]
 * }'
 * ```
 */
export const unblockUserCustomerUnblockPost = <ThrowOnError extends boolean = false>(options: Options<UnblockUserCustomerUnblockPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnblockUserCustomerUnblockPostResponses, UnblockUserCustomerUnblockPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/unblock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * New End User
 * Allow creating a new Customer
 *
 *
 * Parameters:
 * - user_id: str - The unique identifier for the user.
 * - alias: Optional[str] - A human-friendly alias for the user.
 * - blocked: bool - Flag to allow or disallow requests for this end-user. Default is False.
 * - max_budget: Optional[float] - The maximum budget allocated to the user. Either 'max_budget' or 'budget_id' should be provided, not both.
 * - budget_id: Optional[str] - The identifier for an existing budget allocated to the user. Either 'max_budget' or 'budget_id' should be provided, not both.
 * - allowed_model_region: Optional[Union[Literal["eu"], Literal["us"]]] - Require all user requests to use models in this specific region.
 * - default_model: Optional[str] - If no equivalent model in the allowed region, default all requests to this model.
 * - metadata: Optional[dict] = Metadata for customer, store information for customer. Example metadata = {"data_training_opt_out": True}
 * - budget_duration: Optional[str] - Budget is reset at the end of specified duration. If not set, budget is never reset. You can set duration as seconds ("30s"), minutes ("30m"), hours ("30h"), days ("30d").
 * - tpm_limit: Optional[int] - [Not Implemented Yet] Specify tpm limit for a given customer (Tokens per minute)
 * - rpm_limit: Optional[int] - [Not Implemented Yet] Specify rpm limit for a given customer (Requests per minute)
 * - model_max_budget: Optional[dict] - [Not Implemented Yet] Specify max budget for a given model. Example: {"openai/gpt-4o-mini": {"max_budget": 100.0, "budget_duration": "1d"}}
 * - max_parallel_requests: Optional[int] - [Not Implemented Yet] Specify max parallel requests for a given customer.
 * - soft_budget: Optional[float] - [Not Implemented Yet] Get alerts when customer crosses given budget, doesn't block requests.
 *
 *
 * - Allow specifying allowed regions
 * - Allow specifying default model
 *
 * Example curl:
 * ```
 * curl --location 'http://0.0.0.0:4000/customer/new'         --header 'Authorization: Bearer sk-1234'         --header 'Content-Type: application/json'         --data '{
 * "user_id" : "ishaan-jaff-3",
 * "allowed_region": "eu",
 * "budget_id": "free_tier",
 * "default_model": "azure/gpt-3.5-turbo-eu" <- all calls from this user, use this model?
 * }'
 *
 * # return end-user object
 * ```
 *
 * NOTE: This used to be called `/end_user/new`, we will still be maintaining compatibility for /end_user/XXX for these endpoints
 */
export const newEndUserCustomerNewPost = <ThrowOnError extends boolean = false>(options: Options<NewEndUserCustomerNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewEndUserCustomerNewPostResponses, NewEndUserCustomerNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * End User Info
 * Get information about an end-user. An `end_user` is a customer (external user) of the proxy.
 *
 * Parameters:
 * - end_user_id (str, required): The unique identifier for the end-user
 *
 * Example curl:
 * ```
 * curl -X GET 'http://localhost:4000/customer/info?end_user_id=test-litellm-user-4'         -H 'Authorization: Bearer sk-1234'
 * ```
 */
export const endUserInfoCustomerInfoGet = <ThrowOnError extends boolean = false>(options: Options<EndUserInfoCustomerInfoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EndUserInfoCustomerInfoGetResponses, EndUserInfoCustomerInfoGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/info',
        ...options
    });
};

/**
 * Update End User
 * Example curl
 *
 * Parameters:
 * - user_id: str
 * - alias: Optional[str] = None  # human-friendly alias
 * - blocked: bool = False  # allow/disallow requests for this end-user
 * - max_budget: Optional[float] = None
 * - budget_id: Optional[str] = None  # give either a budget_id or max_budget
 * - allowed_model_region: Optional[AllowedModelRegion] = (
 * None  # require all user requests to use models in this specific region
 * )
 * - default_model: Optional[str] = (
 * None  # if no equivalent model in allowed region - default all requests to this model
 * )
 *
 * Example curl:
 * ```
 * curl --location 'http://0.0.0.0:4000/customer/update'     --header 'Authorization: Bearer sk-1234'     --header 'Content-Type: application/json'     --data '{
 * "user_id": "test-litellm-user-4",
 * "budget_id": "paid_tier"
 * }'
 *
 * See below for all params
 * ```
 */
export const updateEndUserCustomerUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateEndUserCustomerUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateEndUserCustomerUpdatePostResponses, UpdateEndUserCustomerUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete End User
 * Delete multiple end-users.
 *
 * Parameters:
 * - user_ids (List[str], required): The unique `user_id`s for the users to delete
 *
 * Example curl:
 * ```
 * curl --location 'http://0.0.0.0:4000/customer/delete'         --header 'Authorization: Bearer sk-1234'         --header 'Content-Type: application/json'         --data '{
 * "user_ids" :["ishaan-jaff-5"]
 * }'
 *
 * See below for all params
 * ```
 */
export const deleteEndUserCustomerDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteEndUserCustomerDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteEndUserCustomerDeletePostResponses, DeleteEndUserCustomerDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List End User
 * [Admin-only] List all available customers
 *
 * Example curl:
 * ```
 * curl --location --request GET 'http://0.0.0.0:4000/customer/list'         --header 'Authorization: Bearer sk-1234'
 * ```
 */
export const listEndUserCustomerListGet = <ThrowOnError extends boolean = false>(options?: Options<ListEndUserCustomerListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEndUserCustomerListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/customer/list',
        ...options
    });
};

/**
 * View Spend Tags
 * LiteLLM Enterprise - View Spend Per Request Tag
 *
 * Example Request:
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/tags" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Spend with Start Date and End Date
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/tags?start_date=2022-01-01&end_date=2022-02-01" -H "Authorization: Bearer sk-1234"
 * ```
 */
export const viewSpendTagsSpendTagsGet = <ThrowOnError extends boolean = false>(options?: Options<ViewSpendTagsSpendTagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewSpendTagsSpendTagsGetResponses, ViewSpendTagsSpendTagsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/spend/tags',
        ...options
    });
};

/**
 * Get Global Spend Report
 * Get Daily Spend per Team, based on specific startTime and endTime. Per team, view usage by each key, model
 * [
 * {
 * "group-by-day": "2024-05-10",
 * "teams": [
 * {
 * "team_name": "team-1"
 * "spend": 10,
 * "keys": [
 * "key": "1213",
 * "usage": {
 * "model-1": {
 * "cost": 12.50,
 * "input_tokens": 1000,
 * "output_tokens": 5000,
 * "requests": 100
 * },
 * "audio-modelname1": {
 * "cost": 25.50,
 * "seconds": 25,
 * "requests": 50
 * },
 * }
 * }
 * ]
 * ]
 * }
 */
export const getGlobalSpendReportGlobalSpendReportGet = <ThrowOnError extends boolean = false>(options?: Options<GetGlobalSpendReportGlobalSpendReportGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGlobalSpendReportGlobalSpendReportGetResponses, GetGlobalSpendReportGlobalSpendReportGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/global/spend/report',
        ...options
    });
};

/**
 * Global View Spend Tags
 * LiteLLM Enterprise - View Spend Per Request Tag. Used by LiteLLM UI
 *
 * Example Request:
 * ```
 * curl -X GET "http://0.0.0.0:4000/spend/tags" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Spend with Start Date and End Date
 * ```
 * curl -X GET "http://0.0.0.0:4000/spend/tags?start_date=2022-01-01&end_date=2022-02-01" -H "Authorization: Bearer sk-1234"
 * ```
 */
export const globalViewSpendTagsGlobalSpendTagsGet = <ThrowOnError extends boolean = false>(options?: Options<GlobalViewSpendTagsGlobalSpendTagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalViewSpendTagsGlobalSpendTagsGetResponses, GlobalViewSpendTagsGlobalSpendTagsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/global/spend/tags',
        ...options
    });
};

/**
 * Calculate Spend
 * Accepts all the params of completion_cost.
 *
 * Calculate spend **before** making call:
 *
 * Note: If you see a spend of $0.0 you need to set custom_pricing for your model: https://docs.litellm.ai/docs/proxy/custom_pricing
 *
 * ```
 * curl --location 'http://localhost:4000/spend/calculate'
 * --header 'Authorization: Bearer sk-1234'
 * --header 'Content-Type: application/json'
 * --data '{
 * "model": "anthropic.claude-v2",
 * "messages": [{"role": "user", "content": "Hey, how'''s it going?"}]
 * }'
 * ```
 *
 * Calculate spend **after** making call:
 *
 * ```
 * curl --location 'http://localhost:4000/spend/calculate'
 * --header 'Authorization: Bearer sk-1234'
 * --header 'Content-Type: application/json'
 * --data '{
 * "completion_response": {
 * "id": "chatcmpl-123",
 * "object": "chat.completion",
 * "created": 1677652288,
 * "model": "gpt-3.5-turbo-0125",
 * "system_fingerprint": "fp_44709d6fcb",
 * "choices": [{
 * "index": 0,
 * "message": {
 * "role": "assistant",
 * "content": "Hello there, how may I assist you today?"
 * },
 * "logprobs": null,
 * "finish_reason": "stop"
 * }]
 * "usage": {
 * "prompt_tokens": 9,
 * "completion_tokens": 12,
 * "total_tokens": 21
 * }
 * }
 * }'
 * ```
 */
export const calculateSpendSpendCalculatePost = <ThrowOnError extends boolean = false>(options: Options<CalculateSpendSpendCalculatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CalculateSpendSpendCalculatePostResponses, CalculateSpendSpendCalculatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/spend/calculate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * View Spend Logs
 * View all spend logs, if request_id is provided, only logs for that request_id will be returned
 *
 * Example Request for all logs
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/logs" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Example Request for specific request_id
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/logs?request_id=chatcmpl-6dcb2540-d3d7-4e49-bb27-291f863f112e" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Example Request for specific api_key
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/logs?api_key=sk-Fn8Ej39NkBQmUagFEoUWPQ" -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Example Request for specific user_id
 * ```
 * curl -X GET "http://0.0.0.0:8000/spend/logs?user_id=ishaan@berri.ai" -H "Authorization: Bearer sk-1234"
 * ```
 */
export const viewSpendLogsSpendLogsGet = <ThrowOnError extends boolean = false>(options?: Options<ViewSpendLogsSpendLogsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ViewSpendLogsSpendLogsGetResponses, ViewSpendLogsSpendLogsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/spend/logs',
        ...options
    });
};

/**
 * Global Spend Reset
 * ADMIN ONLY / MASTER KEY Only Endpoint
 *
 * Globally reset spend for All API Keys and Teams, maintain LiteLLM_SpendLogs
 *
 * 1. LiteLLM_SpendLogs will maintain the logs on spend, no data gets deleted from there
 * 2. LiteLLM_VerificationTokens spend will be set = 0
 * 3. LiteLLM_TeamTable spend will be set = 0
 */
export const globalSpendResetGlobalSpendResetPost = <ThrowOnError extends boolean = false>(options?: Options<GlobalSpendResetGlobalSpendResetPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GlobalSpendResetGlobalSpendResetPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/global/spend/reset',
        ...options
    });
};

/**
 * Provider Budgets
 * Provider Budget Routing - Get Budget, Spend Details https://docs.litellm.ai/docs/proxy/provider_budget_routing
 *
 * Use this endpoint to check current budget, spend and budget reset time for a provider
 *
 * Example Request
 *
 * ```bash
 * curl -X GET http://localhost:4000/provider/budgets     -H "Content-Type: application/json"     -H "Authorization: Bearer sk-1234"
 * ```
 *
 * Example Response
 *
 * ```json
 * {
 * "providers": {
 * "openai": {
 * "budget_limit": 1e-12,
 * "time_period": "1d",
 * "spend": 0.0,
 * "budget_reset_at": null
 * },
 * "azure": {
 * "budget_limit": 100.0,
 * "time_period": "1d",
 * "spend": 0.0,
 * "budget_reset_at": null
 * },
 * "anthropic": {
 * "budget_limit": 100.0,
 * "time_period": "10d",
 * "spend": 0.0,
 * "budget_reset_at": null
 * },
 * "vertex_ai": {
 * "budget_limit": 100.0,
 * "time_period": "12d",
 * "spend": 0.0,
 * "budget_reset_at": null
 * }
 * }
 * }
 * ```
 */
export const providerBudgetsProviderBudgetsGet = <ThrowOnError extends boolean = false>(options?: Options<ProviderBudgetsProviderBudgetsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProviderBudgetsProviderBudgetsGetResponses, unknown, ThrowOnError>({
        url: '/provider/budgets',
        ...options
    });
};

/**
 * Cache Ping
 * Endpoint for checking if cache can be pinged
 */
export const cachePingCachePingGet = <ThrowOnError extends boolean = false>(options?: Options<CachePingCachePingGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CachePingCachePingGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cache/ping',
        ...options
    });
};

/**
 * Cache Delete
 * Endpoint for deleting a key from the cache. All responses from litellm proxy have `x-litellm-cache-key` in the headers
 *
 * Parameters:
 * - **keys**: *Optional[List[str]]* - A list of keys to delete from the cache. Example {"keys": ["key1", "key2"]}
 *
 * ```shell
 * curl -X POST "http://0.0.0.0:4000/cache/delete"     -H "Authorization: Bearer sk-1234"     -d '{"keys": ["key1", "key2"]}'
 * ```
 */
export const cacheDeleteCacheDeletePost = <ThrowOnError extends boolean = false>(options?: Options<CacheDeleteCacheDeletePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CacheDeleteCacheDeletePostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cache/delete',
        ...options
    });
};

/**
 * Cache Redis Info
 * Endpoint for getting /redis/info
 */
export const cacheRedisInfoCacheRedisInfoGet = <ThrowOnError extends boolean = false>(options?: Options<CacheRedisInfoCacheRedisInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CacheRedisInfoCacheRedisInfoGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cache/redis/info',
        ...options
    });
};

/**
 * Cache Flushall
 * A function to flush all items from the cache. (All items will be deleted from the cache with this)
 * Raises HTTPException if the cache is not initialized or if the cache type does not support flushing.
 * Returns a dictionary with the status of the operation.
 *
 * Usage:
 * ```
 * curl -X POST http://0.0.0.0:4000/cache/flushall -H "Authorization: Bearer sk-1234"
 * ```
 */
export const cacheFlushallCacheFlushallPost = <ThrowOnError extends boolean = false>(options?: Options<CacheFlushallCacheFlushallPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CacheFlushallCacheFlushallPostResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/cache/flushall',
        ...options
    });
};

/**
 * List Guardrails
 * List the guardrails that are available on the proxy server
 *
 * 👉 [Guardrail docs](https://docs.litellm.ai/docs/proxy/guardrails/quick_start)
 *
 * Example Request:
 * ```bash
 * curl -X GET "http://localhost:4000/guardrails/list" -H "Authorization: Bearer <your_api_key>"
 * ```
 *
 * Example Response:
 * ```json
 * {
 * "guardrails": [
 * {
 * "guardrail_name": "bedrock-pre-guard",
 * "guardrail_info": {
 * "params": [
 * {
 * "name": "toxicity_score",
 * "type": "float",
 * "description": "Score between 0-1 indicating content toxicity level"
 * },
 * {
 * "name": "pii_detection",
 * "type": "boolean"
 * }
 * ]
 * }
 * }
 * ]
 * }
 * ```
 */
export const listGuardrailsGuardrailsListGet = <ThrowOnError extends boolean = false>(options?: Options<ListGuardrailsGuardrailsListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGuardrailsGuardrailsListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/guardrails/list',
        ...options
    });
};

/**
 * Add Allowed Ip
 */
export const addAllowedIpAddAllowedIpPost = <ThrowOnError extends boolean = false>(options: Options<AddAllowedIpAddAllowedIpPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAllowedIpAddAllowedIpPostResponses, AddAllowedIpAddAllowedIpPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/add/allowed_ip',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Allowed Ip
 */
export const deleteAllowedIpDeleteAllowedIpPost = <ThrowOnError extends boolean = false>(options: Options<DeleteAllowedIpDeleteAllowedIpPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteAllowedIpDeleteAllowedIpPostResponses, DeleteAllowedIpDeleteAllowedIpPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/delete/allowed_ip',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Sso Settings
 * Get all SSO settings from the litellm_settings configuration.
 * Returns a structured object with values and descriptions for UI display.
 */
export const getSsoSettingsGetInternalUserSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetSsoSettingsGetInternalUserSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSsoSettingsGetInternalUserSettingsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/get/internal_user_settings',
        ...options
    });
};

/**
 * Get Default Team Settings
 * Get all SSO settings from the litellm_settings configuration.
 * Returns a structured object with values and descriptions for UI display.
 */
export const getDefaultTeamSettingsGetDefaultTeamSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultTeamSettingsGetDefaultTeamSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultTeamSettingsGetDefaultTeamSettingsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/get/default_team_settings',
        ...options
    });
};

/**
 * Update Internal User Settings
 * Update the default internal user parameters for SSO users.
 * These settings will be applied to new users who sign in via SSO.
 */
export const updateInternalUserSettingsUpdateInternalUserSettingsPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateInternalUserSettingsUpdateInternalUserSettingsPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateInternalUserSettingsUpdateInternalUserSettingsPatchResponses, UpdateInternalUserSettingsUpdateInternalUserSettingsPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/update/internal_user_settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Default Team Settings
 * Update the default team parameters for SSO users.
 * These settings will be applied to new teams created from SSO.
 */
export const updateDefaultTeamSettingsUpdateDefaultTeamSettingsPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchResponses, UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/update/default_team_settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Files
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files        -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const listFilesFilesGet = <ThrowOnError extends boolean = false>(options?: Options<ListFilesFilesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFilesFilesGetResponses, ListFilesFilesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files',
        ...options
    });
};

/**
 * Create File
 * Upload a file that can be used across - Assistants API, Batch API
 * This is the equivalent of POST https://api.openai.com/v1/files
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/create
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files         -H "Authorization: Bearer sk-1234"         -F purpose="batch"         -F file="@mydata.jsonl"
 *
 * ```
 */
export const createFileFilesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFileFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFileFilesPostResponses, CreateFileFilesPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Files
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files        -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const listFilesV1FilesGet = <ThrowOnError extends boolean = false>(options?: Options<ListFilesV1FilesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFilesV1FilesGetResponses, ListFilesV1FilesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/files',
        ...options
    });
};

/**
 * Create File
 * Upload a file that can be used across - Assistants API, Batch API
 * This is the equivalent of POST https://api.openai.com/v1/files
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/create
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files         -H "Authorization: Bearer sk-1234"         -F purpose="batch"         -F file="@mydata.jsonl"
 *
 * ```
 */
export const createFileV1FilesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFileV1FilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFileV1FilesPostResponses, CreateFileV1FilesPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Files
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/list
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files        -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const listFilesProviderV1FilesGet = <ThrowOnError extends boolean = false>(options: Options<ListFilesProviderV1FilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFilesProviderV1FilesGetResponses, ListFilesProviderV1FilesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/files',
        ...options
    });
};

/**
 * Create File
 * Upload a file that can be used across - Assistants API, Batch API
 * This is the equivalent of POST https://api.openai.com/v1/files
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/create
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files         -H "Authorization: Bearer sk-1234"         -F purpose="batch"         -F file="@mydata.jsonl"
 *
 * ```
 */
export const createFileProviderV1FilesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFileProviderV1FilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFileProviderV1FilesPostResponses, CreateFileProviderV1FilesPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get File Content
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}/content
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve-contents
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123/content         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileContentFilesFileIdContentGet = <ThrowOnError extends boolean = false>(options: Options<GetFileContentFilesFileIdContentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileContentFilesFileIdContentGetResponses, GetFileContentFilesFileIdContentGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/{file_id}/content',
        ...options
    });
};

/**
 * Get File Content
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}/content
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve-contents
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123/content         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileContentV1FilesFileIdContentGet = <ThrowOnError extends boolean = false>(options: Options<GetFileContentV1FilesFileIdContentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileContentV1FilesFileIdContentGetResponses, GetFileContentV1FilesFileIdContentGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/files/{file_id}/content',
        ...options
    });
};

/**
 * Get File Content
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}/content
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve-contents
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123/content         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileContentProviderV1FilesFileIdContentGet = <ThrowOnError extends boolean = false>(options: Options<GetFileContentProviderV1FilesFileIdContentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileContentProviderV1FilesFileIdContentGetResponses, GetFileContentProviderV1FilesFileIdContentGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/files/{file_id}/content',
        ...options
    });
};

/**
 * Delete File
 * Deletes a specified file. that can be used across - Assistants API, Batch API
 * This is the equivalent of DELETE https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/delete
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123     -X DELETE     -H "Authorization: Bearer $OPENAI_API_KEY"
 *
 * ```
 */
export const deleteFileFilesFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileFilesFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileFilesFileIdDeleteResponses, DeleteFileFilesFileIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/{file_id}',
        ...options
    });
};

/**
 * Get File
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileFilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetFileFilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileFilesFileIdGetResponses, GetFileFilesFileIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/{file_id}',
        ...options
    });
};

/**
 * Delete File
 * Deletes a specified file. that can be used across - Assistants API, Batch API
 * This is the equivalent of DELETE https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/delete
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123     -X DELETE     -H "Authorization: Bearer $OPENAI_API_KEY"
 *
 * ```
 */
export const deleteFileV1FilesFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileV1FilesFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileV1FilesFileIdDeleteResponses, DeleteFileV1FilesFileIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/files/{file_id}',
        ...options
    });
};

/**
 * Get File
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileV1FilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetFileV1FilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileV1FilesFileIdGetResponses, GetFileV1FilesFileIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1/files/{file_id}',
        ...options
    });
};

/**
 * Delete File
 * Deletes a specified file. that can be used across - Assistants API, Batch API
 * This is the equivalent of DELETE https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/delete
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123     -X DELETE     -H "Authorization: Bearer $OPENAI_API_KEY"
 *
 * ```
 */
export const deleteFileProviderV1FilesFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileProviderV1FilesFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileProviderV1FilesFileIdDeleteResponses, DeleteFileProviderV1FilesFileIdDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/files/{file_id}',
        ...options
    });
};

/**
 * Get File
 * Returns information about a specific file. that can be used across - Assistants API, Batch API
 * This is the equivalent of GET https://api.openai.com/v1/files/{file_id}
 *
 * Supports Identical Params as: https://platform.openai.com/docs/api-reference/files/retrieve
 *
 * Example Curl
 * ```
 * curl http://localhost:4000/v1/files/file-abc123         -H "Authorization: Bearer sk-1234"
 *
 * ```
 */
export const getFileProviderV1FilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetFileProviderV1FilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileProviderV1FilesFileIdGetResponses, GetFileProviderV1FilesFileIdGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/{provider}/v1/files/{file_id}',
        ...options
    });
};

/**
 * Get Team Callbacks
 * Get the success/failure callbacks and variables for a team
 *
 * Parameters:
 * - team_id (str, required): The unique identifier for the team
 *
 * Example curl:
 * ```
 * curl -X GET 'http://localhost:4000/team/dbe2f686-a686-4896-864a-4c3924458709/callback'         -H 'Authorization: Bearer sk-1234'
 * ```
 *
 * This will return the callback settings for the team with id dbe2f686-a686-4896-864a-4c3924458709
 *
 * Returns {
 * "status": "success",
 * "data": {
 * "team_id": team_id,
 * "success_callbacks": team_callback_settings_obj.success_callback,
 * "failure_callbacks": team_callback_settings_obj.failure_callback,
 * "callback_vars": team_callback_settings_obj.callback_vars,
 * },
 * }
 */
export const getTeamCallbacksTeamTeamIdCallbackGet = <ThrowOnError extends boolean = false>(options: Options<GetTeamCallbacksTeamTeamIdCallbackGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamCallbacksTeamTeamIdCallbackGetResponses, GetTeamCallbacksTeamTeamIdCallbackGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/{team_id}/callback',
        ...options
    });
};

/**
 * Add Team Callbacks
 * Add a success/failure callback to a team
 *
 * Use this if if you want different teams to have different success/failure callbacks
 *
 * Parameters:
 * - callback_name (Literal["langfuse", "langsmith", "gcs"], required): The name of the callback to add
 * - callback_type (Literal["success", "failure", "success_and_failure"], required): The type of callback to add. One of:
 * - "success": Callback for successful LLM calls
 * - "failure": Callback for failed LLM calls
 * - "success_and_failure": Callback for both successful and failed LLM calls
 * - callback_vars (StandardCallbackDynamicParams, required): A dictionary of variables to pass to the callback
 * - langfuse_public_key: The public key for the Langfuse callback
 * - langfuse_secret_key: The secret key for the Langfuse callback
 * - langfuse_secret: The secret for the Langfuse callback
 * - langfuse_host: The host for the Langfuse callback
 * - gcs_bucket_name: The name of the GCS bucket
 * - gcs_path_service_account: The path to the GCS service account
 * - langsmith_api_key: The API key for the Langsmith callback
 * - langsmith_project: The project for the Langsmith callback
 * - langsmith_base_url: The base URL for the Langsmith callback
 *
 * Example curl:
 * ```
 * curl -X POST 'http:/localhost:4000/team/dbe2f686-a686-4896-864a-4c3924458709/callback'         -H 'Content-Type: application/json'         -H 'Authorization: Bearer sk-1234'         -d '{
 * "callback_name": "langfuse",
 * "callback_type": "success",
 * "callback_vars": {"langfuse_public_key": "pk-lf-xxxx1", "langfuse_secret_key": "sk-xxxxx"}
 *
 * }'
 * ```
 *
 * This means for the team where team_id = dbe2f686-a686-4896-864a-4c3924458709, all LLM calls will be logged to langfuse using the public key pk-lf-xxxx1 and the secret key sk-xxxxx
 */
export const addTeamCallbacksTeamTeamIdCallbackPost = <ThrowOnError extends boolean = false>(options: Options<AddTeamCallbacksTeamTeamIdCallbackPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTeamCallbacksTeamTeamIdCallbackPostResponses, AddTeamCallbacksTeamTeamIdCallbackPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/{team_id}/callback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable Team Logging
 * Disable all logging callbacks for a team
 *
 * Parameters:
 * - team_id (str, required): The unique identifier for the team
 *
 * Example curl:
 * ```
 * curl -X POST 'http://localhost:4000/team/dbe2f686-a686-4896-864a-4c3924458709/disable_logging'         -H 'Authorization: Bearer sk-1234'
 * ```
 */
export const disableTeamLoggingTeamTeamIdDisableLoggingPost = <ThrowOnError extends boolean = false>(options: Options<DisableTeamLoggingTeamTeamIdDisableLoggingPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisableTeamLoggingTeamTeamIdDisableLoggingPostResponses, DisableTeamLoggingTeamTeamIdDisableLoggingPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/team/{team_id}/disable_logging',
        ...options
    });
};

/**
 * New Budget
 * Create a new budget object. Can apply this to teams, orgs, end-users, keys.
 *
 * Parameters:
 * - budget_duration: Optional[str] - Budget reset period ("30d", "1h", etc.)
 * - budget_id: Optional[str] - The id of the budget. If not provided, a new id will be generated.
 * - max_budget: Optional[float] - The max budget for the budget.
 * - soft_budget: Optional[float] - The soft budget for the budget.
 * - max_parallel_requests: Optional[int] - The max number of parallel requests for the budget.
 * - tpm_limit: Optional[int] - The tokens per minute limit for the budget.
 * - rpm_limit: Optional[int] - The requests per minute limit for the budget.
 * - model_max_budget: Optional[dict] - Specify max budget for a given model. Example: {"openai/gpt-4o-mini": {"max_budget": 100.0, "budget_duration": "1d", "tpm_limit": 100000, "rpm_limit": 100000}}
 */
export const newBudgetBudgetNewPost = <ThrowOnError extends boolean = false>(options: Options<NewBudgetBudgetNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewBudgetBudgetNewPostResponses, NewBudgetBudgetNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Budget
 * Update an existing budget object.
 *
 * Parameters:
 * - budget_duration: Optional[str] - Budget reset period ("30d", "1h", etc.)
 * - budget_id: Optional[str] - The id of the budget. If not provided, a new id will be generated.
 * - max_budget: Optional[float] - The max budget for the budget.
 * - soft_budget: Optional[float] - The soft budget for the budget.
 * - max_parallel_requests: Optional[int] - The max number of parallel requests for the budget.
 * - tpm_limit: Optional[int] - The tokens per minute limit for the budget.
 * - rpm_limit: Optional[int] - The requests per minute limit for the budget.
 * - model_max_budget: Optional[dict] - Specify max budget for a given model. Example: {"openai/gpt-4o-mini": {"max_budget": 100.0, "budget_duration": "1d", "tpm_limit": 100000, "rpm_limit": 100000}}
 */
export const updateBudgetBudgetUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateBudgetBudgetUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateBudgetBudgetUpdatePostResponses, UpdateBudgetBudgetUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Info Budget
 * Get the budget id specific information
 *
 * Parameters:
 * - budgets: List[str] - The list of budget ids to get information for
 */
export const infoBudgetBudgetInfoPost = <ThrowOnError extends boolean = false>(options: Options<InfoBudgetBudgetInfoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InfoBudgetBudgetInfoPostResponses, InfoBudgetBudgetInfoPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Budget Settings
 * Get list of configurable params + current value for a budget item + description of each field
 *
 * Used on Admin UI.
 *
 * Query Parameters:
 * - budget_id: str - The budget id to get information for
 */
export const budgetSettingsBudgetSettingsGet = <ThrowOnError extends boolean = false>(options: Options<BudgetSettingsBudgetSettingsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BudgetSettingsBudgetSettingsGetResponses, BudgetSettingsBudgetSettingsGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/settings',
        ...options
    });
};

/**
 * List Budget
 * List all the created budgets in proxy db. Used on Admin UI.
 */
export const listBudgetBudgetListGet = <ThrowOnError extends boolean = false>(options?: Options<ListBudgetBudgetListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBudgetBudgetListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/list',
        ...options
    });
};

/**
 * Delete Budget
 * Delete budget
 *
 * Parameters:
 * - id: str - The budget id to delete
 */
export const deleteBudgetBudgetDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteBudgetBudgetDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteBudgetBudgetDeletePostResponses, DeleteBudgetBudgetDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/budget/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Patch Model
 * PATCH Endpoint for partial model updates.
 *
 * Only updates the fields specified in the request while preserving other existing values.
 * Follows proper PATCH semantics by only modifying provided fields.
 *
 * Args:
 * model_id: The ID of the model to update
 * patch_data: The fields to update and their new values
 * user_api_key_dict: User authentication information
 *
 * Returns:
 * Updated model information
 *
 * Raises:
 * ProxyException: For various error conditions including authentication and database errors
 */
export const patchModelModelModelIdUpdatePatch = <ThrowOnError extends boolean = false>(options: Options<PatchModelModelModelIdUpdatePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchModelModelModelIdUpdatePatchResponses, PatchModelModelModelIdUpdatePatchErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model/{model_id}/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Model
 * Allows deleting models in the model list in the config.yaml
 */
export const deleteModelModelDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteModelModelDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteModelModelDeletePostResponses, DeleteModelModelDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add New Model
 * Allows adding new models to the model list in the config.yaml
 */
export const addNewModelModelNewPost = <ThrowOnError extends boolean = false>(options: Options<AddNewModelModelNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNewModelModelNewPostResponses, AddNewModelModelNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Model
 * Edit existing model params
 */
export const updateModelModelUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateModelModelUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateModelModelUpdatePostResponses, UpdateModelModelUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/model/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * New Tag
 * Create a new tag.
 *
 * Parameters:
 * - name: str - The name of the tag
 * - description: Optional[str] - Description of what this tag represents
 * - models: List[str] - List of LLM models allowed for this tag
 */
export const newTagTagNewPost = <ThrowOnError extends boolean = false>(options: Options<NewTagTagNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewTagTagNewPostResponses, NewTagTagNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Tag
 * Update an existing tag.
 *
 * Parameters:
 * - name: str - The name of the tag to update
 * - description: Optional[str] - Updated description
 * - models: List[str] - Updated list of allowed LLM models
 */
export const updateTagTagUpdatePost = <ThrowOnError extends boolean = false>(options: Options<UpdateTagTagUpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTagTagUpdatePostResponses, UpdateTagTagUpdatePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Info Tag
 * Get information about specific tags.
 *
 * Parameters:
 * - names: List[str] - List of tag names to get information for
 */
export const infoTagTagInfoPost = <ThrowOnError extends boolean = false>(options: Options<InfoTagTagInfoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InfoTagTagInfoPostResponses, InfoTagTagInfoPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Tags
 * List all available tags.
 */
export const listTagsTagListGet = <ThrowOnError extends boolean = false>(options?: Options<ListTagsTagListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTagsTagListGetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/list',
        ...options
    });
};

/**
 * Delete Tag
 * Delete a tag.
 *
 * Parameters:
 * - name: str - The name of the tag to delete
 */
export const deleteTagTagDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteTagTagDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteTagTagDeletePostResponses, DeleteTagTagDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Tag Daily Activity
 * Get daily activity for specific tags or all tags.
 *
 * Args:
 * tags (Optional[str]): Comma-separated list of tags to filter by. If not provided, returns data for all tags.
 * start_date (Optional[str]): Start date for the activity period (YYYY-MM-DD).
 * end_date (Optional[str]): End date for the activity period (YYYY-MM-DD).
 * model (Optional[str]): Filter by model name.
 * api_key (Optional[str]): Filter by API key.
 * page (int): Page number for pagination.
 * page_size (int): Number of items per page.
 *
 * Returns:
 * SpendAnalyticsPaginatedResponse: Paginated response containing daily activity data.
 */
export const getTagDailyActivityTagDailyActivityGet = <ThrowOnError extends boolean = false>(options?: Options<GetTagDailyActivityTagDailyActivityGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagDailyActivityTagDailyActivityGetResponses, GetTagDailyActivityTagDailyActivityGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/tag/daily/activity',
        ...options
    });
};

/**
 * New Vector Store
 * Create a new vector store.
 *
 * Parameters:
 * - vector_store_id: str - Unique identifier for the vector store
 * - custom_llm_provider: str - Provider of the vector store
 * - vector_store_name: Optional[str] - Name of the vector store
 * - vector_store_description: Optional[str] - Description of the vector store
 * - vector_store_metadata: Optional[Dict] - Additional metadata for the vector store
 */
export const newVectorStoreVectorStoreNewPost = <ThrowOnError extends boolean = false>(options: Options<NewVectorStoreVectorStoreNewPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewVectorStoreVectorStoreNewPostResponses, NewVectorStoreVectorStoreNewPostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vector_store/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Vector Stores
 * List all available vector stores with optional filtering and pagination.
 * Combines both in-memory vector stores and those stored in the database.
 *
 * Parameters:
 * - page: int - Page number for pagination (default: 1)
 * - page_size: int - Number of items per page (default: 100)
 */
export const listVectorStoresVectorStoreListGet = <ThrowOnError extends boolean = false>(options?: Options<ListVectorStoresVectorStoreListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVectorStoresVectorStoreListGetResponses, ListVectorStoresVectorStoreListGetErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vector_store/list',
        ...options
    });
};

/**
 * Delete Vector Store
 * Delete a vector store.
 *
 * Parameters:
 * - vector_store_id: str - ID of the vector store to delete
 */
export const deleteVectorStoreVectorStoreDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteVectorStoreVectorStoreDeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeleteVectorStoreVectorStoreDeletePostResponses, DeleteVectorStoreVectorStoreDeletePostErrors, ThrowOnError>({
        security: [
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            },
            {
                name: 'x-litellm-api-key',
                type: 'apiKey'
            }
        ],
        url: '/vector_store/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Robots
 * Block all web crawlers from indexing the proxy server endpoints
 * This is useful for ensuring that the API endpoints aren't indexed by search engines
 */
export const getRobotsRobotsTxtGet = <ThrowOnError extends boolean = false>(options?: Options<GetRobotsRobotsTxtGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRobotsRobotsTxtGetResponses, unknown, ThrowOnError>({
        url: '/robots.txt',
        ...options
    });
};