// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeepchatProxyControllerGetData, DeepchatProxyControllerGetResponse, DeepchatProxyControllerUpdateData, DeepchatProxyControllerUpdateResponse, DeepchatProxyControllerGetAllData, DeepchatProxyControllerGetAllResponse, DeepchatProxyControllerCreateData, DeepchatProxyControllerCreateResponse, DeepchatProxyControllerDeleteData, DeepchatProxyControllerProxyRequestData, DeepchatProxyControllerProxyRequestResponse, LiteLlmControllerCreateData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get proxy by ID
 * Retrieves a specific Deepchat proxy by ID. The API key is excluded from the response for security reasons.
 */
export const deepchatProxyControllerGet = <ThrowOnError extends boolean = false>(options: Options<DeepchatProxyControllerGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DeepchatProxyControllerGetResponse, unknown, ThrowOnError>({
        url: '/deepchat-proxy/{id}',
        ...options
    });
};

/**
 * Update a proxy
 * Updates an existing Deepchat proxy configuration by ID
 */
export const deepchatProxyControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<DeepchatProxyControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DeepchatProxyControllerUpdateResponse, unknown, ThrowOnError>({
        url: '/deepchat-proxy/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all proxies
 * Retrieves all available Deepchat proxies. The API keys are excluded from the response for security reasons.
 */
export const deepchatProxyControllerGetAll = <ThrowOnError extends boolean = false>(options?: Options<DeepchatProxyControllerGetAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeepchatProxyControllerGetAllResponse, unknown, ThrowOnError>({
        url: '/deepchat-proxy',
        ...options
    });
};

/**
 * Create a new proxy
 * Creates a new Deepchat proxy with the provided configuration details
 */
export const deepchatProxyControllerCreate = <ThrowOnError extends boolean = false>(options: Options<DeepchatProxyControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeepchatProxyControllerCreateResponse, unknown, ThrowOnError>({
        url: '/deepchat-proxy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a proxy
 * Deletes a Deepchat proxy by model name
 */
export const deepchatProxyControllerDelete = <ThrowOnError extends boolean = false>(options: Options<DeepchatProxyControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/deepchat-proxy/{model}',
        ...options
    });
};

/**
 * Proxy a request
 * Proxies a completion request to the specified LLM provider using the stored configuration
 */
export const deepchatProxyControllerProxyRequest = <ThrowOnError extends boolean = false>(options: Options<DeepchatProxyControllerProxyRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeepchatProxyControllerProxyRequestResponse, unknown, ThrowOnError>({
        url: '/deepchat-proxy/proxy/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create new LiteLLM model
 * Create a new model in LiteLLM
 */
export const liteLlmControllerCreate = <ThrowOnError extends boolean = false>(options: Options<LiteLlmControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/litellm',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};