// This file is auto-generated by @hey-api/openapi-ts

/**
 * AddTeamCallback
 */
export type AddTeamCallback = {
    /**
     * Callback Name
     */
    callback_name: string;
    /**
     * Callback Type
     */
    callback_type?: ('success' | 'failure' | 'success_and_failure') | null;
    /**
     * Callback Vars
     */
    callback_vars: {
        [key: string]: string;
    };
};

/**
 * BlockKeyRequest
 */
export type BlockKeyRequest = {
    /**
     * Key
     */
    key: string;
};

/**
 * BlockTeamRequest
 */
export type BlockTeamRequest = {
    /**
     * Team Id
     */
    team_id: string;
};

/**
 * BlockUsers
 */
export type BlockUsers = {
    /**
     * User Ids
     */
    user_ids: Array<string>;
};

/**
 * Body_audio_transcriptions_audio_transcriptions_post
 */
export type BodyAudioTranscriptionsAudioTranscriptionsPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_audio_transcriptions_v1_audio_transcriptions_post
 */
export type BodyAudioTranscriptionsV1AudioTranscriptionsPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_create_file__provider__v1_files_post
 */
export type BodyCreateFileProviderV1FilesPost = {
    /**
     * Purpose
     */
    purpose: string;
    /**
     * Target Model Names
     */
    target_model_names?: string;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string;
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_create_file_files_post
 */
export type BodyCreateFileFilesPost = {
    /**
     * Purpose
     */
    purpose: string;
    /**
     * Target Model Names
     */
    target_model_names?: string;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string;
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_create_file_v1_files_post
 */
export type BodyCreateFileV1FilesPost = {
    /**
     * Purpose
     */
    purpose: string;
    /**
     * Target Model Names
     */
    target_model_names?: string;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string;
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_test_model_connection_health_test_connection_post
 */
export type BodyTestModelConnectionHealthTestConnectionPost = {
    /**
     * Mode
     * The mode to test the model with
     */
    mode?: ('chat' | 'completion' | 'embedding' | 'audio_speech' | 'audio_transcription' | 'image_generation' | 'batch' | 'rerank' | 'realtime') | null;
    /**
     * Litellm Params
     * Parameters for litellm.completion, litellm.embedding for the health check
     */
    litellm_params?: {
        [key: string]: unknown;
    };
};

/**
 * BreakdownMetrics
 * Breakdown of spend by different dimensions
 */
export type BreakdownMetrics = {
    /**
     * Models
     */
    models?: {
        [key: string]: MetricWithMetadata;
    };
    /**
     * Providers
     */
    providers?: {
        [key: string]: MetricWithMetadata;
    };
    /**
     * Api Keys
     */
    api_keys?: {
        [key: string]: KeyMetricWithMetadata;
    };
    /**
     * Entities
     */
    entities?: {
        [key: string]: MetricWithMetadata;
    };
};

/**
 * BudgetConfig
 */
export type BudgetConfig = {
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
};

/**
 * BudgetDeleteRequest
 */
export type BudgetDeleteRequest = {
    /**
     * Id
     */
    id: string;
};

/**
 * BudgetNewRequest
 */
export type BudgetNewRequest = {
    /**
     * Budget Id
     * The unique budget id.
     */
    budget_id?: string | null;
    /**
     * Max Budget
     * Requests will fail if this budget (in USD) is exceeded.
     */
    max_budget?: number | null;
    /**
     * Soft Budget
     * Requests will NOT fail if this is exceeded. Will fire alerting though.
     */
    soft_budget?: number | null;
    /**
     * Max Parallel Requests
     * Max concurrent requests allowed for this budget id.
     */
    max_parallel_requests?: number | null;
    /**
     * Tpm Limit
     * Max tokens per minute, allowed for this budget id.
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     * Max requests per minute, allowed for this budget id.
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     * Max duration budget should be set for (e.g. '1hr', '1d', '28d')
     */
    budget_duration?: string | null;
    /**
     * Model Max Budget
     * Max budget for each model (e.g. {'gpt-4o': {'max_budget': '0.0000001', 'budget_duration': '1d', 'tpm_limit': 1000, 'rpm_limit': 1000}})
     */
    model_max_budget?: {
        [key: string]: BudgetConfig;
    } | null;
};

/**
 * BudgetRequest
 */
export type BudgetRequest = {
    /**
     * Budgets
     */
    budgets: Array<string>;
};

/**
 * CachePingResponse
 */
export type CachePingResponse = {
    /**
     * Status
     */
    status: string;
    /**
     * Cache Type
     */
    cache_type: string;
    /**
     * Ping Response
     */
    ping_response?: boolean | null;
    /**
     * Set Cache Response
     */
    set_cache_response?: string | null;
    /**
     * Litellm Cache Params
     */
    litellm_cache_params?: string | null;
    /**
     * Health Check Cache Params
     */
    health_check_cache_params?: {
        [key: string]: unknown;
    } | null;
};

/**
 * CallTypes
 */
export type CallTypes = 'embedding' | 'aembedding' | 'completion' | 'acompletion' | 'atext_completion' | 'text_completion' | 'image_generation' | 'aimage_generation' | 'moderation' | 'amoderation' | 'atranscription' | 'transcription' | 'aspeech' | 'speech' | 'rerank' | 'arerank' | '_arealtime' | 'create_batch' | 'acreate_batch' | 'aretrieve_batch' | 'retrieve_batch' | 'pass_through_endpoint' | 'anthropic_messages' | 'get_assistants' | 'aget_assistants' | 'create_assistants' | 'acreate_assistants' | 'delete_assistant' | 'adelete_assistant' | 'acreate_thread' | 'create_thread' | 'aget_thread' | 'get_thread' | 'a_add_message' | 'add_message' | 'aget_messages' | 'get_messages' | 'arun_thread' | 'run_thread' | 'arun_thread_stream' | 'run_thread_stream' | 'afile_retrieve' | 'file_retrieve' | 'afile_delete' | 'file_delete' | 'afile_list' | 'file_list' | 'acreate_file' | 'create_file' | 'afile_content' | 'file_content' | 'create_fine_tuning_job' | 'acreate_fine_tuning_job' | 'acancel_fine_tuning_job' | 'cancel_fine_tuning_job' | 'alist_fine_tuning_jobs' | 'list_fine_tuning_jobs' | 'aretrieve_fine_tuning_job' | 'retrieve_fine_tuning_job' | 'responses' | 'aresponses';

/**
 * ConfigurableClientsideParamsCustomAuth
 */
export type ConfigurableClientsideParamsCustomAuth = {
    /**
     * Api Base
     */
    api_base: string;
};

/**
 * CreateCredentialItem
 */
export type CreateCredentialItem = {
    /**
     * Credential Name
     */
    credential_name: string;
    /**
     * Credential Info
     */
    credential_info: {
        [key: string]: unknown;
    };
    /**
     * Credential Values
     */
    credential_values?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Id
     */
    model_id?: string | null;
};

/**
 * CredentialItem
 */
export type CredentialItem = {
    /**
     * Credential Name
     */
    credential_name: string;
    /**
     * Credential Info
     */
    credential_info: {
        [key: string]: unknown;
    };
    /**
     * Credential Values
     */
    credential_values: {
        [key: string]: unknown;
    };
};

/**
 * DailySpendData
 */
export type DailySpendData = {
    /**
     * Date
     */
    date: string;
    metrics: SpendMetrics;
    breakdown?: BreakdownMetrics;
};

/**
 * DailySpendMetadata
 */
export type DailySpendMetadata = {
    /**
     * Total Spend
     */
    total_spend?: number;
    /**
     * Total Prompt Tokens
     */
    total_prompt_tokens?: number;
    /**
     * Total Completion Tokens
     */
    total_completion_tokens?: number;
    /**
     * Total Tokens
     */
    total_tokens?: number;
    /**
     * Total Api Requests
     */
    total_api_requests?: number;
    /**
     * Total Successful Requests
     */
    total_successful_requests?: number;
    /**
     * Total Failed Requests
     */
    total_failed_requests?: number;
    /**
     * Total Cache Read Input Tokens
     */
    total_cache_read_input_tokens?: number;
    /**
     * Total Cache Creation Input Tokens
     */
    total_cache_creation_input_tokens?: number;
    /**
     * Page
     */
    page?: number;
    /**
     * Total Pages
     */
    total_pages?: number;
    /**
     * Has More
     */
    has_more?: boolean;
};

/**
 * DefaultInternalUserParams
 * Default parameters to apply when a new user signs in via SSO or is created on the /user/new API endpoint
 */
export type DefaultInternalUserParams = {
    /**
     * User Role
     * Default role assigned to new users created
     */
    user_role?: ('proxy_admin' | 'proxy_admin_viewer' | 'internal_user' | 'internal_user_viewer') | null;
    /**
     * Max Budget
     * Default maximum budget (in USD) for new users created
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     * Default budget duration for new users (e.g. 'daily', 'weekly', 'monthly')
     */
    budget_duration?: string | null;
    /**
     * Models
     * Default list of models that new users can access
     */
    models?: Array<string> | null;
};

/**
 * DefaultTeamSSOParams
 * Default parameters to apply when a new team is automatically created by LiteLLM via SSO Groups
 */
export type DefaultTeamSsoParams = {
    /**
     * Models
     * Default list of models that new automatically created teams can access
     */
    models?: Array<string>;
    /**
     * Max Budget
     * Default maximum budget (in USD) for new automatically created teams
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     * Default budget duration for new automatically created teams (e.g. 'daily', 'weekly', 'monthly')
     */
    budget_duration?: string | null;
    /**
     * Tpm Limit
     * Default tpm limit for new automatically created teams
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     * Default rpm limit for new automatically created teams
     */
    rpm_limit?: number | null;
};

/**
 * DeleteCustomerRequest
 * Delete multiple Customers
 */
export type DeleteCustomerRequest = {
    /**
     * User Ids
     */
    user_ids: Array<string>;
};

/**
 * DeleteOrganizationRequest
 */
export type DeleteOrganizationRequest = {
    /**
     * Organization Ids
     */
    organization_ids: Array<string>;
};

/**
 * DeleteTeamRequest
 */
export type DeleteTeamRequest = {
    /**
     * Team Ids
     */
    team_ids: Array<string>;
};

/**
 * DeleteUserRequest
 */
export type DeleteUserRequest = {
    /**
     * User Ids
     */
    user_ids: Array<string>;
};

/**
 * Deployment
 */
export type Deployment = {
    /**
     * Model Name
     */
    model_name: string;
    litellm_params: LiteLlmParams;
    model_info: ModelInfo;
    [key: string]: unknown | string | LiteLlmParams | ModelInfo;
};

/**
 * ErrorResponse
 */
export type ErrorResponse = {
    /**
     * Detail
     */
    detail: {
        [key: string]: unknown;
    };
};

/**
 * GenerateKeyRequest
 */
export type GenerateKeyRequest = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Key
     */
    key?: string | null;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Enforced Params
     */
    enforced_params?: Array<string> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Soft Budget
     */
    soft_budget?: number | null;
    /**
     * Send Invite Email
     */
    send_invite_email?: boolean | null;
};

/**
 * GenerateKeyResponse
 */
export type GenerateKeyResponse = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Key
     */
    key: string;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Enforced Params
     */
    enforced_params?: Array<string> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Key Name
     */
    key_name?: string | null;
    /**
     * Expires
     */
    expires: string | null;
    /**
     * Token Id
     */
    token_id?: string | null;
    /**
     * Litellm Budget Table
     */
    litellm_budget_table?: unknown | null;
    /**
     * Token
     */
    token?: string | null;
    /**
     * Created By
     */
    created_by?: string | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * GetTeamMemberPermissionsResponse
 * Response to get the team member permissions for a team
 */
export type GetTeamMemberPermissionsResponse = {
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Team Member Permissions
     */
    team_member_permissions?: Array<string> | null;
    /**
     * All Available Permissions
     */
    all_available_permissions: Array<string>;
};

/**
 * GuardrailInfoResponse
 */
export type GuardrailInfoResponse = {
    /**
     * Guardrail Name
     */
    guardrail_name: string;
    litellm_params: GuardrailLiteLlmParamsResponse;
    /**
     * Guardrail Info
     */
    guardrail_info: {
        [key: string]: unknown;
    } | null;
};

/**
 * GuardrailLiteLLMParamsResponse
 * The returned LiteLLM Params object for /guardrails/list
 */
export type GuardrailLiteLlmParamsResponse = {
    /**
     * Guardrail
     */
    guardrail: string;
    /**
     * Mode
     */
    mode: string | Array<string>;
    /**
     * Default On
     */
    default_on?: boolean;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Hyperparameters
 */
export type Hyperparameters = {
    /**
     * Batch Size
     */
    batch_size?: string | number | null;
    /**
     * Learning Rate Multiplier
     */
    learning_rate_multiplier?: string | number | null;
    /**
     * N Epochs
     */
    n_epochs?: string | number | null;
};

/**
 * IPAddress
 */
export type IpAddress = {
    /**
     * Ip
     */
    ip: string;
};

/**
 * KeyHealthResponse
 */
export type KeyHealthResponse = {
    /**
     * Key
     */
    key?: 'healthy' | 'unhealthy';
    logging_callbacks?: LoggingCallbackStatus | null;
};

/**
 * KeyListResponseObject
 */
export type KeyListResponseObject = {
    /**
     * Keys
     */
    keys?: Array<string | UserApiKeyAuth>;
    /**
     * Total Count
     */
    total_count?: number | null;
    /**
     * Current Page
     */
    current_page?: number | null;
    /**
     * Total Pages
     */
    total_pages?: number | null;
};

/**
 * KeyMetadata
 * Metadata for a key
 */
export type KeyMetadata = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
};

/**
 * KeyMetricWithMetadata
 * Base class for metrics with additional metadata
 */
export type KeyMetricWithMetadata = {
    metrics: SpendMetrics;
    metadata?: KeyMetadata;
};

/**
 * KeyRequest
 */
export type KeyRequest = {
    /**
     * Keys
     */
    keys?: Array<string> | null;
    /**
     * Key Aliases
     */
    key_aliases?: Array<string> | null;
};

/**
 * ListGuardrailsResponse
 */
export type ListGuardrailsResponse = {
    /**
     * Guardrails
     */
    guardrails: Array<GuardrailInfoResponse>;
};

/**
 * ListMCPToolsRestAPIResponseObject
 * Object returned by the /tools/list REST API route.
 */
export type ListMcpToolsRestApiResponseObject = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Inputschema
     */
    inputSchema: {
        [key: string]: unknown;
    };
    mcp_info?: McpInfo | null;
    [key: string]: unknown | string | (string | null) | {
        [key: string]: unknown;
    } | (McpInfo | null) | undefined;
};

/**
 * LiteLLMFineTuningJobCreate
 */
export type LiteLlmFineTuningJobCreate = {
    /**
     * Model
     */
    model: string;
    /**
     * Training File
     */
    training_file: string;
    hyperparameters?: Hyperparameters | null;
    /**
     * Suffix
     */
    suffix?: string | null;
    /**
     * Validation File
     */
    validation_file?: string | null;
    /**
     * Integrations
     */
    integrations?: Array<string> | null;
    /**
     * Seed
     */
    seed?: number | null;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider: 'openai' | 'azure' | 'vertex_ai';
    [key: string]: unknown | string | (Hyperparameters | null) | (string | null) | (string | null) | (Array<string> | null) | (number | null) | ('openai' | 'azure' | 'vertex_ai') | undefined;
};

/**
 * LiteLLM_BudgetTable
 * Represents user-controllable params for a LiteLLM_BudgetTable record
 */
export type LiteLlmBudgetTable = {
    /**
     * Soft Budget
     */
    soft_budget?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
};

/**
 * LiteLLM_EndUserTable
 */
export type LiteLlmEndUserTable = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Blocked
     */
    blocked: boolean;
    /**
     * Alias
     */
    alias?: string | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Allowed Model Region
     */
    allowed_model_region?: ('eu' | 'us') | null;
    /**
     * Default Model
     */
    default_model?: string | null;
    litellm_budget_table?: LiteLlmBudgetTable | null;
};

/**
 * LiteLLM_ManagedVectorStore
 * LiteLLM managed vector store object - this is is the object stored in the database
 */
export type LiteLlmManagedVectorStore = {
    /**
     * Vector Store Id
     */
    vector_store_id?: string;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string;
    /**
     * Vector Store Name
     */
    vector_store_name?: string | null;
    /**
     * Vector Store Description
     */
    vector_store_description?: string | null;
    /**
     * Vector Store Metadata
     */
    vector_store_metadata?: {
        [key: string]: unknown;
    } | string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Litellm Credential Name
     */
    litellm_credential_name?: string | null;
};

/**
 * LiteLLM_ManagedVectorStoreListResponse
 * Response format for listing vector stores
 */
export type LiteLlmManagedVectorStoreListResponse = {
    /**
     * Object
     */
    object?: 'list';
    /**
     * Data
     */
    data?: Array<LiteLlmManagedVectorStore>;
    /**
     * Total Count
     */
    total_count?: number | null;
    /**
     * Current Page
     */
    current_page?: number | null;
    /**
     * Total Pages
     */
    total_pages?: number | null;
};

/**
 * LiteLLM_ModelTable
 */
export type LiteLlmModelTable = {
    /**
     * Model Aliases
     */
    model_aliases?: {
        [key: string]: unknown;
    } | string | null;
    /**
     * Created By
     */
    created_by: string;
    /**
     * Updated By
     */
    updated_by: string;
};

/**
 * LiteLLM_OrganizationMembershipTable
 * This is the table that track what organizations a user belongs to and users spend within the organization
 */
export type LiteLlmOrganizationMembershipTable = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Organization Id
     */
    organization_id: string;
    /**
     * User Role
     */
    user_role?: string | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * User
     */
    user?: unknown | null;
    litellm_budget_table?: LiteLlmBudgetTable | null;
};

/**
 * LiteLLM_OrganizationTableUpdate
 * Represents user-controllable params for a LiteLLM_OrganizationTable record
 */
export type LiteLlmOrganizationTableUpdate = {
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Organization Alias
     */
    organization_alias?: string | null;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Models
     */
    models?: Array<string> | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
};

/**
 * LiteLLM_OrganizationTableWithMembers
 * Returned by the /organization/info endpoint and /organization/list endpoint
 */
export type LiteLlmOrganizationTableWithMembers = {
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Organization Alias
     */
    organization_alias?: string | null;
    /**
     * Budget Id
     */
    budget_id: string;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Models
     */
    models: Array<string>;
    /**
     * Created By
     */
    created_by: string;
    /**
     * Updated By
     */
    updated_by: string;
    /**
     * Users
     */
    users?: Array<LiteLlmUserTable> | null;
    litellm_budget_table?: LiteLlmBudgetTable | null;
    /**
     * Members
     */
    members?: Array<LiteLlmOrganizationMembershipTable>;
    /**
     * Teams
     */
    teams?: Array<LiteLlmTeamTable>;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * LiteLLM_Params
 * LiteLLM Params with 'model' requirement - used for completions
 */
export type LiteLlmParams = {
    /**
     * Input Cost Per Token
     */
    input_cost_per_token?: number | null;
    /**
     * Output Cost Per Token
     */
    output_cost_per_token?: number | null;
    /**
     * Input Cost Per Second
     */
    input_cost_per_second?: number | null;
    /**
     * Output Cost Per Second
     */
    output_cost_per_second?: number | null;
    /**
     * Input Cost Per Pixel
     */
    input_cost_per_pixel?: number | null;
    /**
     * Output Cost Per Pixel
     */
    output_cost_per_pixel?: number | null;
    /**
     * Api Key
     */
    api_key?: string | null;
    /**
     * Api Base
     */
    api_base?: string | null;
    /**
     * Api Version
     */
    api_version?: string | null;
    /**
     * Vertex Project
     */
    vertex_project?: string | null;
    /**
     * Vertex Location
     */
    vertex_location?: string | null;
    /**
     * Vertex Credentials
     */
    vertex_credentials?: {
        [key: string]: unknown;
    } | string | null;
    /**
     * Region Name
     */
    region_name?: string | null;
    /**
     * Aws Access Key Id
     */
    aws_access_key_id?: string | null;
    /**
     * Aws Secret Access Key
     */
    aws_secret_access_key?: string | null;
    /**
     * Aws Region Name
     */
    aws_region_name?: string | null;
    /**
     * Watsonx Region Name
     */
    watsonx_region_name?: string | null;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string | null;
    /**
     * Tpm
     */
    tpm?: number | null;
    /**
     * Rpm
     */
    rpm?: number | null;
    /**
     * Timeout
     */
    timeout?: number | string | null;
    /**
     * Stream Timeout
     */
    stream_timeout?: number | string | null;
    /**
     * Max Retries
     */
    max_retries?: number | null;
    /**
     * Organization
     */
    organization?: string | null;
    /**
     * Configurable Clientside Auth Params
     */
    configurable_clientside_auth_params?: Array<string | ConfigurableClientsideParamsCustomAuth> | null;
    /**
     * Litellm Credential Name
     */
    litellm_credential_name?: string | null;
    /**
     * Litellm Trace Id
     */
    litellm_trace_id?: string | null;
    /**
     * Max File Size Mb
     */
    max_file_size_mb?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Use In Pass Through
     */
    use_in_pass_through?: boolean | null;
    /**
     * Merge Reasoning Content In Choices
     */
    merge_reasoning_content_in_choices?: boolean | null;
    /**
     * Model Info
     */
    model_info?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model
     */
    model: string;
    [key: string]: unknown | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | ({
        [key: string]: unknown;
    } | string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (number | null) | (number | null) | (number | string | null) | (number | string | null) | (number | null) | (string | null) | (Array<string | ConfigurableClientsideParamsCustomAuth> | null) | (string | null) | (string | null) | (number | null) | (number | null) | (string | null) | (boolean | null) | (boolean | null) | ({
        [key: string]: unknown;
    } | null) | string | undefined;
};

/**
 * LiteLLM_SpendLogs
 */
export type LiteLlmSpendLogs = {
    /**
     * Request Id
     */
    request_id: string;
    /**
     * Api Key
     */
    api_key: string;
    /**
     * Model
     */
    model?: string | null;
    /**
     * Api Base
     */
    api_base?: string | null;
    /**
     * Call Type
     */
    call_type: string;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Total Tokens
     */
    total_tokens?: number | null;
    /**
     * Prompt Tokens
     */
    prompt_tokens?: number | null;
    /**
     * Completion Tokens
     */
    completion_tokens?: number | null;
    /**
     * Starttime
     */
    startTime: string | null;
    /**
     * Endtime
     */
    endTime: string | null;
    /**
     * User
     */
    user?: string | null;
    /**
     * Metadata
     */
    metadata?: unknown | null;
    /**
     * Cache Hit
     */
    cache_hit?: string | null;
    /**
     * Cache Key
     */
    cache_key?: string | null;
    /**
     * Request Tags
     */
    request_tags?: unknown | null;
    /**
     * Requester Ip Address
     */
    requester_ip_address?: string | null;
    /**
     * Messages
     */
    messages: string | Array<unknown> | {
        [key: string]: unknown;
    } | null;
    /**
     * Response
     */
    response: string | Array<unknown> | {
        [key: string]: unknown;
    } | null;
};

/**
 * LiteLLM_TeamMembership
 */
export type LiteLlmTeamMembership = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Budget Id
     */
    budget_id: string;
    litellm_budget_table: LiteLlmBudgetTable | null;
};

/**
 * LiteLLM_TeamTable
 */
export type LiteLlmTeamTable = {
    /**
     * Team Alias
     */
    team_alias?: string | null;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Admins
     */
    admins?: Array<unknown>;
    /**
     * Members
     */
    members?: Array<unknown>;
    /**
     * Members With Roles
     */
    members_with_roles?: Array<Member>;
    /**
     * Team Member Permissions
     */
    team_member_permissions?: Array<string> | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Blocked
     */
    blocked?: boolean;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Model Id
     */
    model_id?: number | null;
    litellm_model_table?: LiteLlmModelTable | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * LiteLLM_UserTable
 */
export type LiteLlmUserTable = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Spend
     */
    model_spend?: {
        [key: string]: unknown;
    } | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * User Alias
     */
    user_alias?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * User Role
     */
    user_role?: string | null;
    /**
     * Organization Memberships
     */
    organization_memberships?: Array<LiteLlmOrganizationMembershipTable> | null;
    /**
     * Teams
     */
    teams?: Array<string>;
    /**
     * Sso User Id
     */
    sso_user_id?: string | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * LiteLLM_UserTableWithKeyCount
 */
export type LiteLlmUserTableWithKeyCount = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Spend
     */
    model_spend?: {
        [key: string]: unknown;
    } | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * User Alias
     */
    user_alias?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * User Role
     */
    user_role?: string | null;
    /**
     * Organization Memberships
     */
    organization_memberships?: Array<LiteLlmOrganizationMembershipTable> | null;
    /**
     * Teams
     */
    teams?: Array<string>;
    /**
     * Sso User Id
     */
    sso_user_id?: string | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Key Count
     */
    key_count?: number;
};

/**
 * LiteLLM_VerificationToken
 */
export type LiteLlmVerificationToken = {
    /**
     * Token
     */
    token?: string | null;
    /**
     * Key Name
     */
    key_name?: string | null;
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Expires
     */
    expires?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    };
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    };
    /**
     * Model Spend
     */
    model_spend?: {
        [key: string]: unknown;
    };
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    };
    /**
     * Soft Budget Cooldown
     */
    soft_budget_cooldown?: boolean;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Litellm Budget Table
     */
    litellm_budget_table?: {
        [key: string]: unknown;
    } | null;
    /**
     * Org Id
     */
    org_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Created By
     */
    created_by?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
};

/**
 * LitellmUserRoles
 * Admin Roles:
 * PROXY_ADMIN: admin over the platform
 * PROXY_ADMIN_VIEW_ONLY: can login, view all own keys, view all spend
 * ORG_ADMIN: admin over a specific organization, can create teams, users only within their organization
 *
 * Internal User Roles:
 * INTERNAL_USER: can login, view/create/delete their own keys, view their spend
 * INTERNAL_USER_VIEW_ONLY: can login, view their own keys, view their own spend
 *
 *
 * Team Roles:
 * TEAM: used for JWT auth
 *
 *
 * Customer Roles:
 * CUSTOMER: External users -> these are customers
 */
export type LitellmUserRoles = 'proxy_admin' | 'proxy_admin_viewer' | 'org_admin' | 'internal_user' | 'internal_user_viewer' | 'team' | 'customer';

/**
 * LoggingCallbackStatus
 */
export type LoggingCallbackStatus = {
    /**
     * Callbacks
     */
    callbacks?: Array<string>;
    /**
     * Status
     */
    status?: 'healthy' | 'unhealthy';
    /**
     * Details
     */
    details?: string | null;
};

/**
 * MCPInfo
 */
export type McpInfo = {
    /**
     * Server Name
     */
    server_name?: string;
    /**
     * Logo Url
     */
    logo_url?: string | null;
};

/**
 * Member
 */
export type Member = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Role
     */
    role: 'admin' | 'user';
};

/**
 * MetricWithMetadata
 */
export type MetricWithMetadata = {
    metrics: SpendMetrics;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * ModelInfo
 */
export type ModelInfo = {
    /**
     * Id
     */
    id: string | null;
    /**
     * Db Model
     */
    db_model?: boolean;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Created By
     */
    created_by?: string | null;
    /**
     * Base Model
     */
    base_model?: string | null;
    /**
     * Tier
     */
    tier?: ('free' | 'paid') | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Team Public Model Name
     */
    team_public_model_name?: string | null;
    [key: string]: unknown | (string | null) | boolean | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (('free' | 'paid') | null) | (string | null) | (string | null) | undefined;
};

/**
 * ModelInfoDelete
 */
export type ModelInfoDelete = {
    /**
     * Id
     */
    id: string;
};

/**
 * NewCustomerRequest
 * Create a new customer, allocate a budget to them
 */
export type NewCustomerRequest = {
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Max Budget
     * Requests will fail if this budget (in USD) is exceeded.
     */
    max_budget?: number | null;
    /**
     * Soft Budget
     * Requests will NOT fail if this is exceeded. Will fire alerting though.
     */
    soft_budget?: number | null;
    /**
     * Max Parallel Requests
     * Max concurrent requests allowed for this budget id.
     */
    max_parallel_requests?: number | null;
    /**
     * Tpm Limit
     * Max tokens per minute, allowed for this budget id.
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     * Max requests per minute, allowed for this budget id.
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     * Max duration budget should be set for (e.g. '1hr', '1d', '28d')
     */
    budget_duration?: string | null;
    /**
     * Model Max Budget
     * Max budget for each model (e.g. {'gpt-4o': {'max_budget': '0.0000001', 'budget_duration': '1d', 'tpm_limit': 1000, 'rpm_limit': 1000}})
     */
    model_max_budget?: {
        [key: string]: BudgetConfig;
    } | null;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Alias
     */
    alias?: string | null;
    /**
     * Blocked
     */
    blocked?: boolean;
    /**
     * Allowed Model Region
     */
    allowed_model_region?: ('eu' | 'us') | null;
    /**
     * Default Model
     */
    default_model?: string | null;
};

/**
 * NewOrganizationRequest
 */
export type NewOrganizationRequest = {
    /**
     * Soft Budget
     */
    soft_budget?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Organization Alias
     */
    organization_alias: string;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * NewOrganizationResponse
 */
export type NewOrganizationResponse = {
    /**
     * Organization Id
     */
    organization_id: string;
    /**
     * Organization Alias
     */
    organization_alias?: string | null;
    /**
     * Budget Id
     */
    budget_id: string;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Models
     */
    models: Array<string>;
    /**
     * Created By
     */
    created_by: string;
    /**
     * Updated By
     */
    updated_by: string;
    /**
     * Users
     */
    users?: Array<LiteLlmUserTable> | null;
    litellm_budget_table?: LiteLlmBudgetTable | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * NewTeamRequest
 */
export type NewTeamRequest = {
    /**
     * Team Alias
     */
    team_alias?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Admins
     */
    admins?: Array<unknown>;
    /**
     * Members
     */
    members?: Array<unknown>;
    /**
     * Members With Roles
     */
    members_with_roles?: Array<Member>;
    /**
     * Team Member Permissions
     */
    team_member_permissions?: Array<string> | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Blocked
     */
    blocked?: boolean;
    /**
     * Model Aliases
     */
    model_aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tags
     */
    tags?: Array<unknown> | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
};

/**
 * NewUserRequest
 */
export type NewUserRequest = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * User Alias
     */
    user_alias?: string | null;
    /**
     * User Role
     */
    user_role?: ('proxy_admin' | 'proxy_admin_viewer' | 'internal_user' | 'internal_user_viewer') | null;
    /**
     * Teams
     */
    teams?: Array<unknown> | null;
    /**
     * Auto Create Key
     */
    auto_create_key?: boolean;
    /**
     * Send Invite Email
     */
    send_invite_email?: boolean | null;
    /**
     * Sso User Id
     */
    sso_user_id?: string | null;
};

/**
 * NewUserResponse
 */
export type NewUserResponse = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Key
     */
    key: string;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Enforced Params
     */
    enforced_params?: Array<string> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Key Name
     */
    key_name?: string | null;
    /**
     * Expires
     */
    expires: string | null;
    /**
     * Token Id
     */
    token_id?: string | null;
    /**
     * Litellm Budget Table
     */
    litellm_budget_table?: unknown | null;
    /**
     * Token
     */
    token?: string | null;
    /**
     * Created By
     */
    created_by?: string | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * User Role
     */
    user_role?: ('proxy_admin' | 'proxy_admin_viewer' | 'internal_user' | 'internal_user_viewer') | null;
    /**
     * Teams
     */
    teams?: Array<unknown> | null;
    /**
     * User Alias
     */
    user_alias?: string | null;
};

/**
 * OrgMember
 */
export type OrgMember = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Role
     */
    role: 'org_admin' | 'internal_user' | 'internal_user_viewer';
};

/**
 * OrganizationAddMemberResponse
 */
export type OrganizationAddMemberResponse = {
    /**
     * Organization Id
     */
    organization_id: string;
    /**
     * Updated Users
     */
    updated_users: Array<LiteLlmUserTable>;
    /**
     * Updated Organization Memberships
     */
    updated_organization_memberships: Array<LiteLlmOrganizationMembershipTable>;
};

/**
 * OrganizationMemberAddRequest
 */
export type OrganizationMemberAddRequest = {
    /**
     * Member
     */
    member: Array<OrgMember> | OrgMember;
    /**
     * Organization Id
     */
    organization_id: string;
    /**
     * Max Budget In Organization
     */
    max_budget_in_organization?: number | null;
};

/**
 * OrganizationMemberDeleteRequest
 */
export type OrganizationMemberDeleteRequest = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Organization Id
     */
    organization_id: string;
};

/**
 * OrganizationMemberUpdateRequest
 */
export type OrganizationMemberUpdateRequest = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Organization Id
     */
    organization_id: string;
    /**
     * Max Budget In Organization
     */
    max_budget_in_organization?: number | null;
    role?: LitellmUserRoles | null;
};

/**
 * OrganizationRequest
 */
export type OrganizationRequest = {
    /**
     * Organizations
     */
    organizations: Array<string>;
};

/**
 * PassThroughEndpointResponse
 */
export type PassThroughEndpointResponse = {
    /**
     * Endpoints
     */
    endpoints: Array<PassThroughGenericEndpoint>;
};

/**
 * PassThroughGenericEndpoint
 */
export type PassThroughGenericEndpoint = {
    /**
     * Path
     * The route to be added to the LiteLLM Proxy Server.
     */
    path: string;
    /**
     * Target
     * The URL to which requests for this path should be forwarded.
     */
    target: string;
    /**
     * Headers
     * Key-value pairs of headers to be forwarded with the request. You can set any key value pair here and it will be forwarded to your target endpoint
     */
    headers: {
        [key: string]: unknown;
    };
};

/**
 * ProviderBudgetResponse
 * Complete provider budget configuration and status.
 * Maps provider names to their budget configs.
 */
export type ProviderBudgetResponse = {
    /**
     * Providers
     */
    providers?: {
        [key: string]: ProviderBudgetResponseObject;
    };
};

/**
 * ProviderBudgetResponseObject
 * Configuration for a single provider's budget settings
 */
export type ProviderBudgetResponseObject = {
    /**
     * Budget Limit
     */
    budget_limit: number | null;
    /**
     * Time Period
     */
    time_period: string | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
};

/**
 * RawRequestTypedDict
 */
export type RawRequestTypedDict = {
    /**
     * Raw Request Api Base
     */
    raw_request_api_base?: string | null;
    /**
     * Raw Request Body
     */
    raw_request_body?: {
        [key: string]: unknown;
    } | null;
    /**
     * Raw Request Headers
     */
    raw_request_headers?: {
        [key: string]: unknown;
    } | null;
    /**
     * Error
     */
    error?: string | null;
};

/**
 * RegenerateKeyRequest
 */
export type RegenerateKeyRequest = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Key
     */
    key?: string | null;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Enforced Params
     */
    enforced_params?: Array<string> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Soft Budget
     */
    soft_budget?: number | null;
    /**
     * Send Invite Email
     */
    send_invite_email?: boolean | null;
    /**
     * New Master Key
     */
    new_master_key?: string | null;
};

/**
 * SCIMGroup
 */
export type ScimGroup = {
    /**
     * Schemas
     */
    schemas: Array<string>;
    /**
     * Id
     */
    id?: string | null;
    /**
     * Externalid
     */
    externalId?: string | null;
    /**
     * Meta
     */
    meta?: {
        [key: string]: unknown;
    } | null;
    /**
     * Displayname
     */
    displayName: string;
    /**
     * Members
     */
    members?: Array<ScimMember> | null;
};

/**
 * SCIMListResponse
 */
export type ScimListResponse = {
    /**
     * Schemas
     */
    schemas?: Array<string>;
    /**
     * Totalresults
     */
    totalResults: number;
    /**
     * Startindex
     */
    startIndex?: number | null;
    /**
     * Itemsperpage
     */
    itemsPerPage?: number | null;
    /**
     * Resources
     */
    Resources: Array<ScimUser> | Array<ScimGroup>;
};

/**
 * SCIMMember
 */
export type ScimMember = {
    /**
     * Value
     */
    value: string;
    /**
     * Display
     */
    display?: string | null;
};

/**
 * SCIMPatchOp
 */
export type ScimPatchOp = {
    /**
     * Schemas
     */
    schemas?: Array<string>;
    /**
     * Operations
     */
    Operations: Array<ScimPatchOperation>;
};

/**
 * SCIMPatchOperation
 */
export type ScimPatchOperation = {
    /**
     * Op
     */
    op: 'add' | 'remove' | 'replace';
    /**
     * Path
     */
    path?: string | null;
    /**
     * Value
     */
    value?: unknown | null;
};

/**
 * SCIMUser
 */
export type ScimUser = {
    /**
     * Schemas
     */
    schemas: Array<string>;
    /**
     * Id
     */
    id?: string | null;
    /**
     * Externalid
     */
    externalId?: string | null;
    /**
     * Meta
     */
    meta?: {
        [key: string]: unknown;
    } | null;
    /**
     * Username
     */
    userName: string;
    name: ScimUserName;
    /**
     * Displayname
     */
    displayName?: string | null;
    /**
     * Active
     */
    active?: boolean;
    /**
     * Emails
     */
    emails?: Array<ScimUserEmail> | null;
    /**
     * Groups
     */
    groups?: Array<ScimUserGroup> | null;
};

/**
 * SCIMUserEmail
 */
export type ScimUserEmail = {
    /**
     * Value
     */
    value: string;
    /**
     * Type
     */
    type?: string | null;
    /**
     * Primary
     */
    primary?: boolean | null;
};

/**
 * SCIMUserGroup
 */
export type ScimUserGroup = {
    /**
     * Value
     */
    value: string;
    /**
     * Display
     */
    display?: string | null;
    /**
     * Type
     */
    type?: string | null;
};

/**
 * SCIMUserName
 */
export type ScimUserName = {
    /**
     * Familyname
     */
    familyName: string;
    /**
     * Givenname
     */
    givenName: string;
    /**
     * Formatted
     */
    formatted?: string | null;
    /**
     * Middlename
     */
    middleName?: string | null;
    /**
     * Honorificprefix
     */
    honorificPrefix?: string | null;
    /**
     * Honorificsuffix
     */
    honorificSuffix?: string | null;
};

/**
 * SpendAnalyticsPaginatedResponse
 */
export type SpendAnalyticsPaginatedResponse = {
    /**
     * Results
     */
    results: Array<DailySpendData>;
    metadata?: DailySpendMetadata;
};

/**
 * SpendCalculateRequest
 */
export type SpendCalculateRequest = {
    /**
     * Model
     */
    model?: string | null;
    /**
     * Messages
     */
    messages?: Array<unknown> | null;
    /**
     * Completion Response
     */
    completion_response?: {
        [key: string]: unknown;
    } | null;
};

/**
 * SpendMetrics
 */
export type SpendMetrics = {
    /**
     * Spend
     */
    spend?: number;
    /**
     * Prompt Tokens
     */
    prompt_tokens?: number;
    /**
     * Completion Tokens
     */
    completion_tokens?: number;
    /**
     * Cache Read Input Tokens
     */
    cache_read_input_tokens?: number;
    /**
     * Cache Creation Input Tokens
     */
    cache_creation_input_tokens?: number;
    /**
     * Total Tokens
     */
    total_tokens?: number;
    /**
     * Successful Requests
     */
    successful_requests?: number;
    /**
     * Failed Requests
     */
    failed_requests?: number;
    /**
     * Api Requests
     */
    api_requests?: number;
};

/**
 * TagConfig
 */
export type TagConfig = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Models
     */
    models?: Array<string> | null;
    /**
     * Model Info
     */
    model_info?: {
        [key: string]: string;
    } | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Created By
     */
    created_by?: string | null;
};

/**
 * TagDeleteRequest
 */
export type TagDeleteRequest = {
    /**
     * Name
     */
    name: string;
};

/**
 * TagInfoRequest
 */
export type TagInfoRequest = {
    /**
     * Names
     */
    names: Array<string>;
};

/**
 * TagNewRequest
 */
export type TagNewRequest = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Models
     */
    models?: Array<string> | null;
    /**
     * Model Info
     */
    model_info?: {
        [key: string]: string;
    } | null;
};

/**
 * TagUpdateRequest
 */
export type TagUpdateRequest = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Models
     */
    models?: Array<string> | null;
    /**
     * Model Info
     */
    model_info?: {
        [key: string]: string;
    } | null;
};

/**
 * TeamAddMemberResponse
 */
export type TeamAddMemberResponse = {
    /**
     * Team Alias
     */
    team_alias?: string | null;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Admins
     */
    admins?: Array<unknown>;
    /**
     * Members
     */
    members?: Array<unknown>;
    /**
     * Members With Roles
     */
    members_with_roles?: Array<Member>;
    /**
     * Team Member Permissions
     */
    team_member_permissions?: Array<string> | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Blocked
     */
    blocked?: boolean;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Model Id
     */
    model_id?: number | null;
    litellm_model_table?: LiteLlmModelTable | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated Users
     */
    updated_users: Array<LiteLlmUserTable>;
    /**
     * Updated Team Memberships
     */
    updated_team_memberships: Array<LiteLlmTeamMembership>;
};

/**
 * TeamListResponse
 * Response to get the list of teams
 */
export type TeamListResponse = {
    /**
     * Teams
     */
    teams: Array<LiteLlmTeamTable>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Page Size
     */
    page_size: number;
    /**
     * Total Pages
     */
    total_pages: number;
};

/**
 * TeamMemberAddRequest
 */
export type TeamMemberAddRequest = {
    /**
     * Member
     */
    member: Array<Member> | Member;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Max Budget In Team
     */
    max_budget_in_team?: number | null;
};

/**
 * TeamMemberDeleteRequest
 */
export type TeamMemberDeleteRequest = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Team Id
     */
    team_id: string;
};

/**
 * TeamMemberUpdateRequest
 */
export type TeamMemberUpdateRequest = {
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Max Budget In Team
     */
    max_budget_in_team?: number | null;
    /**
     * Role
     */
    role?: ('admin' | 'user') | null;
};

/**
 * TeamMemberUpdateResponse
 */
export type TeamMemberUpdateResponse = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Max Budget In Team
     */
    max_budget_in_team?: number | null;
};

/**
 * TeamModelAddRequest
 * Request to add models to a team
 */
export type TeamModelAddRequest = {
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Models
     */
    models: Array<string>;
};

/**
 * TeamModelDeleteRequest
 * Request to delete models from a team
 */
export type TeamModelDeleteRequest = {
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Models
     */
    models: Array<string>;
};

/**
 * TokenCountRequest
 */
export type TokenCountRequest = {
    /**
     * Model
     */
    model: string;
    /**
     * Prompt
     */
    prompt?: string | null;
    /**
     * Messages
     */
    messages?: Array<{
        [key: string]: unknown;
    }> | null;
};

/**
 * TokenCountResponse
 */
export type TokenCountResponse = {
    /**
     * Total Tokens
     */
    total_tokens: number;
    /**
     * Request Model
     */
    request_model: string;
    /**
     * Model Used
     */
    model_used: string;
    /**
     * Tokenizer Type
     */
    tokenizer_type: string;
};

/**
 * TransformRequestBody
 */
export type TransformRequestBody = {
    call_type: CallTypes;
    /**
     * Request Body
     */
    request_body: {
        [key: string]: unknown;
    };
};

/**
 * UpdateCustomerRequest
 * Update a Customer, use this to update customer budgets etc
 */
export type UpdateCustomerRequest = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Alias
     */
    alias?: string | null;
    /**
     * Blocked
     */
    blocked?: boolean;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Allowed Model Region
     */
    allowed_model_region?: ('eu' | 'us') | null;
    /**
     * Default Model
     */
    default_model?: string | null;
};

/**
 * UpdateKeyRequest
 */
export type UpdateKeyRequest = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Key
     */
    key: string;
    /**
     * Budget Id
     */
    budget_id?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Enforced Params
     */
    enforced_params?: Array<string> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Temp Budget Increase
     */
    temp_budget_increase?: number | null;
    /**
     * Temp Budget Expiry
     */
    temp_budget_expiry?: string | null;
};

/**
 * UpdateTeamMemberPermissionsRequest
 * Request to update the team member permissions for a team
 */
export type UpdateTeamMemberPermissionsRequest = {
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Team Member Permissions
     */
    team_member_permissions: Array<string>;
};

/**
 * UpdateTeamRequest
 * UpdateTeamRequest, used by /team/update when you need to update a team
 *
 * team_id: str
 * team_alias: Optional[str] = None
 * organization_id: Optional[str] = None
 * metadata: Optional[dict] = None
 * tpm_limit: Optional[int] = None
 * rpm_limit: Optional[int] = None
 * max_budget: Optional[float] = None
 * models: Optional[list] = None
 * blocked: Optional[bool] = None
 * budget_duration: Optional[str] = None
 * guardrails: Optional[List[str]] = None
 */
export type UpdateTeamRequest = {
    /**
     * Team Id
     */
    team_id: string;
    /**
     * Team Alias
     */
    team_alias?: string | null;
    /**
     * Organization Id
     */
    organization_id?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Tags
     */
    tags?: Array<unknown> | null;
    /**
     * Model Aliases
     */
    model_aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
};

/**
 * UpdateUserRequest
 */
export type UpdateUserRequest = {
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Duration
     */
    duration?: string | null;
    /**
     * Models
     */
    models?: Array<unknown> | null;
    /**
     * Spend
     */
    spend?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Rpm Limit
     */
    model_rpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model Tpm Limit
     */
    model_tpm_limit?: {
        [key: string]: unknown;
    } | null;
    /**
     * Guardrails
     */
    guardrails?: Array<string> | null;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * User Role
     */
    user_role?: ('proxy_admin' | 'proxy_admin_viewer' | 'internal_user' | 'internal_user_viewer') | null;
};

/**
 * UserAPIKeyAuth
 * Return the row in the db
 */
export type UserApiKeyAuth = {
    /**
     * Token
     */
    token?: string | null;
    /**
     * Key Name
     */
    key_name?: string | null;
    /**
     * Key Alias
     */
    key_alias?: string | null;
    /**
     * Spend
     */
    spend?: number;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Expires
     */
    expires?: string | null;
    /**
     * Models
     */
    models?: Array<unknown>;
    /**
     * Aliases
     */
    aliases?: {
        [key: string]: unknown;
    };
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * User Id
     */
    user_id?: string | null;
    /**
     * Team Id
     */
    team_id?: string | null;
    /**
     * Max Parallel Requests
     */
    max_parallel_requests?: number | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Tpm Limit
     */
    tpm_limit?: number | null;
    /**
     * Rpm Limit
     */
    rpm_limit?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Budget Reset At
     */
    budget_reset_at?: string | null;
    /**
     * Allowed Cache Controls
     */
    allowed_cache_controls?: Array<unknown> | null;
    /**
     * Allowed Routes
     */
    allowed_routes?: Array<unknown> | null;
    /**
     * Permissions
     */
    permissions?: {
        [key: string]: unknown;
    };
    /**
     * Model Spend
     */
    model_spend?: {
        [key: string]: unknown;
    };
    /**
     * Model Max Budget
     */
    model_max_budget?: {
        [key: string]: unknown;
    };
    /**
     * Soft Budget Cooldown
     */
    soft_budget_cooldown?: boolean;
    /**
     * Blocked
     */
    blocked?: boolean | null;
    /**
     * Litellm Budget Table
     */
    litellm_budget_table?: {
        [key: string]: unknown;
    } | null;
    /**
     * Org Id
     */
    org_id?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Created By
     */
    created_by?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Updated By
     */
    updated_by?: string | null;
    /**
     * Team Spend
     */
    team_spend?: number | null;
    /**
     * Team Alias
     */
    team_alias?: string | null;
    /**
     * Team Tpm Limit
     */
    team_tpm_limit?: number | null;
    /**
     * Team Rpm Limit
     */
    team_rpm_limit?: number | null;
    /**
     * Team Max Budget
     */
    team_max_budget?: number | null;
    /**
     * Team Models
     */
    team_models?: Array<unknown>;
    /**
     * Team Blocked
     */
    team_blocked?: boolean;
    /**
     * Soft Budget
     */
    soft_budget?: number | null;
    /**
     * Team Model Aliases
     */
    team_model_aliases?: {
        [key: string]: unknown;
    } | null;
    /**
     * Team Member Spend
     */
    team_member_spend?: number | null;
    team_member?: Member | null;
    /**
     * Team Metadata
     */
    team_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * End User Id
     */
    end_user_id?: string | null;
    /**
     * End User Tpm Limit
     */
    end_user_tpm_limit?: number | null;
    /**
     * End User Rpm Limit
     */
    end_user_rpm_limit?: number | null;
    /**
     * End User Max Budget
     */
    end_user_max_budget?: number | null;
    /**
     * Last Refreshed At
     */
    last_refreshed_at?: number | null;
    /**
     * Api Key
     */
    api_key?: string | null;
    user_role?: LitellmUserRoles | null;
    /**
     * Allowed Model Region
     */
    allowed_model_region?: ('eu' | 'us') | null;
    /**
     * Parent Otel Span
     */
    parent_otel_span?: unknown | null;
    /**
     * Rpm Limit Per Model
     */
    rpm_limit_per_model?: {
        [key: string]: number;
    } | null;
    /**
     * Tpm Limit Per Model
     */
    tpm_limit_per_model?: {
        [key: string]: number;
    } | null;
    /**
     * User Tpm Limit
     */
    user_tpm_limit?: number | null;
    /**
     * User Rpm Limit
     */
    user_rpm_limit?: number | null;
    /**
     * User Email
     */
    user_email?: string | null;
    /**
     * Request Route
     */
    request_route?: string | null;
};

/**
 * UserListResponse
 * Response model for the user list endpoint
 */
export type UserListResponse = {
    /**
     * Users
     */
    users: Array<LiteLlmUserTableWithKeyCount>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Page Size
     */
    page_size: number;
    /**
     * Total Pages
     */
    total_pages: number;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VectorStoreDeleteRequest
 */
export type VectorStoreDeleteRequest = {
    /**
     * Vector Store Id
     */
    vector_store_id: string;
};

/**
 * updateDeployment
 */
export type UpdateDeployment = {
    /**
     * Model Name
     */
    model_name?: string | null;
    litellm_params?: UpdateLiteLlmParams | null;
    model_info?: ModelInfo | null;
};

/**
 * updateLiteLLMParams
 */
export type UpdateLiteLlmParams = {
    /**
     * Input Cost Per Token
     */
    input_cost_per_token?: number | null;
    /**
     * Output Cost Per Token
     */
    output_cost_per_token?: number | null;
    /**
     * Input Cost Per Second
     */
    input_cost_per_second?: number | null;
    /**
     * Output Cost Per Second
     */
    output_cost_per_second?: number | null;
    /**
     * Input Cost Per Pixel
     */
    input_cost_per_pixel?: number | null;
    /**
     * Output Cost Per Pixel
     */
    output_cost_per_pixel?: number | null;
    /**
     * Api Key
     */
    api_key?: string | null;
    /**
     * Api Base
     */
    api_base?: string | null;
    /**
     * Api Version
     */
    api_version?: string | null;
    /**
     * Vertex Project
     */
    vertex_project?: string | null;
    /**
     * Vertex Location
     */
    vertex_location?: string | null;
    /**
     * Vertex Credentials
     */
    vertex_credentials?: {
        [key: string]: unknown;
    } | string | null;
    /**
     * Region Name
     */
    region_name?: string | null;
    /**
     * Aws Access Key Id
     */
    aws_access_key_id?: string | null;
    /**
     * Aws Secret Access Key
     */
    aws_secret_access_key?: string | null;
    /**
     * Aws Region Name
     */
    aws_region_name?: string | null;
    /**
     * Watsonx Region Name
     */
    watsonx_region_name?: string | null;
    /**
     * Custom Llm Provider
     */
    custom_llm_provider?: string | null;
    /**
     * Tpm
     */
    tpm?: number | null;
    /**
     * Rpm
     */
    rpm?: number | null;
    /**
     * Timeout
     */
    timeout?: number | string | null;
    /**
     * Stream Timeout
     */
    stream_timeout?: number | string | null;
    /**
     * Max Retries
     */
    max_retries?: number | null;
    /**
     * Organization
     */
    organization?: string | null;
    /**
     * Configurable Clientside Auth Params
     */
    configurable_clientside_auth_params?: Array<string | ConfigurableClientsideParamsCustomAuth> | null;
    /**
     * Litellm Credential Name
     */
    litellm_credential_name?: string | null;
    /**
     * Litellm Trace Id
     */
    litellm_trace_id?: string | null;
    /**
     * Max File Size Mb
     */
    max_file_size_mb?: number | null;
    /**
     * Max Budget
     */
    max_budget?: number | null;
    /**
     * Budget Duration
     */
    budget_duration?: string | null;
    /**
     * Use In Pass Through
     */
    use_in_pass_through?: boolean | null;
    /**
     * Merge Reasoning Content In Choices
     */
    merge_reasoning_content_in_choices?: boolean | null;
    /**
     * Model Info
     */
    model_info?: {
        [key: string]: unknown;
    } | null;
    /**
     * Model
     */
    model?: string | null;
    [key: string]: unknown | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (number | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | ({
        [key: string]: unknown;
    } | string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (number | null) | (number | null) | (number | string | null) | (number | string | null) | (number | null) | (string | null) | (Array<string | ConfigurableClientsideParamsCustomAuth> | null) | (string | null) | (string | null) | (number | null) | (number | null) | (string | null) | (boolean | null) | (boolean | null) | ({
        [key: string]: unknown;
    } | null) | (string | null) | undefined;
};

export type ModelListModelsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Return Wildcard Routes
         */
        return_wildcard_routes?: boolean | null;
        /**
         * Team Id
         */
        team_id?: string | null;
    };
    url: '/models';
};

export type ModelListModelsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModelListModelsGetError = ModelListModelsGetErrors[keyof ModelListModelsGetErrors];

export type ModelListModelsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ModelListV1ModelsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Return Wildcard Routes
         */
        return_wildcard_routes?: boolean | null;
        /**
         * Team Id
         */
        team_id?: string | null;
    };
    url: '/v1/models';
};

export type ModelListV1ModelsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModelListV1ModelsGetError = ModelListV1ModelsGetErrors[keyof ModelListV1ModelsGetErrors];

export type ModelListV1ModelsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ChatCompletionOpenaiDeploymentsModelChatCompletionsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/openai/deployments/{model}/chat/completions';
};

export type ChatCompletionOpenaiDeploymentsModelChatCompletionsPostErrors = {
    /**
     * ContentPolicyViolationError
     */
    400: ErrorResponse;
    /**
     * AuthenticationError
     */
    401: ErrorResponse;
    /**
     * PermissionDeniedError
     */
    403: ErrorResponse;
    /**
     * NotFoundError
     */
    404: ErrorResponse;
    /**
     * Timeout
     */
    408: ErrorResponse;
    /**
     * UnprocessableEntityError
     */
    422: ErrorResponse;
    /**
     * RateLimitError
     */
    429: ErrorResponse;
    /**
     * JSONSchemaValidationError
     */
    500: ErrorResponse;
    /**
     * APIConnectionError
     */
    503: ErrorResponse;
};

export type ChatCompletionOpenaiDeploymentsModelChatCompletionsPostError = ChatCompletionOpenaiDeploymentsModelChatCompletionsPostErrors[keyof ChatCompletionOpenaiDeploymentsModelChatCompletionsPostErrors];

export type ChatCompletionOpenaiDeploymentsModelChatCompletionsPostResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type ChatCompletionEnginesModelChatCompletionsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/engines/{model}/chat/completions';
};

export type ChatCompletionEnginesModelChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatCompletionEnginesModelChatCompletionsPostError = ChatCompletionEnginesModelChatCompletionsPostErrors[keyof ChatCompletionEnginesModelChatCompletionsPostErrors];

export type ChatCompletionEnginesModelChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ChatCompletionChatCompletionsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/chat/completions';
};

export type ChatCompletionChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatCompletionChatCompletionsPostError = ChatCompletionChatCompletionsPostErrors[keyof ChatCompletionChatCompletionsPostErrors];

export type ChatCompletionChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ChatCompletionV1ChatCompletionsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/v1/chat/completions';
};

export type ChatCompletionV1ChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatCompletionV1ChatCompletionsPostError = ChatCompletionV1ChatCompletionsPostErrors[keyof ChatCompletionV1ChatCompletionsPostErrors];

export type ChatCompletionV1ChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompletionOpenaiDeploymentsModelCompletionsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/openai/deployments/{model}/completions';
};

export type CompletionOpenaiDeploymentsModelCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompletionOpenaiDeploymentsModelCompletionsPostError = CompletionOpenaiDeploymentsModelCompletionsPostErrors[keyof CompletionOpenaiDeploymentsModelCompletionsPostErrors];

export type CompletionOpenaiDeploymentsModelCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompletionEnginesModelCompletionsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/engines/{model}/completions';
};

export type CompletionEnginesModelCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompletionEnginesModelCompletionsPostError = CompletionEnginesModelCompletionsPostErrors[keyof CompletionEnginesModelCompletionsPostErrors];

export type CompletionEnginesModelCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompletionCompletionsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/completions';
};

export type CompletionCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompletionCompletionsPostError = CompletionCompletionsPostErrors[keyof CompletionCompletionsPostErrors];

export type CompletionCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompletionV1CompletionsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/v1/completions';
};

export type CompletionV1CompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompletionV1CompletionsPostError = CompletionV1CompletionsPostErrors[keyof CompletionV1CompletionsPostErrors];

export type CompletionV1CompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EmbeddingsOpenaiDeploymentsModelEmbeddingsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/openai/deployments/{model}/embeddings';
};

export type EmbeddingsOpenaiDeploymentsModelEmbeddingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EmbeddingsOpenaiDeploymentsModelEmbeddingsPostError = EmbeddingsOpenaiDeploymentsModelEmbeddingsPostErrors[keyof EmbeddingsOpenaiDeploymentsModelEmbeddingsPostErrors];

export type EmbeddingsOpenaiDeploymentsModelEmbeddingsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EmbeddingsEnginesModelEmbeddingsPostData = {
    body?: never;
    path: {
        /**
         * Model
         */
        model: string | null;
    };
    query?: never;
    url: '/engines/{model}/embeddings';
};

export type EmbeddingsEnginesModelEmbeddingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EmbeddingsEnginesModelEmbeddingsPostError = EmbeddingsEnginesModelEmbeddingsPostErrors[keyof EmbeddingsEnginesModelEmbeddingsPostErrors];

export type EmbeddingsEnginesModelEmbeddingsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EmbeddingsEmbeddingsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/embeddings';
};

export type EmbeddingsEmbeddingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EmbeddingsEmbeddingsPostError = EmbeddingsEmbeddingsPostErrors[keyof EmbeddingsEmbeddingsPostErrors];

export type EmbeddingsEmbeddingsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EmbeddingsV1EmbeddingsPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         */
        model?: string | null;
    };
    url: '/v1/embeddings';
};

export type EmbeddingsV1EmbeddingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EmbeddingsV1EmbeddingsPostError = EmbeddingsV1EmbeddingsPostErrors[keyof EmbeddingsV1EmbeddingsPostErrors];

export type EmbeddingsV1EmbeddingsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ImageGenerationImagesGenerationsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/images/generations';
};

export type ImageGenerationImagesGenerationsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ImageGenerationV1ImagesGenerationsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/images/generations';
};

export type ImageGenerationV1ImagesGenerationsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AudioSpeechAudioSpeechPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/audio/speech';
};

export type AudioSpeechAudioSpeechPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AudioSpeechV1AudioSpeechPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/audio/speech';
};

export type AudioSpeechV1AudioSpeechPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AudioTranscriptionsAudioTranscriptionsPostData = {
    body: BodyAudioTranscriptionsAudioTranscriptionsPost;
    path?: never;
    query?: never;
    url: '/audio/transcriptions';
};

export type AudioTranscriptionsAudioTranscriptionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AudioTranscriptionsAudioTranscriptionsPostError = AudioTranscriptionsAudioTranscriptionsPostErrors[keyof AudioTranscriptionsAudioTranscriptionsPostErrors];

export type AudioTranscriptionsAudioTranscriptionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AudioTranscriptionsV1AudioTranscriptionsPostData = {
    body: BodyAudioTranscriptionsV1AudioTranscriptionsPost;
    path?: never;
    query?: never;
    url: '/v1/audio/transcriptions';
};

export type AudioTranscriptionsV1AudioTranscriptionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AudioTranscriptionsV1AudioTranscriptionsPostError = AudioTranscriptionsV1AudioTranscriptionsPostErrors[keyof AudioTranscriptionsV1AudioTranscriptionsPostErrors];

export type AudioTranscriptionsV1AudioTranscriptionsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAssistantsAssistantsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/assistants';
};

export type GetAssistantsAssistantsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateAssistantAssistantsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/assistants';
};

export type CreateAssistantAssistantsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAssistantsV1AssistantsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/assistants';
};

export type GetAssistantsV1AssistantsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateAssistantV1AssistantsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/assistants';
};

export type CreateAssistantV1AssistantsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteAssistantAssistantsAssistantIdDeleteData = {
    body?: never;
    path: {
        /**
         * Assistant Id
         */
        assistant_id: string;
    };
    query?: never;
    url: '/assistants/{assistant_id}';
};

export type DeleteAssistantAssistantsAssistantIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAssistantAssistantsAssistantIdDeleteError = DeleteAssistantAssistantsAssistantIdDeleteErrors[keyof DeleteAssistantAssistantsAssistantIdDeleteErrors];

export type DeleteAssistantAssistantsAssistantIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteAssistantV1AssistantsAssistantIdDeleteData = {
    body?: never;
    path: {
        /**
         * Assistant Id
         */
        assistant_id: string;
    };
    query?: never;
    url: '/v1/assistants/{assistant_id}';
};

export type DeleteAssistantV1AssistantsAssistantIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAssistantV1AssistantsAssistantIdDeleteError = DeleteAssistantV1AssistantsAssistantIdDeleteErrors[keyof DeleteAssistantV1AssistantsAssistantIdDeleteErrors];

export type DeleteAssistantV1AssistantsAssistantIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateThreadsThreadsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/threads';
};

export type CreateThreadsThreadsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateThreadsV1ThreadsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/threads';
};

export type CreateThreadsV1ThreadsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetThreadThreadsThreadIdGetData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/threads/{thread_id}';
};

export type GetThreadThreadsThreadIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetThreadThreadsThreadIdGetError = GetThreadThreadsThreadIdGetErrors[keyof GetThreadThreadsThreadIdGetErrors];

export type GetThreadThreadsThreadIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetThreadV1ThreadsThreadIdGetData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/v1/threads/{thread_id}';
};

export type GetThreadV1ThreadsThreadIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetThreadV1ThreadsThreadIdGetError = GetThreadV1ThreadsThreadIdGetErrors[keyof GetThreadV1ThreadsThreadIdGetErrors];

export type GetThreadV1ThreadsThreadIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMessagesThreadsThreadIdMessagesGetData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/threads/{thread_id}/messages';
};

export type GetMessagesThreadsThreadIdMessagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMessagesThreadsThreadIdMessagesGetError = GetMessagesThreadsThreadIdMessagesGetErrors[keyof GetMessagesThreadsThreadIdMessagesGetErrors];

export type GetMessagesThreadsThreadIdMessagesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddMessagesThreadsThreadIdMessagesPostData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/threads/{thread_id}/messages';
};

export type AddMessagesThreadsThreadIdMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMessagesThreadsThreadIdMessagesPostError = AddMessagesThreadsThreadIdMessagesPostErrors[keyof AddMessagesThreadsThreadIdMessagesPostErrors];

export type AddMessagesThreadsThreadIdMessagesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMessagesV1ThreadsThreadIdMessagesGetData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/v1/threads/{thread_id}/messages';
};

export type GetMessagesV1ThreadsThreadIdMessagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMessagesV1ThreadsThreadIdMessagesGetError = GetMessagesV1ThreadsThreadIdMessagesGetErrors[keyof GetMessagesV1ThreadsThreadIdMessagesGetErrors];

export type GetMessagesV1ThreadsThreadIdMessagesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddMessagesV1ThreadsThreadIdMessagesPostData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/v1/threads/{thread_id}/messages';
};

export type AddMessagesV1ThreadsThreadIdMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMessagesV1ThreadsThreadIdMessagesPostError = AddMessagesV1ThreadsThreadIdMessagesPostErrors[keyof AddMessagesV1ThreadsThreadIdMessagesPostErrors];

export type AddMessagesV1ThreadsThreadIdMessagesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RunThreadThreadsThreadIdRunsPostData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/threads/{thread_id}/runs';
};

export type RunThreadThreadsThreadIdRunsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunThreadThreadsThreadIdRunsPostError = RunThreadThreadsThreadIdRunsPostErrors[keyof RunThreadThreadsThreadIdRunsPostErrors];

export type RunThreadThreadsThreadIdRunsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RunThreadV1ThreadsThreadIdRunsPostData = {
    body?: never;
    path: {
        /**
         * Thread Id
         */
        thread_id: string;
    };
    query?: never;
    url: '/v1/threads/{thread_id}/runs';
};

export type RunThreadV1ThreadsThreadIdRunsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunThreadV1ThreadsThreadIdRunsPostError = RunThreadV1ThreadsThreadIdRunsPostErrors[keyof RunThreadV1ThreadsThreadIdRunsPostErrors];

export type RunThreadV1ThreadsThreadIdRunsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ModerationsModerationsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/moderations';
};

export type ModerationsModerationsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ModerationsV1ModerationsPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/moderations';
};

export type ModerationsV1ModerationsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TokenCounterUtilsTokenCounterPostData = {
    body: TokenCountRequest;
    path?: never;
    query?: never;
    url: '/utils/token_counter';
};

export type TokenCounterUtilsTokenCounterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TokenCounterUtilsTokenCounterPostError = TokenCounterUtilsTokenCounterPostErrors[keyof TokenCounterUtilsTokenCounterPostErrors];

export type TokenCounterUtilsTokenCounterPostResponses = {
    /**
     * Successful Response
     */
    200: TokenCountResponse;
};

export type TokenCounterUtilsTokenCounterPostResponse = TokenCounterUtilsTokenCounterPostResponses[keyof TokenCounterUtilsTokenCounterPostResponses];

export type SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Model
         */
        model: string;
    };
    url: '/utils/supported_openai_params';
};

export type SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetError = SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetErrors[keyof SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetErrors];

export type SupportedOpenaiParamsUtilsSupportedOpenaiParamsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TransformRequestUtilsTransformRequestPostData = {
    body: TransformRequestBody;
    path?: never;
    query?: never;
    url: '/utils/transform_request';
};

export type TransformRequestUtilsTransformRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TransformRequestUtilsTransformRequestPostError = TransformRequestUtilsTransformRequestPostErrors[keyof TransformRequestUtilsTransformRequestPostErrors];

export type TransformRequestUtilsTransformRequestPostResponses = {
    /**
     * Successful Response
     */
    200: RawRequestTypedDict;
};

export type TransformRequestUtilsTransformRequestPostResponse = TransformRequestUtilsTransformRequestPostResponses[keyof TransformRequestUtilsTransformRequestPostResponses];

export type ModelInfoV1V1ModelInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Litellm Model Id
         */
        litellm_model_id?: string | null;
    };
    url: '/v1/model/info';
};

export type ModelInfoV1V1ModelInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModelInfoV1V1ModelInfoGetError = ModelInfoV1V1ModelInfoGetErrors[keyof ModelInfoV1V1ModelInfoGetErrors];

export type ModelInfoV1V1ModelInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ModelInfoV1ModelInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Litellm Model Id
         */
        litellm_model_id?: string | null;
    };
    url: '/model/info';
};

export type ModelInfoV1ModelInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModelInfoV1ModelInfoGetError = ModelInfoV1ModelInfoGetErrors[keyof ModelInfoV1ModelInfoGetErrors];

export type ModelInfoV1ModelInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ModelGroupInfoModelGroupInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model Group
         */
        model_group?: string | null;
    };
    url: '/model_group/info';
};

export type ModelGroupInfoModelGroupInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ModelGroupInfoModelGroupInfoGetError = ModelGroupInfoModelGroupInfoGetErrors[keyof ModelGroupInfoModelGroupInfoGetErrors];

export type ModelGroupInfoModelGroupInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HomeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type HomeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetRoutesRoutesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/routes';
};

export type GetRoutesRoutesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResponsesApiResponsesPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/responses';
};

export type ResponsesApiResponsesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResponsesApiV1ResponsesPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/responses';
};

export type ResponsesApiV1ResponsesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteResponseResponsesResponseIdDeleteData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/responses/{response_id}';
};

export type DeleteResponseResponsesResponseIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteResponseResponsesResponseIdDeleteError = DeleteResponseResponsesResponseIdDeleteErrors[keyof DeleteResponseResponsesResponseIdDeleteErrors];

export type DeleteResponseResponsesResponseIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetResponseResponsesResponseIdGetData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/responses/{response_id}';
};

export type GetResponseResponsesResponseIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetResponseResponsesResponseIdGetError = GetResponseResponsesResponseIdGetErrors[keyof GetResponseResponsesResponseIdGetErrors];

export type GetResponseResponsesResponseIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteResponseV1ResponsesResponseIdDeleteData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/v1/responses/{response_id}';
};

export type DeleteResponseV1ResponsesResponseIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteResponseV1ResponsesResponseIdDeleteError = DeleteResponseV1ResponsesResponseIdDeleteErrors[keyof DeleteResponseV1ResponsesResponseIdDeleteErrors];

export type DeleteResponseV1ResponsesResponseIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetResponseV1ResponsesResponseIdGetData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/v1/responses/{response_id}';
};

export type GetResponseV1ResponsesResponseIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetResponseV1ResponsesResponseIdGetError = GetResponseV1ResponsesResponseIdGetErrors[keyof GetResponseV1ResponsesResponseIdGetErrors];

export type GetResponseV1ResponsesResponseIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetResponseInputItemsResponsesResponseIdInputItemsGetData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/responses/{response_id}/input_items';
};

export type GetResponseInputItemsResponsesResponseIdInputItemsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetResponseInputItemsResponsesResponseIdInputItemsGetError = GetResponseInputItemsResponsesResponseIdInputItemsGetErrors[keyof GetResponseInputItemsResponsesResponseIdInputItemsGetErrors];

export type GetResponseInputItemsResponsesResponseIdInputItemsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetResponseInputItemsV1ResponsesResponseIdInputItemsGetData = {
    body?: never;
    path: {
        /**
         * Response Id
         */
        response_id: string;
    };
    query?: never;
    url: '/v1/responses/{response_id}/input_items';
};

export type GetResponseInputItemsV1ResponsesResponseIdInputItemsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetResponseInputItemsV1ResponsesResponseIdInputItemsGetError = GetResponseInputItemsV1ResponsesResponseIdInputItemsGetErrors[keyof GetResponseInputItemsV1ResponsesResponseIdInputItemsGetErrors];

export type GetResponseInputItemsV1ResponsesResponseIdInputItemsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListBatchesBatchesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * After
         */
        after?: string | null;
    };
    url: '/batches';
};

export type ListBatchesBatchesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListBatchesBatchesGetError = ListBatchesBatchesGetErrors[keyof ListBatchesBatchesGetErrors];

export type ListBatchesBatchesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateBatchBatchesPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/batches';
};

export type CreateBatchBatchesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBatchBatchesPostError = CreateBatchBatchesPostErrors[keyof CreateBatchBatchesPostErrors];

export type CreateBatchBatchesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListBatchesV1BatchesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * After
         */
        after?: string | null;
    };
    url: '/v1/batches';
};

export type ListBatchesV1BatchesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListBatchesV1BatchesGetError = ListBatchesV1BatchesGetErrors[keyof ListBatchesV1BatchesGetErrors];

export type ListBatchesV1BatchesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateBatchV1BatchesPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/batches';
};

export type CreateBatchV1BatchesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBatchV1BatchesPostError = CreateBatchV1BatchesPostErrors[keyof CreateBatchV1BatchesPostErrors];

export type CreateBatchV1BatchesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListBatchesProviderV1BatchesGetData = {
    body?: never;
    path: {
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * After
         */
        after?: string | null;
    };
    url: '/{provider}/v1/batches';
};

export type ListBatchesProviderV1BatchesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListBatchesProviderV1BatchesGetError = ListBatchesProviderV1BatchesGetErrors[keyof ListBatchesProviderV1BatchesGetErrors];

export type ListBatchesProviderV1BatchesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateBatchProviderV1BatchesPostData = {
    body?: never;
    path: {
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/batches';
};

export type CreateBatchProviderV1BatchesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBatchProviderV1BatchesPostError = CreateBatchProviderV1BatchesPostErrors[keyof CreateBatchProviderV1BatchesPostErrors];

export type CreateBatchProviderV1BatchesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RetrieveBatchBatchesBatchIdGetData = {
    body?: never;
    path: {
        /**
         * Batch ID to retrieve
         * The ID of the batch to retrieve
         */
        batch_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/batches/{batch_id}';
};

export type RetrieveBatchBatchesBatchIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetrieveBatchBatchesBatchIdGetError = RetrieveBatchBatchesBatchIdGetErrors[keyof RetrieveBatchBatchesBatchIdGetErrors];

export type RetrieveBatchBatchesBatchIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RetrieveBatchV1BatchesBatchIdGetData = {
    body?: never;
    path: {
        /**
         * Batch ID to retrieve
         * The ID of the batch to retrieve
         */
        batch_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/batches/{batch_id}';
};

export type RetrieveBatchV1BatchesBatchIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetrieveBatchV1BatchesBatchIdGetError = RetrieveBatchV1BatchesBatchIdGetErrors[keyof RetrieveBatchV1BatchesBatchIdGetErrors];

export type RetrieveBatchV1BatchesBatchIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RetrieveBatchProviderV1BatchesBatchIdGetData = {
    body?: never;
    path: {
        /**
         * Provider
         */
        provider: string | null;
        /**
         * Batch ID to retrieve
         * The ID of the batch to retrieve
         */
        batch_id: string;
    };
    query?: never;
    url: '/{provider}/v1/batches/{batch_id}';
};

export type RetrieveBatchProviderV1BatchesBatchIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetrieveBatchProviderV1BatchesBatchIdGetError = RetrieveBatchProviderV1BatchesBatchIdGetErrors[keyof RetrieveBatchProviderV1BatchesBatchIdGetErrors];

export type RetrieveBatchProviderV1BatchesBatchIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelBatchBatchesBatchIdCancelPostData = {
    body?: never;
    path: {
        /**
         * Batch Id
         */
        batch_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/batches/{batch_id}/cancel';
};

export type CancelBatchBatchesBatchIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelBatchBatchesBatchIdCancelPostError = CancelBatchBatchesBatchIdCancelPostErrors[keyof CancelBatchBatchesBatchIdCancelPostErrors];

export type CancelBatchBatchesBatchIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelBatchV1BatchesBatchIdCancelPostData = {
    body?: never;
    path: {
        /**
         * Batch Id
         */
        batch_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/batches/{batch_id}/cancel';
};

export type CancelBatchV1BatchesBatchIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelBatchV1BatchesBatchIdCancelPostError = CancelBatchV1BatchesBatchIdCancelPostErrors[keyof CancelBatchV1BatchesBatchIdCancelPostErrors];

export type CancelBatchV1BatchesBatchIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelBatchProviderV1BatchesBatchIdCancelPostData = {
    body?: never;
    path: {
        /**
         * Batch Id
         */
        batch_id: string;
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/batches/{batch_id}/cancel';
};

export type CancelBatchProviderV1BatchesBatchIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelBatchProviderV1BatchesBatchIdCancelPostError = CancelBatchProviderV1BatchesBatchIdCancelPostErrors[keyof CancelBatchProviderV1BatchesBatchIdCancelPostErrors];

export type CancelBatchProviderV1BatchesBatchIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RerankRerankPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/rerank';
};

export type RerankRerankPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RerankV1RerankPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/rerank';
};

export type RerankV1RerankPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RerankV2RerankPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v2/rerank';
};

export type RerankV2RerankPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFineTuningJobsFineTuningJobsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Custom Llm Provider
         */
        custom_llm_provider: 'openai' | 'azure';
        /**
         * After
         */
        after?: string | null;
        /**
         * Limit
         */
        limit?: number | null;
    };
    url: '/fine_tuning/jobs';
};

export type ListFineTuningJobsFineTuningJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFineTuningJobsFineTuningJobsGetError = ListFineTuningJobsFineTuningJobsGetErrors[keyof ListFineTuningJobsFineTuningJobsGetErrors];

export type ListFineTuningJobsFineTuningJobsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateFineTuningJobFineTuningJobsPostData = {
    body: LiteLlmFineTuningJobCreate;
    path?: never;
    query?: never;
    url: '/fine_tuning/jobs';
};

export type CreateFineTuningJobFineTuningJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFineTuningJobFineTuningJobsPostError = CreateFineTuningJobFineTuningJobsPostErrors[keyof CreateFineTuningJobFineTuningJobsPostErrors];

export type CreateFineTuningJobFineTuningJobsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFineTuningJobsV1FineTuningJobsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Custom Llm Provider
         */
        custom_llm_provider: 'openai' | 'azure';
        /**
         * After
         */
        after?: string | null;
        /**
         * Limit
         */
        limit?: number | null;
    };
    url: '/v1/fine_tuning/jobs';
};

export type ListFineTuningJobsV1FineTuningJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFineTuningJobsV1FineTuningJobsGetError = ListFineTuningJobsV1FineTuningJobsGetErrors[keyof ListFineTuningJobsV1FineTuningJobsGetErrors];

export type ListFineTuningJobsV1FineTuningJobsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateFineTuningJobV1FineTuningJobsPostData = {
    body: LiteLlmFineTuningJobCreate;
    path?: never;
    query?: never;
    url: '/v1/fine_tuning/jobs';
};

export type CreateFineTuningJobV1FineTuningJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFineTuningJobV1FineTuningJobsPostError = CreateFineTuningJobV1FineTuningJobsPostErrors[keyof CreateFineTuningJobV1FineTuningJobsPostErrors];

export type CreateFineTuningJobV1FineTuningJobsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetData = {
    body?: never;
    path: {
        /**
         * Fine Tuning Job Id
         */
        fine_tuning_job_id: string;
    };
    query: {
        /**
         * Custom Llm Provider
         */
        custom_llm_provider: 'openai' | 'azure';
    };
    url: '/fine_tuning/jobs/{fine_tuning_job_id}';
};

export type RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetError = RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetErrors[keyof RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetErrors];

export type RetrieveFineTuningJobFineTuningJobsFineTuningJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetData = {
    body?: never;
    path: {
        /**
         * Fine Tuning Job Id
         */
        fine_tuning_job_id: string;
    };
    query: {
        /**
         * Custom Llm Provider
         */
        custom_llm_provider: 'openai' | 'azure';
    };
    url: '/v1/fine_tuning/jobs/{fine_tuning_job_id}';
};

export type RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetError = RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetErrors[keyof RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetErrors];

export type RetrieveFineTuningJobV1FineTuningJobsFineTuningJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostData = {
    body?: never;
    path: {
        /**
         * Fine Tuning Job Id
         */
        fine_tuning_job_id: string;
    };
    query?: never;
    url: '/fine_tuning/jobs/{fine_tuning_job_id}/cancel';
};

export type CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostError = CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostErrors[keyof CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostErrors];

export type CancelFineTuningJobFineTuningJobsFineTuningJobIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostData = {
    body?: never;
    path: {
        /**
         * Fine Tuning Job Id
         */
        fine_tuning_job_id: string;
    };
    query?: never;
    url: '/v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel';
};

export type CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostError = CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostErrors[keyof CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostErrors];

export type CancelFineTuningJobV1FineTuningJobsFineTuningJobIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCredentialsCredentialsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/credentials';
};

export type GetCredentialsCredentialsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateCredentialCredentialsPostData = {
    body: CreateCredentialItem;
    path?: never;
    query?: never;
    url: '/credentials';
};

export type CreateCredentialCredentialsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCredentialCredentialsPostError = CreateCredentialCredentialsPostErrors[keyof CreateCredentialCredentialsPostErrors];

export type CreateCredentialCredentialsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCredentialCredentialsByModelModelIdGetData = {
    body?: never;
    path: {
        /**
         * Model Id
         */
        model_id: string | null;
    };
    query?: {
        /**
         * Credential Name
         */
        credential_name?: string | null;
    };
    url: '/credentials/by_model/{model_id}';
};

export type GetCredentialCredentialsByModelModelIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCredentialCredentialsByModelModelIdGetError = GetCredentialCredentialsByModelModelIdGetErrors[keyof GetCredentialCredentialsByModelModelIdGetErrors];

export type GetCredentialCredentialsByModelModelIdGetResponses = {
    /**
     * Successful Response
     */
    200: CredentialItem;
};

export type GetCredentialCredentialsByModelModelIdGetResponse = GetCredentialCredentialsByModelModelIdGetResponses[keyof GetCredentialCredentialsByModelModelIdGetResponses];

export type GetCredentialCredentialsByNameCredentialNameGetData = {
    body?: never;
    path: {
        /**
         * Credential Name
         */
        credential_name: string | null;
    };
    query?: {
        /**
         * Model Id
         */
        model_id?: string | null;
    };
    url: '/credentials/by_name/{credential_name}';
};

export type GetCredentialCredentialsByNameCredentialNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCredentialCredentialsByNameCredentialNameGetError = GetCredentialCredentialsByNameCredentialNameGetErrors[keyof GetCredentialCredentialsByNameCredentialNameGetErrors];

export type GetCredentialCredentialsByNameCredentialNameGetResponses = {
    /**
     * Successful Response
     */
    200: CredentialItem;
};

export type GetCredentialCredentialsByNameCredentialNameGetResponse = GetCredentialCredentialsByNameCredentialNameGetResponses[keyof GetCredentialCredentialsByNameCredentialNameGetResponses];

export type DeleteCredentialCredentialsCredentialNameDeleteData = {
    body?: never;
    path: {
        /**
         * Credential Name
         */
        credential_name: string;
    };
    query?: never;
    url: '/credentials/{credential_name}';
};

export type DeleteCredentialCredentialsCredentialNameDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCredentialCredentialsCredentialNameDeleteError = DeleteCredentialCredentialsCredentialNameDeleteErrors[keyof DeleteCredentialCredentialsCredentialNameDeleteErrors];

export type DeleteCredentialCredentialsCredentialNameDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateCredentialCredentialsCredentialNamePatchData = {
    body: CredentialItem;
    path: {
        /**
         * Credential Name
         */
        credential_name: string;
    };
    query?: never;
    url: '/credentials/{credential_name}';
};

export type UpdateCredentialCredentialsCredentialNamePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCredentialCredentialsCredentialNamePatchError = UpdateCredentialCredentialsCredentialNamePatchErrors[keyof UpdateCredentialCredentialsCredentialNamePatchErrors];

export type UpdateCredentialCredentialsCredentialNamePatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GeminiProxyRouteGeminiEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/gemini/{endpoint}';
};

export type GeminiProxyRouteGeminiEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GeminiProxyRouteGeminiEndpointGetError = GeminiProxyRouteGeminiEndpointGetErrors[keyof GeminiProxyRouteGeminiEndpointGetErrors];

export type GeminiProxyRouteGeminiEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GeminiProxyRouteGeminiEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/gemini/{endpoint}';
};

export type GeminiProxyRouteGeminiEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GeminiProxyRouteGeminiEndpointGet2Error = GeminiProxyRouteGeminiEndpointGet2Errors[keyof GeminiProxyRouteGeminiEndpointGet2Errors];

export type GeminiProxyRouteGeminiEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GeminiProxyRouteGeminiEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/gemini/{endpoint}';
};

export type GeminiProxyRouteGeminiEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GeminiProxyRouteGeminiEndpointGet3Error = GeminiProxyRouteGeminiEndpointGet3Errors[keyof GeminiProxyRouteGeminiEndpointGet3Errors];

export type GeminiProxyRouteGeminiEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GeminiProxyRouteGeminiEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/gemini/{endpoint}';
};

export type GeminiProxyRouteGeminiEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GeminiProxyRouteGeminiEndpointGet4Error = GeminiProxyRouteGeminiEndpointGet4Errors[keyof GeminiProxyRouteGeminiEndpointGet4Errors];

export type GeminiProxyRouteGeminiEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GeminiProxyRouteGeminiEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/gemini/{endpoint}';
};

export type GeminiProxyRouteGeminiEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GeminiProxyRouteGeminiEndpointGet5Error = GeminiProxyRouteGeminiEndpointGet5Errors[keyof GeminiProxyRouteGeminiEndpointGet5Errors];

export type GeminiProxyRouteGeminiEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CohereProxyRouteCohereEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/cohere/{endpoint}';
};

export type CohereProxyRouteCohereEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CohereProxyRouteCohereEndpointGetError = CohereProxyRouteCohereEndpointGetErrors[keyof CohereProxyRouteCohereEndpointGetErrors];

export type CohereProxyRouteCohereEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CohereProxyRouteCohereEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/cohere/{endpoint}';
};

export type CohereProxyRouteCohereEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CohereProxyRouteCohereEndpointGet2Error = CohereProxyRouteCohereEndpointGet2Errors[keyof CohereProxyRouteCohereEndpointGet2Errors];

export type CohereProxyRouteCohereEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CohereProxyRouteCohereEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/cohere/{endpoint}';
};

export type CohereProxyRouteCohereEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CohereProxyRouteCohereEndpointGet3Error = CohereProxyRouteCohereEndpointGet3Errors[keyof CohereProxyRouteCohereEndpointGet3Errors];

export type CohereProxyRouteCohereEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CohereProxyRouteCohereEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/cohere/{endpoint}';
};

export type CohereProxyRouteCohereEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CohereProxyRouteCohereEndpointGet4Error = CohereProxyRouteCohereEndpointGet4Errors[keyof CohereProxyRouteCohereEndpointGet4Errors];

export type CohereProxyRouteCohereEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CohereProxyRouteCohereEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/cohere/{endpoint}';
};

export type CohereProxyRouteCohereEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CohereProxyRouteCohereEndpointGet5Error = CohereProxyRouteCohereEndpointGet5Errors[keyof CohereProxyRouteCohereEndpointGet5Errors];

export type CohereProxyRouteCohereEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VllmProxyRouteVllmEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vllm/{endpoint}';
};

export type VllmProxyRouteVllmEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VllmProxyRouteVllmEndpointGetError = VllmProxyRouteVllmEndpointGetErrors[keyof VllmProxyRouteVllmEndpointGetErrors];

export type VllmProxyRouteVllmEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VllmProxyRouteVllmEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vllm/{endpoint}';
};

export type VllmProxyRouteVllmEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VllmProxyRouteVllmEndpointGet2Error = VllmProxyRouteVllmEndpointGet2Errors[keyof VllmProxyRouteVllmEndpointGet2Errors];

export type VllmProxyRouteVllmEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VllmProxyRouteVllmEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vllm/{endpoint}';
};

export type VllmProxyRouteVllmEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VllmProxyRouteVllmEndpointGet3Error = VllmProxyRouteVllmEndpointGet3Errors[keyof VllmProxyRouteVllmEndpointGet3Errors];

export type VllmProxyRouteVllmEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VllmProxyRouteVllmEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vllm/{endpoint}';
};

export type VllmProxyRouteVllmEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VllmProxyRouteVllmEndpointGet4Error = VllmProxyRouteVllmEndpointGet4Errors[keyof VllmProxyRouteVllmEndpointGet4Errors];

export type VllmProxyRouteVllmEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VllmProxyRouteVllmEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vllm/{endpoint}';
};

export type VllmProxyRouteVllmEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VllmProxyRouteVllmEndpointGet5Error = VllmProxyRouteVllmEndpointGet5Errors[keyof VllmProxyRouteVllmEndpointGet5Errors];

export type VllmProxyRouteVllmEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MistralProxyRouteMistralEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/mistral/{endpoint}';
};

export type MistralProxyRouteMistralEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MistralProxyRouteMistralEndpointGetError = MistralProxyRouteMistralEndpointGetErrors[keyof MistralProxyRouteMistralEndpointGetErrors];

export type MistralProxyRouteMistralEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MistralProxyRouteMistralEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/mistral/{endpoint}';
};

export type MistralProxyRouteMistralEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MistralProxyRouteMistralEndpointGet2Error = MistralProxyRouteMistralEndpointGet2Errors[keyof MistralProxyRouteMistralEndpointGet2Errors];

export type MistralProxyRouteMistralEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MistralProxyRouteMistralEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/mistral/{endpoint}';
};

export type MistralProxyRouteMistralEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MistralProxyRouteMistralEndpointGet3Error = MistralProxyRouteMistralEndpointGet3Errors[keyof MistralProxyRouteMistralEndpointGet3Errors];

export type MistralProxyRouteMistralEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MistralProxyRouteMistralEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/mistral/{endpoint}';
};

export type MistralProxyRouteMistralEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MistralProxyRouteMistralEndpointGet4Error = MistralProxyRouteMistralEndpointGet4Errors[keyof MistralProxyRouteMistralEndpointGet4Errors];

export type MistralProxyRouteMistralEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type MistralProxyRouteMistralEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/mistral/{endpoint}';
};

export type MistralProxyRouteMistralEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type MistralProxyRouteMistralEndpointGet5Error = MistralProxyRouteMistralEndpointGet5Errors[keyof MistralProxyRouteMistralEndpointGet5Errors];

export type MistralProxyRouteMistralEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnthropicProxyRouteAnthropicEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/anthropic/{endpoint}';
};

export type AnthropicProxyRouteAnthropicEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnthropicProxyRouteAnthropicEndpointGetError = AnthropicProxyRouteAnthropicEndpointGetErrors[keyof AnthropicProxyRouteAnthropicEndpointGetErrors];

export type AnthropicProxyRouteAnthropicEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnthropicProxyRouteAnthropicEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/anthropic/{endpoint}';
};

export type AnthropicProxyRouteAnthropicEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnthropicProxyRouteAnthropicEndpointGet2Error = AnthropicProxyRouteAnthropicEndpointGet2Errors[keyof AnthropicProxyRouteAnthropicEndpointGet2Errors];

export type AnthropicProxyRouteAnthropicEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnthropicProxyRouteAnthropicEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/anthropic/{endpoint}';
};

export type AnthropicProxyRouteAnthropicEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnthropicProxyRouteAnthropicEndpointGet3Error = AnthropicProxyRouteAnthropicEndpointGet3Errors[keyof AnthropicProxyRouteAnthropicEndpointGet3Errors];

export type AnthropicProxyRouteAnthropicEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnthropicProxyRouteAnthropicEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/anthropic/{endpoint}';
};

export type AnthropicProxyRouteAnthropicEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnthropicProxyRouteAnthropicEndpointGet4Error = AnthropicProxyRouteAnthropicEndpointGet4Errors[keyof AnthropicProxyRouteAnthropicEndpointGet4Errors];

export type AnthropicProxyRouteAnthropicEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AnthropicProxyRouteAnthropicEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/anthropic/{endpoint}';
};

export type AnthropicProxyRouteAnthropicEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnthropicProxyRouteAnthropicEndpointGet5Error = AnthropicProxyRouteAnthropicEndpointGet5Errors[keyof AnthropicProxyRouteAnthropicEndpointGet5Errors];

export type AnthropicProxyRouteAnthropicEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BedrockProxyRouteBedrockEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/bedrock/{endpoint}';
};

export type BedrockProxyRouteBedrockEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BedrockProxyRouteBedrockEndpointGetError = BedrockProxyRouteBedrockEndpointGetErrors[keyof BedrockProxyRouteBedrockEndpointGetErrors];

export type BedrockProxyRouteBedrockEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BedrockProxyRouteBedrockEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/bedrock/{endpoint}';
};

export type BedrockProxyRouteBedrockEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BedrockProxyRouteBedrockEndpointGet2Error = BedrockProxyRouteBedrockEndpointGet2Errors[keyof BedrockProxyRouteBedrockEndpointGet2Errors];

export type BedrockProxyRouteBedrockEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BedrockProxyRouteBedrockEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/bedrock/{endpoint}';
};

export type BedrockProxyRouteBedrockEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BedrockProxyRouteBedrockEndpointGet3Error = BedrockProxyRouteBedrockEndpointGet3Errors[keyof BedrockProxyRouteBedrockEndpointGet3Errors];

export type BedrockProxyRouteBedrockEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BedrockProxyRouteBedrockEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/bedrock/{endpoint}';
};

export type BedrockProxyRouteBedrockEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BedrockProxyRouteBedrockEndpointGet4Error = BedrockProxyRouteBedrockEndpointGet4Errors[keyof BedrockProxyRouteBedrockEndpointGet4Errors];

export type BedrockProxyRouteBedrockEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BedrockProxyRouteBedrockEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/bedrock/{endpoint}';
};

export type BedrockProxyRouteBedrockEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BedrockProxyRouteBedrockEndpointGet5Error = BedrockProxyRouteBedrockEndpointGet5Errors[keyof BedrockProxyRouteBedrockEndpointGet5Errors];

export type BedrockProxyRouteBedrockEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/eu.assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGetError = AssemblyaiProxyRouteEuAssemblyaiEndpointGetErrors[keyof AssemblyaiProxyRouteEuAssemblyaiEndpointGetErrors];

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/eu.assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Error = AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Errors[keyof AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Errors];

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/eu.assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Error = AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Errors[keyof AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Errors];

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/eu.assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Error = AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Errors[keyof AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Errors];

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/eu.assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Error = AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Errors[keyof AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Errors];

export type AssemblyaiProxyRouteEuAssemblyaiEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGetError = AssemblyaiProxyRouteAssemblyaiEndpointGetErrors[keyof AssemblyaiProxyRouteAssemblyaiEndpointGetErrors];

export type AssemblyaiProxyRouteAssemblyaiEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet2Error = AssemblyaiProxyRouteAssemblyaiEndpointGet2Errors[keyof AssemblyaiProxyRouteAssemblyaiEndpointGet2Errors];

export type AssemblyaiProxyRouteAssemblyaiEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet3Error = AssemblyaiProxyRouteAssemblyaiEndpointGet3Errors[keyof AssemblyaiProxyRouteAssemblyaiEndpointGet3Errors];

export type AssemblyaiProxyRouteAssemblyaiEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet4Error = AssemblyaiProxyRouteAssemblyaiEndpointGet4Errors[keyof AssemblyaiProxyRouteAssemblyaiEndpointGet4Errors];

export type AssemblyaiProxyRouteAssemblyaiEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/assemblyai/{endpoint}';
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssemblyaiProxyRouteAssemblyaiEndpointGet5Error = AssemblyaiProxyRouteAssemblyaiEndpointGet5Errors[keyof AssemblyaiProxyRouteAssemblyaiEndpointGet5Errors];

export type AssemblyaiProxyRouteAssemblyaiEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AzureProxyRouteAzureEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/azure/{endpoint}';
};

export type AzureProxyRouteAzureEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AzureProxyRouteAzureEndpointGetError = AzureProxyRouteAzureEndpointGetErrors[keyof AzureProxyRouteAzureEndpointGetErrors];

export type AzureProxyRouteAzureEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AzureProxyRouteAzureEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/azure/{endpoint}';
};

export type AzureProxyRouteAzureEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AzureProxyRouteAzureEndpointGet2Error = AzureProxyRouteAzureEndpointGet2Errors[keyof AzureProxyRouteAzureEndpointGet2Errors];

export type AzureProxyRouteAzureEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AzureProxyRouteAzureEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/azure/{endpoint}';
};

export type AzureProxyRouteAzureEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AzureProxyRouteAzureEndpointGet3Error = AzureProxyRouteAzureEndpointGet3Errors[keyof AzureProxyRouteAzureEndpointGet3Errors];

export type AzureProxyRouteAzureEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AzureProxyRouteAzureEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/azure/{endpoint}';
};

export type AzureProxyRouteAzureEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AzureProxyRouteAzureEndpointGet4Error = AzureProxyRouteAzureEndpointGet4Errors[keyof AzureProxyRouteAzureEndpointGet4Errors];

export type AzureProxyRouteAzureEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AzureProxyRouteAzureEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/azure/{endpoint}';
};

export type AzureProxyRouteAzureEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AzureProxyRouteAzureEndpointGet5Error = AzureProxyRouteAzureEndpointGet5Errors[keyof AzureProxyRouteAzureEndpointGet5Errors];

export type AzureProxyRouteAzureEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/discovery/{endpoint}';
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetError = VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetErrors[keyof VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetErrors];

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/discovery/{endpoint}';
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Error = VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Errors[keyof VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Errors];

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/discovery/{endpoint}';
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Error = VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Errors[keyof VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Errors];

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/discovery/{endpoint}';
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Error = VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Errors[keyof VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Errors];

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/discovery/{endpoint}';
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Error = VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Errors[keyof VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Errors];

export type VertexDiscoveryProxyRouteVertexAiDiscoveryEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexProxyRouteVertexAiEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/{endpoint}';
};

export type VertexProxyRouteVertexAiEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexProxyRouteVertexAiEndpointGetError = VertexProxyRouteVertexAiEndpointGetErrors[keyof VertexProxyRouteVertexAiEndpointGetErrors];

export type VertexProxyRouteVertexAiEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexProxyRouteVertexAiEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/{endpoint}';
};

export type VertexProxyRouteVertexAiEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexProxyRouteVertexAiEndpointGet2Error = VertexProxyRouteVertexAiEndpointGet2Errors[keyof VertexProxyRouteVertexAiEndpointGet2Errors];

export type VertexProxyRouteVertexAiEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexProxyRouteVertexAiEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/{endpoint}';
};

export type VertexProxyRouteVertexAiEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexProxyRouteVertexAiEndpointGet3Error = VertexProxyRouteVertexAiEndpointGet3Errors[keyof VertexProxyRouteVertexAiEndpointGet3Errors];

export type VertexProxyRouteVertexAiEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexProxyRouteVertexAiEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/{endpoint}';
};

export type VertexProxyRouteVertexAiEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexProxyRouteVertexAiEndpointGet4Error = VertexProxyRouteVertexAiEndpointGet4Errors[keyof VertexProxyRouteVertexAiEndpointGet4Errors];

export type VertexProxyRouteVertexAiEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VertexProxyRouteVertexAiEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/vertex_ai/{endpoint}';
};

export type VertexProxyRouteVertexAiEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VertexProxyRouteVertexAiEndpointGet5Error = VertexProxyRouteVertexAiEndpointGet5Errors[keyof VertexProxyRouteVertexAiEndpointGet5Errors];

export type VertexProxyRouteVertexAiEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OpenaiProxyRouteOpenaiEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/openai/{endpoint}';
};

export type OpenaiProxyRouteOpenaiEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OpenaiProxyRouteOpenaiEndpointGetError = OpenaiProxyRouteOpenaiEndpointGetErrors[keyof OpenaiProxyRouteOpenaiEndpointGetErrors];

export type OpenaiProxyRouteOpenaiEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OpenaiProxyRouteOpenaiEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/openai/{endpoint}';
};

export type OpenaiProxyRouteOpenaiEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OpenaiProxyRouteOpenaiEndpointGet2Error = OpenaiProxyRouteOpenaiEndpointGet2Errors[keyof OpenaiProxyRouteOpenaiEndpointGet2Errors];

export type OpenaiProxyRouteOpenaiEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OpenaiProxyRouteOpenaiEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/openai/{endpoint}';
};

export type OpenaiProxyRouteOpenaiEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OpenaiProxyRouteOpenaiEndpointGet3Error = OpenaiProxyRouteOpenaiEndpointGet3Errors[keyof OpenaiProxyRouteOpenaiEndpointGet3Errors];

export type OpenaiProxyRouteOpenaiEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OpenaiProxyRouteOpenaiEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/openai/{endpoint}';
};

export type OpenaiProxyRouteOpenaiEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OpenaiProxyRouteOpenaiEndpointGet4Error = OpenaiProxyRouteOpenaiEndpointGet4Errors[keyof OpenaiProxyRouteOpenaiEndpointGet4Errors];

export type OpenaiProxyRouteOpenaiEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OpenaiProxyRouteOpenaiEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/openai/{endpoint}';
};

export type OpenaiProxyRouteOpenaiEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OpenaiProxyRouteOpenaiEndpointGet5Error = OpenaiProxyRouteOpenaiEndpointGet5Errors[keyof OpenaiProxyRouteOpenaiEndpointGet5Errors];

export type OpenaiProxyRouteOpenaiEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HandleSseMcpGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcp/';
};

export type HandleSseMcpGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HandleMessagesMcpSseMessagesPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcp/sse/messages';
};

export type HandleMessagesMcpSseMessagesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListToolRestApiMcpToolsListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcp/tools/list';
};

export type ListToolRestApiMcpToolsListGetResponses = {
    /**
     * Response List Tool Rest Api Mcp Tools List Get
     * Successful Response
     */
    200: Array<ListMcpToolsRestApiResponseObject>;
};

export type ListToolRestApiMcpToolsListGetResponse = ListToolRestApiMcpToolsListGetResponses[keyof ListToolRestApiMcpToolsListGetResponses];

export type CallToolRestApiMcpToolsCallPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcp/tools/call';
};

export type CallToolRestApiMcpToolsCallPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LangfuseProxyRouteLangfuseEndpointGetData = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/langfuse/{endpoint}';
};

export type LangfuseProxyRouteLangfuseEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LangfuseProxyRouteLangfuseEndpointGetError = LangfuseProxyRouteLangfuseEndpointGetErrors[keyof LangfuseProxyRouteLangfuseEndpointGetErrors];

export type LangfuseProxyRouteLangfuseEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LangfuseProxyRouteLangfuseEndpointGet2Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/langfuse/{endpoint}';
};

export type LangfuseProxyRouteLangfuseEndpointGet2Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LangfuseProxyRouteLangfuseEndpointGet2Error = LangfuseProxyRouteLangfuseEndpointGet2Errors[keyof LangfuseProxyRouteLangfuseEndpointGet2Errors];

export type LangfuseProxyRouteLangfuseEndpointGet2Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LangfuseProxyRouteLangfuseEndpointGet3Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/langfuse/{endpoint}';
};

export type LangfuseProxyRouteLangfuseEndpointGet3Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LangfuseProxyRouteLangfuseEndpointGet3Error = LangfuseProxyRouteLangfuseEndpointGet3Errors[keyof LangfuseProxyRouteLangfuseEndpointGet3Errors];

export type LangfuseProxyRouteLangfuseEndpointGet3Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LangfuseProxyRouteLangfuseEndpointGet4Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/langfuse/{endpoint}';
};

export type LangfuseProxyRouteLangfuseEndpointGet4Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LangfuseProxyRouteLangfuseEndpointGet4Error = LangfuseProxyRouteLangfuseEndpointGet4Errors[keyof LangfuseProxyRouteLangfuseEndpointGet4Errors];

export type LangfuseProxyRouteLangfuseEndpointGet4Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LangfuseProxyRouteLangfuseEndpointGet5Data = {
    body?: never;
    path: {
        /**
         * Endpoint
         */
        endpoint: string;
    };
    query?: never;
    url: '/langfuse/{endpoint}';
};

export type LangfuseProxyRouteLangfuseEndpointGet5Errors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LangfuseProxyRouteLangfuseEndpointGet5Error = LangfuseProxyRouteLangfuseEndpointGet5Errors[keyof LangfuseProxyRouteLangfuseEndpointGet5Errors];

export type LangfuseProxyRouteLangfuseEndpointGet5Responses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeletePassThroughEndpointsConfigPassThroughEndpointDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    url: '/config/pass_through_endpoint';
};

export type DeletePassThroughEndpointsConfigPassThroughEndpointDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePassThroughEndpointsConfigPassThroughEndpointDeleteError = DeletePassThroughEndpointsConfigPassThroughEndpointDeleteErrors[keyof DeletePassThroughEndpointsConfigPassThroughEndpointDeleteErrors];

export type DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponses = {
    /**
     * Successful Response
     */
    200: PassThroughEndpointResponse;
};

export type DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponse = DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponses[keyof DeletePassThroughEndpointsConfigPassThroughEndpointDeleteResponses];

export type GetPassThroughEndpointsConfigPassThroughEndpointGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Endpoint Id
         */
        endpoint_id?: string | null;
    };
    url: '/config/pass_through_endpoint';
};

export type GetPassThroughEndpointsConfigPassThroughEndpointGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPassThroughEndpointsConfigPassThroughEndpointGetError = GetPassThroughEndpointsConfigPassThroughEndpointGetErrors[keyof GetPassThroughEndpointsConfigPassThroughEndpointGetErrors];

export type GetPassThroughEndpointsConfigPassThroughEndpointGetResponses = {
    /**
     * Successful Response
     */
    200: PassThroughEndpointResponse;
};

export type GetPassThroughEndpointsConfigPassThroughEndpointGetResponse = GetPassThroughEndpointsConfigPassThroughEndpointGetResponses[keyof GetPassThroughEndpointsConfigPassThroughEndpointGetResponses];

export type CreatePassThroughEndpointsConfigPassThroughEndpointPostData = {
    body: PassThroughGenericEndpoint;
    path?: never;
    query?: never;
    url: '/config/pass_through_endpoint';
};

export type CreatePassThroughEndpointsConfigPassThroughEndpointPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePassThroughEndpointsConfigPassThroughEndpointPostError = CreatePassThroughEndpointsConfigPassThroughEndpointPostErrors[keyof CreatePassThroughEndpointsConfigPassThroughEndpointPostErrors];

export type CreatePassThroughEndpointsConfigPassThroughEndpointPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostData = {
    body?: never;
    path: {
        /**
         * Endpoint Id
         */
        endpoint_id: string;
    };
    query?: never;
    url: '/config/pass_through_endpoint/{endpoint_id}';
};

export type UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostError = UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostErrors[keyof UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostErrors];

export type UpdatePassThroughEndpointsConfigPassThroughEndpointEndpointIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestEndpointTestGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test';
};

export type TestEndpointTestGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthServicesEndpointHealthServicesGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Service
         * Specify the service being hit.
         */
        service: ('slack_budget_alerts' | 'langfuse' | 'slack' | 'openmeter' | 'webhook' | 'email' | 'braintrust' | 'datadog') | string;
    };
    url: '/health/services';
};

export type HealthServicesEndpointHealthServicesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HealthServicesEndpointHealthServicesGetError = HealthServicesEndpointHealthServicesGetErrors[keyof HealthServicesEndpointHealthServicesGetErrors];

export type HealthServicesEndpointHealthServicesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthEndpointHealthGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model
         * Specify the model name (optional)
         */
        model?: string | null;
    };
    url: '/health';
};

export type HealthEndpointHealthGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HealthEndpointHealthGetError = HealthEndpointHealthGetErrors[keyof HealthEndpointHealthGetErrors];

export type HealthEndpointHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ActiveCallbacksActiveCallbacksGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/active/callbacks';
};

export type ActiveCallbacksActiveCallbacksGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ActiveCallbacksSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings';
};

export type ActiveCallbacksSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthReadinessHealthReadinessGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/readiness';
};

export type HealthReadinessHealthReadinessGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthReadinessOptionsHealthReadinessOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/readiness';
};

export type HealthReadinessOptionsHealthReadinessOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthLivelinessHealthLivenessGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/liveness';
};

export type HealthLivelinessHealthLivenessGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthLivelinessOptionsHealthLivenessOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/liveness';
};

export type HealthLivelinessOptionsHealthLivenessOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthLivelinessHealthLivelinessGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/liveliness';
};

export type HealthLivelinessHealthLivelinessGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthLivelinessOptionsHealthLivelinessOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/liveliness';
};

export type HealthLivelinessOptionsHealthLivelinessOptionsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestModelConnectionHealthTestConnectionPostData = {
    body?: BodyTestModelConnectionHealthTestConnectionPost;
    path?: never;
    query?: never;
    url: '/health/test_connection';
};

export type TestModelConnectionHealthTestConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TestModelConnectionHealthTestConnectionPostError = TestModelConnectionHealthTestConnectionPostErrors[keyof TestModelConnectionHealthTestConnectionPostErrors];

export type TestModelConnectionHealthTestConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenerateKeyFnKeyGeneratePostData = {
    body: GenerateKeyRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/key/generate';
};

export type GenerateKeyFnKeyGeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateKeyFnKeyGeneratePostError = GenerateKeyFnKeyGeneratePostErrors[keyof GenerateKeyFnKeyGeneratePostErrors];

export type GenerateKeyFnKeyGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: GenerateKeyResponse;
};

export type GenerateKeyFnKeyGeneratePostResponse = GenerateKeyFnKeyGeneratePostResponses[keyof GenerateKeyFnKeyGeneratePostResponses];

export type UpdateKeyFnKeyUpdatePostData = {
    body: UpdateKeyRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/key/update';
};

export type UpdateKeyFnKeyUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateKeyFnKeyUpdatePostError = UpdateKeyFnKeyUpdatePostErrors[keyof UpdateKeyFnKeyUpdatePostErrors];

export type UpdateKeyFnKeyUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteKeyFnKeyDeletePostData = {
    body: KeyRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/key/delete';
};

export type DeleteKeyFnKeyDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteKeyFnKeyDeletePostError = DeleteKeyFnKeyDeletePostErrors[keyof DeleteKeyFnKeyDeletePostErrors];

export type DeleteKeyFnKeyDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type InfoKeyFnKeyInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Key
         * Key in the request parameters
         */
        key?: string | null;
    };
    url: '/key/info';
};

export type InfoKeyFnKeyInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InfoKeyFnKeyInfoGetError = InfoKeyFnKeyInfoGetErrors[keyof InfoKeyFnKeyInfoGetErrors];

export type InfoKeyFnKeyInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegenerateKeyFnKeyRegeneratePostData = {
    /**
     * Data
     */
    body?: RegenerateKeyRequest | null;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: {
        /**
         * Key
         */
        key?: string | null;
    };
    url: '/key/regenerate';
};

export type RegenerateKeyFnKeyRegeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegenerateKeyFnKeyRegeneratePostError = RegenerateKeyFnKeyRegeneratePostErrors[keyof RegenerateKeyFnKeyRegeneratePostErrors];

export type RegenerateKeyFnKeyRegeneratePostResponses = {
    /**
     * Response Regenerate Key Fn Key Regenerate Post
     * Successful Response
     */
    200: GenerateKeyResponse | null;
};

export type RegenerateKeyFnKeyRegeneratePostResponse = RegenerateKeyFnKeyRegeneratePostResponses[keyof RegenerateKeyFnKeyRegeneratePostResponses];

export type RegenerateKeyFnKeyKeyRegeneratePostData = {
    /**
     * Data
     */
    body?: RegenerateKeyRequest | null;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path: {
        /**
         * Key
         */
        key: string | null;
    };
    query?: never;
    url: '/key/{key}/regenerate';
};

export type RegenerateKeyFnKeyKeyRegeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegenerateKeyFnKeyKeyRegeneratePostError = RegenerateKeyFnKeyKeyRegeneratePostErrors[keyof RegenerateKeyFnKeyKeyRegeneratePostErrors];

export type RegenerateKeyFnKeyKeyRegeneratePostResponses = {
    /**
     * Response Regenerate Key Fn Key  Key  Regenerate Post
     * Successful Response
     */
    200: GenerateKeyResponse | null;
};

export type RegenerateKeyFnKeyKeyRegeneratePostResponse = RegenerateKeyFnKeyKeyRegeneratePostResponses[keyof RegenerateKeyFnKeyKeyRegeneratePostResponses];

export type ListKeysKeyListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page
         * Page number
         */
        page?: number;
        /**
         * Size
         * Page size
         */
        size?: number;
        /**
         * User Id
         * Filter keys by user ID
         */
        user_id?: string | null;
        /**
         * Team Id
         * Filter keys by team ID
         */
        team_id?: string | null;
        /**
         * Organization Id
         * Filter keys by organization ID
         */
        organization_id?: string | null;
        /**
         * Key Hash
         * Filter keys by key hash
         */
        key_hash?: string | null;
        /**
         * Key Alias
         * Filter keys by key alias
         */
        key_alias?: string | null;
        /**
         * Return Full Object
         * Return full key object
         */
        return_full_object?: boolean;
        /**
         * Include Team Keys
         * Include all keys for teams that user is an admin of.
         */
        include_team_keys?: boolean;
        /**
         * Sort By
         * Column to sort by (e.g. 'user_id', 'created_at', 'spend')
         */
        sort_by?: string | null;
        /**
         * Sort Order
         * Sort order ('asc' or 'desc')
         */
        sort_order?: string;
    };
    url: '/key/list';
};

export type ListKeysKeyListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListKeysKeyListGetError = ListKeysKeyListGetErrors[keyof ListKeysKeyListGetErrors];

export type ListKeysKeyListGetResponses = {
    /**
     * Successful Response
     */
    200: KeyListResponseObject;
};

export type ListKeysKeyListGetResponse = ListKeysKeyListGetResponses[keyof ListKeysKeyListGetResponses];

export type BlockKeyKeyBlockPostData = {
    body: BlockKeyRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/key/block';
};

export type BlockKeyKeyBlockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BlockKeyKeyBlockPostError = BlockKeyKeyBlockPostErrors[keyof BlockKeyKeyBlockPostErrors];

export type BlockKeyKeyBlockPostResponses = {
    /**
     * Response Block Key Key Block Post
     * Successful Response
     */
    200: LiteLlmVerificationToken | null;
};

export type BlockKeyKeyBlockPostResponse = BlockKeyKeyBlockPostResponses[keyof BlockKeyKeyBlockPostResponses];

export type UnblockKeyKeyUnblockPostData = {
    body: BlockKeyRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/key/unblock';
};

export type UnblockKeyKeyUnblockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnblockKeyKeyUnblockPostError = UnblockKeyKeyUnblockPostErrors[keyof UnblockKeyKeyUnblockPostErrors];

export type UnblockKeyKeyUnblockPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type KeyHealthKeyHealthPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/key/health';
};

export type KeyHealthKeyHealthPostResponses = {
    /**
     * Successful Response
     */
    200: KeyHealthResponse;
};

export type KeyHealthKeyHealthPostResponse = KeyHealthKeyHealthPostResponses[keyof KeyHealthKeyHealthPostResponses];

export type NewUserUserNewPostData = {
    body: NewUserRequest;
    path?: never;
    query?: never;
    url: '/user/new';
};

export type NewUserUserNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewUserUserNewPostError = NewUserUserNewPostErrors[keyof NewUserUserNewPostErrors];

export type NewUserUserNewPostResponses = {
    /**
     * Successful Response
     */
    200: NewUserResponse;
};

export type NewUserUserNewPostResponse = NewUserUserNewPostResponses[keyof NewUserUserNewPostResponses];

export type UserInfoUserInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         * User ID in the request parameters
         */
        user_id?: string | null;
    };
    url: '/user/info';
};

export type UserInfoUserInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UserInfoUserInfoGetError = UserInfoUserInfoGetErrors[keyof UserInfoUserInfoGetErrors];

export type UserInfoUserInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UserUpdateUserUpdatePostData = {
    body: UpdateUserRequest;
    path?: never;
    query?: never;
    url: '/user/update';
};

export type UserUpdateUserUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UserUpdateUserUpdatePostError = UserUpdateUserUpdatePostErrors[keyof UserUpdateUserUpdatePostErrors];

export type UserUpdateUserUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUsersUserListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Role
         * Filter users by role
         */
        role?: string | null;
        /**
         * User Ids
         * Get list of users by user_ids
         */
        user_ids?: string | null;
        /**
         * Sso User Ids
         * Get list of users by sso_user_id
         */
        sso_user_ids?: string | null;
        /**
         * User Email
         * Filter users by partial email match
         */
        user_email?: string | null;
        /**
         * Team
         * Filter users by team id
         */
        team?: string | null;
        /**
         * Page
         * Page number
         */
        page?: number;
        /**
         * Page Size
         * Number of items per page
         */
        page_size?: number;
        /**
         * Sort By
         * Column to sort by (e.g. 'user_id', 'user_email', 'created_at', 'spend')
         */
        sort_by?: string | null;
        /**
         * Sort Order
         * Sort order ('asc' or 'desc')
         */
        sort_order?: string;
    };
    url: '/user/list';
};

export type GetUsersUserListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersUserListGetError = GetUsersUserListGetErrors[keyof GetUsersUserListGetErrors];

export type GetUsersUserListGetResponses = {
    /**
     * Successful Response
     */
    200: UserListResponse;
};

export type GetUsersUserListGetResponse = GetUsersUserListGetResponses[keyof GetUsersUserListGetResponses];

export type DeleteUserUserDeletePostData = {
    body: DeleteUserRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/user/delete';
};

export type DeleteUserUserDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUserDeletePostError = DeleteUserUserDeletePostErrors[keyof DeleteUserUserDeletePostErrors];

export type DeleteUserUserDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUserDailyActivityUserDailyActivityGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start Date
         * Start date in YYYY-MM-DD format
         */
        start_date?: string | null;
        /**
         * End Date
         * End date in YYYY-MM-DD format
         */
        end_date?: string | null;
        /**
         * Model
         * Filter by specific model
         */
        model?: string | null;
        /**
         * Api Key
         * Filter by specific API key
         */
        api_key?: string | null;
        /**
         * Page
         * Page number for pagination
         */
        page?: number;
        /**
         * Page Size
         * Items per page
         */
        page_size?: number;
    };
    url: '/user/daily/activity';
};

export type GetUserDailyActivityUserDailyActivityGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserDailyActivityUserDailyActivityGetError = GetUserDailyActivityUserDailyActivityGetErrors[keyof GetUserDailyActivityUserDailyActivityGetErrors];

export type GetUserDailyActivityUserDailyActivityGetResponses = {
    /**
     * Successful Response
     */
    200: SpendAnalyticsPaginatedResponse;
};

export type GetUserDailyActivityUserDailyActivityGetResponse = GetUserDailyActivityUserDailyActivityGetResponses[keyof GetUserDailyActivityUserDailyActivityGetResponses];

export type NewTeamTeamNewPostData = {
    body: NewTeamRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/team/new';
};

export type NewTeamTeamNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewTeamTeamNewPostError = NewTeamTeamNewPostErrors[keyof NewTeamTeamNewPostErrors];

export type NewTeamTeamNewPostResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmTeamTable;
};

export type NewTeamTeamNewPostResponse = NewTeamTeamNewPostResponses[keyof NewTeamTeamNewPostResponses];

export type UpdateTeamTeamUpdatePostData = {
    body: UpdateTeamRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/team/update';
};

export type UpdateTeamTeamUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTeamTeamUpdatePostError = UpdateTeamTeamUpdatePostErrors[keyof UpdateTeamTeamUpdatePostErrors];

export type UpdateTeamTeamUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamMemberAddTeamMemberAddPostData = {
    body: TeamMemberAddRequest;
    path?: never;
    query?: never;
    url: '/team/member_add';
};

export type TeamMemberAddTeamMemberAddPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamMemberAddTeamMemberAddPostError = TeamMemberAddTeamMemberAddPostErrors[keyof TeamMemberAddTeamMemberAddPostErrors];

export type TeamMemberAddTeamMemberAddPostResponses = {
    /**
     * Successful Response
     */
    200: TeamAddMemberResponse;
};

export type TeamMemberAddTeamMemberAddPostResponse = TeamMemberAddTeamMemberAddPostResponses[keyof TeamMemberAddTeamMemberAddPostResponses];

export type TeamMemberDeleteTeamMemberDeletePostData = {
    body: TeamMemberDeleteRequest;
    path?: never;
    query?: never;
    url: '/team/member_delete';
};

export type TeamMemberDeleteTeamMemberDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamMemberDeleteTeamMemberDeletePostError = TeamMemberDeleteTeamMemberDeletePostErrors[keyof TeamMemberDeleteTeamMemberDeletePostErrors];

export type TeamMemberDeleteTeamMemberDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamMemberUpdateTeamMemberUpdatePostData = {
    body: TeamMemberUpdateRequest;
    path?: never;
    query?: never;
    url: '/team/member_update';
};

export type TeamMemberUpdateTeamMemberUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamMemberUpdateTeamMemberUpdatePostError = TeamMemberUpdateTeamMemberUpdatePostErrors[keyof TeamMemberUpdateTeamMemberUpdatePostErrors];

export type TeamMemberUpdateTeamMemberUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: TeamMemberUpdateResponse;
};

export type TeamMemberUpdateTeamMemberUpdatePostResponse = TeamMemberUpdateTeamMemberUpdatePostResponses[keyof TeamMemberUpdateTeamMemberUpdatePostResponses];

export type DeleteTeamTeamDeletePostData = {
    body: DeleteTeamRequest;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path?: never;
    query?: never;
    url: '/team/delete';
};

export type DeleteTeamTeamDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTeamTeamDeletePostError = DeleteTeamTeamDeletePostErrors[keyof DeleteTeamTeamDeletePostErrors];

export type DeleteTeamTeamDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamInfoTeamInfoGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Team Id
         * Team ID in the request parameters
         */
        team_id?: string;
    };
    url: '/team/info';
};

export type TeamInfoTeamInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamInfoTeamInfoGetError = TeamInfoTeamInfoGetErrors[keyof TeamInfoTeamInfoGetErrors];

export type TeamInfoTeamInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BlockTeamTeamBlockPostData = {
    body: BlockTeamRequest;
    path?: never;
    query?: never;
    url: '/team/block';
};

export type BlockTeamTeamBlockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BlockTeamTeamBlockPostError = BlockTeamTeamBlockPostErrors[keyof BlockTeamTeamBlockPostErrors];

export type BlockTeamTeamBlockPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnblockTeamTeamUnblockPostData = {
    body: BlockTeamRequest;
    path?: never;
    query?: never;
    url: '/team/unblock';
};

export type UnblockTeamTeamUnblockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnblockTeamTeamUnblockPostError = UnblockTeamTeamUnblockPostErrors[keyof UnblockTeamTeamUnblockPostErrors];

export type UnblockTeamTeamUnblockPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListAvailableTeamsTeamAvailableGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Response Model
         */
        response_model?: unknown;
    };
    url: '/team/available';
};

export type ListAvailableTeamsTeamAvailableGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListAvailableTeamsTeamAvailableGetError = ListAvailableTeamsTeamAvailableGetErrors[keyof ListAvailableTeamsTeamAvailableGetErrors];

export type ListAvailableTeamsTeamAvailableGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListTeamV2V2TeamListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         * Only return teams which this 'user_id' belongs to
         */
        user_id?: string | null;
        /**
         * Organization Id
         * Only return teams which this 'organization_id' belongs to
         */
        organization_id?: string | null;
        /**
         * Team Id
         * Only return teams which this 'team_id' belongs to
         */
        team_id?: string | null;
        /**
         * Team Alias
         * Only return teams which this 'team_alias' belongs to. Supports partial matching.
         */
        team_alias?: string | null;
        /**
         * Page
         * Page number for pagination
         */
        page?: number;
        /**
         * Page Size
         * Number of teams per page
         */
        page_size?: number;
        /**
         * Sort By
         * Column to sort by (e.g. 'team_id', 'team_alias', 'created_at')
         */
        sort_by?: string | null;
        /**
         * Sort Order
         * Sort order ('asc' or 'desc')
         */
        sort_order?: string;
    };
    url: '/v2/team/list';
};

export type ListTeamV2V2TeamListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTeamV2V2TeamListGetError = ListTeamV2V2TeamListGetErrors[keyof ListTeamV2V2TeamListGetErrors];

export type ListTeamV2V2TeamListGetResponses = {
    /**
     * Successful Response
     */
    200: TeamListResponse;
};

export type ListTeamV2V2TeamListGetResponse = ListTeamV2V2TeamListGetResponses[keyof ListTeamV2V2TeamListGetResponses];

export type ListTeamTeamListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User Id
         * Only return teams which this 'user_id' belongs to
         */
        user_id?: string | null;
        /**
         * Organization Id
         */
        organization_id?: string | null;
    };
    url: '/team/list';
};

export type ListTeamTeamListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTeamTeamListGetError = ListTeamTeamListGetErrors[keyof ListTeamTeamListGetErrors];

export type ListTeamTeamListGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamModelAddTeamModelAddPostData = {
    body: TeamModelAddRequest;
    path?: never;
    query?: never;
    url: '/team/model/add';
};

export type TeamModelAddTeamModelAddPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamModelAddTeamModelAddPostError = TeamModelAddTeamModelAddPostErrors[keyof TeamModelAddTeamModelAddPostErrors];

export type TeamModelAddTeamModelAddPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamModelDeleteTeamModelDeletePostData = {
    body: TeamModelDeleteRequest;
    path?: never;
    query?: never;
    url: '/team/model/delete';
};

export type TeamModelDeleteTeamModelDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamModelDeleteTeamModelDeletePostError = TeamModelDeleteTeamModelDeletePostErrors[keyof TeamModelDeleteTeamModelDeletePostErrors];

export type TeamModelDeleteTeamModelDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TeamMemberPermissionsTeamPermissionsListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Team Id
         * Team ID in the request parameters
         */
        team_id?: string;
    };
    url: '/team/permissions_list';
};

export type TeamMemberPermissionsTeamPermissionsListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TeamMemberPermissionsTeamPermissionsListGetError = TeamMemberPermissionsTeamPermissionsListGetErrors[keyof TeamMemberPermissionsTeamPermissionsListGetErrors];

export type TeamMemberPermissionsTeamPermissionsListGetResponses = {
    /**
     * Successful Response
     */
    200: GetTeamMemberPermissionsResponse;
};

export type TeamMemberPermissionsTeamPermissionsListGetResponse = TeamMemberPermissionsTeamPermissionsListGetResponses[keyof TeamMemberPermissionsTeamPermissionsListGetResponses];

export type UpdateTeamMemberPermissionsTeamPermissionsUpdatePostData = {
    body: UpdateTeamMemberPermissionsRequest;
    path?: never;
    query?: never;
    url: '/team/permissions_update';
};

export type UpdateTeamMemberPermissionsTeamPermissionsUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTeamMemberPermissionsTeamPermissionsUpdatePostError = UpdateTeamMemberPermissionsTeamPermissionsUpdatePostErrors[keyof UpdateTeamMemberPermissionsTeamPermissionsUpdatePostErrors];

export type UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmTeamTable;
};

export type UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponse = UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponses[keyof UpdateTeamMemberPermissionsTeamPermissionsUpdatePostResponses];

export type GetTeamDailyActivityTeamDailyActivityGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Team Ids
         */
        team_ids?: string | null;
        /**
         * Start Date
         */
        start_date?: string | null;
        /**
         * End Date
         */
        end_date?: string | null;
        /**
         * Model
         */
        model?: string | null;
        /**
         * Api Key
         */
        api_key?: string | null;
        /**
         * Page
         */
        page?: number;
        /**
         * Page Size
         */
        page_size?: number;
        /**
         * Exclude Team Ids
         */
        exclude_team_ids?: string | null;
    };
    url: '/team/daily/activity';
};

export type GetTeamDailyActivityTeamDailyActivityGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTeamDailyActivityTeamDailyActivityGetError = GetTeamDailyActivityTeamDailyActivityGetErrors[keyof GetTeamDailyActivityTeamDailyActivityGetErrors];

export type GetTeamDailyActivityTeamDailyActivityGetResponses = {
    /**
     * Successful Response
     */
    200: SpendAnalyticsPaginatedResponse;
};

export type GetTeamDailyActivityTeamDailyActivityGetResponse = GetTeamDailyActivityTeamDailyActivityGetResponses[keyof GetTeamDailyActivityTeamDailyActivityGetResponses];

export type GetUsersScimV2UsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Startindex
         */
        startIndex?: number;
        /**
         * Count
         */
        count?: number;
        /**
         * Filter
         */
        filter?: string | null;
    };
    url: '/scim/v2/Users';
};

export type GetUsersScimV2UsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersScimV2UsersGetError = GetUsersScimV2UsersGetErrors[keyof GetUsersScimV2UsersGetErrors];

export type GetUsersScimV2UsersGetResponses = {
    /**
     * Successful Response
     */
    200: ScimListResponse;
};

export type GetUsersScimV2UsersGetResponse = GetUsersScimV2UsersGetResponses[keyof GetUsersScimV2UsersGetResponses];

export type CreateUserScimV2UsersPostData = {
    body: ScimUser;
    path?: never;
    query?: never;
    url: '/scim/v2/Users';
};

export type CreateUserScimV2UsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserScimV2UsersPostError = CreateUserScimV2UsersPostErrors[keyof CreateUserScimV2UsersPostErrors];

export type CreateUserScimV2UsersPostResponses = {
    /**
     * Successful Response
     */
    201: ScimUser;
};

export type CreateUserScimV2UsersPostResponse = CreateUserScimV2UsersPostResponses[keyof CreateUserScimV2UsersPostResponses];

export type DeleteUserScimV2UsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/scim/v2/Users/{user_id}';
};

export type DeleteUserScimV2UsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserScimV2UsersUserIdDeleteError = DeleteUserScimV2UsersUserIdDeleteErrors[keyof DeleteUserScimV2UsersUserIdDeleteErrors];

export type DeleteUserScimV2UsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserScimV2UsersUserIdDeleteResponse = DeleteUserScimV2UsersUserIdDeleteResponses[keyof DeleteUserScimV2UsersUserIdDeleteResponses];

export type GetUserScimV2UsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/scim/v2/Users/{user_id}';
};

export type GetUserScimV2UsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserScimV2UsersUserIdGetError = GetUserScimV2UsersUserIdGetErrors[keyof GetUserScimV2UsersUserIdGetErrors];

export type GetUserScimV2UsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScimUser;
};

export type GetUserScimV2UsersUserIdGetResponse = GetUserScimV2UsersUserIdGetResponses[keyof GetUserScimV2UsersUserIdGetResponses];

export type PatchUserScimV2UsersUserIdPatchData = {
    body: ScimPatchOp;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/scim/v2/Users/{user_id}';
};

export type PatchUserScimV2UsersUserIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUserScimV2UsersUserIdPatchError = PatchUserScimV2UsersUserIdPatchErrors[keyof PatchUserScimV2UsersUserIdPatchErrors];

export type PatchUserScimV2UsersUserIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ScimUser;
};

export type PatchUserScimV2UsersUserIdPatchResponse = PatchUserScimV2UsersUserIdPatchResponses[keyof PatchUserScimV2UsersUserIdPatchResponses];

export type UpdateUserScimV2UsersUserIdPutData = {
    body: ScimUser;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/scim/v2/Users/{user_id}';
};

export type UpdateUserScimV2UsersUserIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserScimV2UsersUserIdPutError = UpdateUserScimV2UsersUserIdPutErrors[keyof UpdateUserScimV2UsersUserIdPutErrors];

export type UpdateUserScimV2UsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: ScimUser;
};

export type UpdateUserScimV2UsersUserIdPutResponse = UpdateUserScimV2UsersUserIdPutResponses[keyof UpdateUserScimV2UsersUserIdPutResponses];

export type GetGroupsScimV2GroupsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Startindex
         */
        startIndex?: number;
        /**
         * Count
         */
        count?: number;
        /**
         * Filter
         */
        filter?: string | null;
    };
    url: '/scim/v2/Groups';
};

export type GetGroupsScimV2GroupsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGroupsScimV2GroupsGetError = GetGroupsScimV2GroupsGetErrors[keyof GetGroupsScimV2GroupsGetErrors];

export type GetGroupsScimV2GroupsGetResponses = {
    /**
     * Successful Response
     */
    200: ScimListResponse;
};

export type GetGroupsScimV2GroupsGetResponse = GetGroupsScimV2GroupsGetResponses[keyof GetGroupsScimV2GroupsGetResponses];

export type CreateGroupScimV2GroupsPostData = {
    body: ScimGroup;
    path?: never;
    query?: never;
    url: '/scim/v2/Groups';
};

export type CreateGroupScimV2GroupsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGroupScimV2GroupsPostError = CreateGroupScimV2GroupsPostErrors[keyof CreateGroupScimV2GroupsPostErrors];

export type CreateGroupScimV2GroupsPostResponses = {
    /**
     * Successful Response
     */
    201: ScimGroup;
};

export type CreateGroupScimV2GroupsPostResponse = CreateGroupScimV2GroupsPostResponses[keyof CreateGroupScimV2GroupsPostResponses];

export type DeleteGroupScimV2GroupsGroupIdDeleteData = {
    body?: never;
    path: {
        /**
         * Group ID
         */
        group_id: string;
    };
    query?: never;
    url: '/scim/v2/Groups/{group_id}';
};

export type DeleteGroupScimV2GroupsGroupIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteGroupScimV2GroupsGroupIdDeleteError = DeleteGroupScimV2GroupsGroupIdDeleteErrors[keyof DeleteGroupScimV2GroupsGroupIdDeleteErrors];

export type DeleteGroupScimV2GroupsGroupIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteGroupScimV2GroupsGroupIdDeleteResponse = DeleteGroupScimV2GroupsGroupIdDeleteResponses[keyof DeleteGroupScimV2GroupsGroupIdDeleteResponses];

export type GetGroupScimV2GroupsGroupIdGetData = {
    body?: never;
    path: {
        /**
         * Group ID
         */
        group_id: string;
    };
    query?: never;
    url: '/scim/v2/Groups/{group_id}';
};

export type GetGroupScimV2GroupsGroupIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGroupScimV2GroupsGroupIdGetError = GetGroupScimV2GroupsGroupIdGetErrors[keyof GetGroupScimV2GroupsGroupIdGetErrors];

export type GetGroupScimV2GroupsGroupIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScimGroup;
};

export type GetGroupScimV2GroupsGroupIdGetResponse = GetGroupScimV2GroupsGroupIdGetResponses[keyof GetGroupScimV2GroupsGroupIdGetResponses];

export type PatchGroupScimV2GroupsGroupIdPatchData = {
    body: ScimPatchOp;
    path: {
        /**
         * Group ID
         */
        group_id: string;
    };
    query?: never;
    url: '/scim/v2/Groups/{group_id}';
};

export type PatchGroupScimV2GroupsGroupIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchGroupScimV2GroupsGroupIdPatchError = PatchGroupScimV2GroupsGroupIdPatchErrors[keyof PatchGroupScimV2GroupsGroupIdPatchErrors];

export type PatchGroupScimV2GroupsGroupIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ScimGroup;
};

export type PatchGroupScimV2GroupsGroupIdPatchResponse = PatchGroupScimV2GroupsGroupIdPatchResponses[keyof PatchGroupScimV2GroupsGroupIdPatchResponses];

export type UpdateGroupScimV2GroupsGroupIdPutData = {
    body: ScimGroup;
    path: {
        /**
         * Group ID
         */
        group_id: string;
    };
    query?: never;
    url: '/scim/v2/Groups/{group_id}';
};

export type UpdateGroupScimV2GroupsGroupIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateGroupScimV2GroupsGroupIdPutError = UpdateGroupScimV2GroupsGroupIdPutErrors[keyof UpdateGroupScimV2GroupsGroupIdPutErrors];

export type UpdateGroupScimV2GroupsGroupIdPutResponses = {
    /**
     * Successful Response
     */
    200: ScimGroup;
};

export type UpdateGroupScimV2GroupsGroupIdPutResponse = UpdateGroupScimV2GroupsGroupIdPutResponses[keyof UpdateGroupScimV2GroupsGroupIdPutResponses];

export type NewOrganizationOrganizationNewPostData = {
    body: NewOrganizationRequest;
    path?: never;
    query?: never;
    url: '/organization/new';
};

export type NewOrganizationOrganizationNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewOrganizationOrganizationNewPostError = NewOrganizationOrganizationNewPostErrors[keyof NewOrganizationOrganizationNewPostErrors];

export type NewOrganizationOrganizationNewPostResponses = {
    /**
     * Successful Response
     */
    200: NewOrganizationResponse;
};

export type NewOrganizationOrganizationNewPostResponse = NewOrganizationOrganizationNewPostResponses[keyof NewOrganizationOrganizationNewPostResponses];

export type UpdateOrganizationOrganizationUpdatePatchData = {
    body: LiteLlmOrganizationTableUpdate;
    path?: never;
    query?: never;
    url: '/organization/update';
};

export type UpdateOrganizationOrganizationUpdatePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateOrganizationOrganizationUpdatePatchError = UpdateOrganizationOrganizationUpdatePatchErrors[keyof UpdateOrganizationOrganizationUpdatePatchErrors];

export type UpdateOrganizationOrganizationUpdatePatchResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmOrganizationTableWithMembers;
};

export type UpdateOrganizationOrganizationUpdatePatchResponse = UpdateOrganizationOrganizationUpdatePatchResponses[keyof UpdateOrganizationOrganizationUpdatePatchResponses];

export type DeleteOrganizationOrganizationDeleteDeleteData = {
    body: DeleteOrganizationRequest;
    path?: never;
    query?: never;
    url: '/organization/delete';
};

export type DeleteOrganizationOrganizationDeleteDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteOrganizationOrganizationDeleteDeleteError = DeleteOrganizationOrganizationDeleteDeleteErrors[keyof DeleteOrganizationOrganizationDeleteDeleteErrors];

export type DeleteOrganizationOrganizationDeleteDeleteResponses = {
    /**
     * Response Delete Organization Organization Delete Delete
     * Successful Response
     */
    200: Array<LiteLlmOrganizationTableWithMembers>;
};

export type DeleteOrganizationOrganizationDeleteDeleteResponse = DeleteOrganizationOrganizationDeleteDeleteResponses[keyof DeleteOrganizationOrganizationDeleteDeleteResponses];

export type ListOrganizationOrganizationListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organization/list';
};

export type ListOrganizationOrganizationListGetResponses = {
    /**
     * Response List Organization Organization List Get
     * Successful Response
     */
    200: Array<LiteLlmOrganizationTableWithMembers>;
};

export type ListOrganizationOrganizationListGetResponse = ListOrganizationOrganizationListGetResponses[keyof ListOrganizationOrganizationListGetResponses];

export type InfoOrganizationOrganizationInfoGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Organization Id
         */
        organization_id: string;
    };
    url: '/organization/info';
};

export type InfoOrganizationOrganizationInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InfoOrganizationOrganizationInfoGetError = InfoOrganizationOrganizationInfoGetErrors[keyof InfoOrganizationOrganizationInfoGetErrors];

export type InfoOrganizationOrganizationInfoGetResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmOrganizationTableWithMembers;
};

export type InfoOrganizationOrganizationInfoGetResponse = InfoOrganizationOrganizationInfoGetResponses[keyof InfoOrganizationOrganizationInfoGetResponses];

export type DeprecatedInfoOrganizationOrganizationInfoPostData = {
    body: OrganizationRequest;
    path?: never;
    query?: never;
    url: '/organization/info';
};

export type DeprecatedInfoOrganizationOrganizationInfoPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeprecatedInfoOrganizationOrganizationInfoPostError = DeprecatedInfoOrganizationOrganizationInfoPostErrors[keyof DeprecatedInfoOrganizationOrganizationInfoPostErrors];

export type DeprecatedInfoOrganizationOrganizationInfoPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OrganizationMemberAddOrganizationMemberAddPostData = {
    body: OrganizationMemberAddRequest;
    path?: never;
    query?: never;
    url: '/organization/member_add';
};

export type OrganizationMemberAddOrganizationMemberAddPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrganizationMemberAddOrganizationMemberAddPostError = OrganizationMemberAddOrganizationMemberAddPostErrors[keyof OrganizationMemberAddOrganizationMemberAddPostErrors];

export type OrganizationMemberAddOrganizationMemberAddPostResponses = {
    /**
     * Successful Response
     */
    200: OrganizationAddMemberResponse;
};

export type OrganizationMemberAddOrganizationMemberAddPostResponse = OrganizationMemberAddOrganizationMemberAddPostResponses[keyof OrganizationMemberAddOrganizationMemberAddPostResponses];

export type OrganizationMemberUpdateOrganizationMemberUpdatePatchData = {
    body: OrganizationMemberUpdateRequest;
    path?: never;
    query?: never;
    url: '/organization/member_update';
};

export type OrganizationMemberUpdateOrganizationMemberUpdatePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrganizationMemberUpdateOrganizationMemberUpdatePatchError = OrganizationMemberUpdateOrganizationMemberUpdatePatchErrors[keyof OrganizationMemberUpdateOrganizationMemberUpdatePatchErrors];

export type OrganizationMemberUpdateOrganizationMemberUpdatePatchResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmOrganizationMembershipTable;
};

export type OrganizationMemberUpdateOrganizationMemberUpdatePatchResponse = OrganizationMemberUpdateOrganizationMemberUpdatePatchResponses[keyof OrganizationMemberUpdateOrganizationMemberUpdatePatchResponses];

export type OrganizationMemberDeleteOrganizationMemberDeleteDeleteData = {
    body: OrganizationMemberDeleteRequest;
    path?: never;
    query?: never;
    url: '/organization/member_delete';
};

export type OrganizationMemberDeleteOrganizationMemberDeleteDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OrganizationMemberDeleteOrganizationMemberDeleteDeleteError = OrganizationMemberDeleteOrganizationMemberDeleteDeleteErrors[keyof OrganizationMemberDeleteOrganizationMemberDeleteDeleteErrors];

export type OrganizationMemberDeleteOrganizationMemberDeleteDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BlockUserCustomerBlockPostData = {
    body: BlockUsers;
    path?: never;
    query?: never;
    url: '/customer/block';
};

export type BlockUserCustomerBlockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BlockUserCustomerBlockPostError = BlockUserCustomerBlockPostErrors[keyof BlockUserCustomerBlockPostErrors];

export type BlockUserCustomerBlockPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnblockUserCustomerUnblockPostData = {
    body: BlockUsers;
    path?: never;
    query?: never;
    url: '/customer/unblock';
};

export type UnblockUserCustomerUnblockPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnblockUserCustomerUnblockPostError = UnblockUserCustomerUnblockPostErrors[keyof UnblockUserCustomerUnblockPostErrors];

export type UnblockUserCustomerUnblockPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type NewEndUserCustomerNewPostData = {
    body: NewCustomerRequest;
    path?: never;
    query?: never;
    url: '/customer/new';
};

export type NewEndUserCustomerNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewEndUserCustomerNewPostError = NewEndUserCustomerNewPostErrors[keyof NewEndUserCustomerNewPostErrors];

export type NewEndUserCustomerNewPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type EndUserInfoCustomerInfoGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * End User Id
         * End User ID in the request parameters
         */
        end_user_id: string;
    };
    url: '/customer/info';
};

export type EndUserInfoCustomerInfoGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EndUserInfoCustomerInfoGetError = EndUserInfoCustomerInfoGetErrors[keyof EndUserInfoCustomerInfoGetErrors];

export type EndUserInfoCustomerInfoGetResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmEndUserTable;
};

export type EndUserInfoCustomerInfoGetResponse = EndUserInfoCustomerInfoGetResponses[keyof EndUserInfoCustomerInfoGetResponses];

export type UpdateEndUserCustomerUpdatePostData = {
    body: UpdateCustomerRequest;
    path?: never;
    query?: never;
    url: '/customer/update';
};

export type UpdateEndUserCustomerUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateEndUserCustomerUpdatePostError = UpdateEndUserCustomerUpdatePostErrors[keyof UpdateEndUserCustomerUpdatePostErrors];

export type UpdateEndUserCustomerUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteEndUserCustomerDeletePostData = {
    body: DeleteCustomerRequest;
    path?: never;
    query?: never;
    url: '/customer/delete';
};

export type DeleteEndUserCustomerDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteEndUserCustomerDeletePostError = DeleteEndUserCustomerDeletePostErrors[keyof DeleteEndUserCustomerDeletePostErrors];

export type DeleteEndUserCustomerDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListEndUserCustomerListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customer/list';
};

export type ListEndUserCustomerListGetResponses = {
    /**
     * Response List End User Customer List Get
     * Successful Response
     */
    200: Array<LiteLlmEndUserTable>;
};

export type ListEndUserCustomerListGetResponse = ListEndUserCustomerListGetResponses[keyof ListEndUserCustomerListGetResponses];

export type ViewSpendTagsSpendTagsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start Date
         * Time from which to start viewing key spend
         */
        start_date?: string | null;
        /**
         * End Date
         * Time till which to view key spend
         */
        end_date?: string | null;
    };
    url: '/spend/tags';
};

export type ViewSpendTagsSpendTagsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ViewSpendTagsSpendTagsGetError = ViewSpendTagsSpendTagsGetErrors[keyof ViewSpendTagsSpendTagsGetErrors];

export type ViewSpendTagsSpendTagsGetResponses = {
    /**
     * Response 200 View Spend Tags Spend Tags Get
     * Successful Response
     */
    200: Array<LiteLlmSpendLogs>;
};

export type ViewSpendTagsSpendTagsGetResponse = ViewSpendTagsSpendTagsGetResponses[keyof ViewSpendTagsSpendTagsGetResponses];

export type GetGlobalSpendReportGlobalSpendReportGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start Date
         * Time from which to start viewing spend
         */
        start_date?: string | null;
        /**
         * End Date
         * Time till which to view spend
         */
        end_date?: string | null;
        /**
         * Group By
         * Group spend by internal team or customer or api_key
         */
        group_by?: ('team' | 'customer' | 'api_key') | null;
        /**
         * Api Key
         * View spend for a specific api_key. Example api_key='sk-1234
         */
        api_key?: string | null;
        /**
         * Internal User Id
         * View spend for a specific internal_user_id. Example internal_user_id='1234
         */
        internal_user_id?: string | null;
        /**
         * Team Id
         * View spend for a specific team_id. Example team_id='1234
         */
        team_id?: string | null;
        /**
         * Customer Id
         * View spend for a specific customer_id. Example customer_id='1234. Can be used in conjunction with team_id as well.
         */
        customer_id?: string | null;
    };
    url: '/global/spend/report';
};

export type GetGlobalSpendReportGlobalSpendReportGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGlobalSpendReportGlobalSpendReportGetError = GetGlobalSpendReportGlobalSpendReportGetErrors[keyof GetGlobalSpendReportGlobalSpendReportGetErrors];

export type GetGlobalSpendReportGlobalSpendReportGetResponses = {
    /**
     * Response 200 Get Global Spend Report Global Spend Report Get
     * Successful Response
     */
    200: Array<LiteLlmSpendLogs>;
};

export type GetGlobalSpendReportGlobalSpendReportGetResponse = GetGlobalSpendReportGlobalSpendReportGetResponses[keyof GetGlobalSpendReportGlobalSpendReportGetResponses];

export type GlobalViewSpendTagsGlobalSpendTagsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start Date
         * Time from which to start viewing key spend
         */
        start_date?: string | null;
        /**
         * End Date
         * Time till which to view key spend
         */
        end_date?: string | null;
        /**
         * Tags
         * comman separated tags to filter on
         */
        tags?: string | null;
    };
    url: '/global/spend/tags';
};

export type GlobalViewSpendTagsGlobalSpendTagsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GlobalViewSpendTagsGlobalSpendTagsGetError = GlobalViewSpendTagsGlobalSpendTagsGetErrors[keyof GlobalViewSpendTagsGlobalSpendTagsGetErrors];

export type GlobalViewSpendTagsGlobalSpendTagsGetResponses = {
    /**
     * Response 200 Global View Spend Tags Global Spend Tags Get
     * Successful Response
     */
    200: Array<LiteLlmSpendLogs>;
};

export type GlobalViewSpendTagsGlobalSpendTagsGetResponse = GlobalViewSpendTagsGlobalSpendTagsGetResponses[keyof GlobalViewSpendTagsGlobalSpendTagsGetResponses];

export type CalculateSpendSpendCalculatePostData = {
    body: SpendCalculateRequest;
    path?: never;
    query?: never;
    url: '/spend/calculate';
};

export type CalculateSpendSpendCalculatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CalculateSpendSpendCalculatePostError = CalculateSpendSpendCalculatePostErrors[keyof CalculateSpendSpendCalculatePostErrors];

export type CalculateSpendSpendCalculatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ViewSpendLogsSpendLogsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Api Key
         * Get spend logs based on api key
         */
        api_key?: string | null;
        /**
         * User Id
         * Get spend logs based on user_id
         */
        user_id?: string | null;
        /**
         * Request Id
         * request_id to get spend logs for specific request_id. If none passed then pass spend logs for all requests
         */
        request_id?: string | null;
        /**
         * Start Date
         * Time from which to start viewing key spend
         */
        start_date?: string | null;
        /**
         * End Date
         * Time till which to view key spend
         */
        end_date?: string | null;
    };
    url: '/spend/logs';
};

export type ViewSpendLogsSpendLogsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ViewSpendLogsSpendLogsGetError = ViewSpendLogsSpendLogsGetErrors[keyof ViewSpendLogsSpendLogsGetErrors];

export type ViewSpendLogsSpendLogsGetResponses = {
    /**
     * Response 200 View Spend Logs Spend Logs Get
     * Successful Response
     */
    200: Array<LiteLlmSpendLogs>;
};

export type ViewSpendLogsSpendLogsGetResponse = ViewSpendLogsSpendLogsGetResponses[keyof ViewSpendLogsSpendLogsGetResponses];

export type GlobalSpendResetGlobalSpendResetPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/global/spend/reset';
};

export type GlobalSpendResetGlobalSpendResetPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ProviderBudgetsProviderBudgetsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/provider/budgets';
};

export type ProviderBudgetsProviderBudgetsGetResponses = {
    /**
     * Successful Response
     */
    200: ProviderBudgetResponse;
};

export type ProviderBudgetsProviderBudgetsGetResponse = ProviderBudgetsProviderBudgetsGetResponses[keyof ProviderBudgetsProviderBudgetsGetResponses];

export type CachePingCachePingGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cache/ping';
};

export type CachePingCachePingGetResponses = {
    /**
     * Successful Response
     */
    200: CachePingResponse;
};

export type CachePingCachePingGetResponse = CachePingCachePingGetResponses[keyof CachePingCachePingGetResponses];

export type CacheDeleteCacheDeletePostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cache/delete';
};

export type CacheDeleteCacheDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CacheRedisInfoCacheRedisInfoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cache/redis/info';
};

export type CacheRedisInfoCacheRedisInfoGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CacheFlushallCacheFlushallPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cache/flushall';
};

export type CacheFlushallCacheFlushallPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListGuardrailsGuardrailsListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/guardrails/list';
};

export type ListGuardrailsGuardrailsListGetResponses = {
    /**
     * Successful Response
     */
    200: ListGuardrailsResponse;
};

export type ListGuardrailsGuardrailsListGetResponse = ListGuardrailsGuardrailsListGetResponses[keyof ListGuardrailsGuardrailsListGetResponses];

export type AddAllowedIpAddAllowedIpPostData = {
    body: IpAddress;
    path?: never;
    query?: never;
    url: '/add/allowed_ip';
};

export type AddAllowedIpAddAllowedIpPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddAllowedIpAddAllowedIpPostError = AddAllowedIpAddAllowedIpPostErrors[keyof AddAllowedIpAddAllowedIpPostErrors];

export type AddAllowedIpAddAllowedIpPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteAllowedIpDeleteAllowedIpPostData = {
    body: IpAddress;
    path?: never;
    query?: never;
    url: '/delete/allowed_ip';
};

export type DeleteAllowedIpDeleteAllowedIpPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAllowedIpDeleteAllowedIpPostError = DeleteAllowedIpDeleteAllowedIpPostErrors[keyof DeleteAllowedIpDeleteAllowedIpPostErrors];

export type DeleteAllowedIpDeleteAllowedIpPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSsoSettingsGetInternalUserSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get/internal_user_settings';
};

export type GetSsoSettingsGetInternalUserSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDefaultTeamSettingsGetDefaultTeamSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/get/default_team_settings';
};

export type GetDefaultTeamSettingsGetDefaultTeamSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateInternalUserSettingsUpdateInternalUserSettingsPatchData = {
    body: DefaultInternalUserParams;
    path?: never;
    query?: never;
    url: '/update/internal_user_settings';
};

export type UpdateInternalUserSettingsUpdateInternalUserSettingsPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateInternalUserSettingsUpdateInternalUserSettingsPatchError = UpdateInternalUserSettingsUpdateInternalUserSettingsPatchErrors[keyof UpdateInternalUserSettingsUpdateInternalUserSettingsPatchErrors];

export type UpdateInternalUserSettingsUpdateInternalUserSettingsPatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchData = {
    body: DefaultTeamSsoParams;
    path?: never;
    query?: never;
    url: '/update/default_team_settings';
};

export type UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchError = UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchErrors[keyof UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchErrors];

export type UpdateDefaultTeamSettingsUpdateDefaultTeamSettingsPatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFilesFilesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
        /**
         * Purpose
         */
        purpose?: string | null;
    };
    url: '/files';
};

export type ListFilesFilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFilesFilesGetError = ListFilesFilesGetErrors[keyof ListFilesFilesGetErrors];

export type ListFilesFilesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateFileFilesPostData = {
    body: BodyCreateFileFilesPost;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/files';
};

export type CreateFileFilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFileFilesPostError = CreateFileFilesPostErrors[keyof CreateFileFilesPostErrors];

export type CreateFileFilesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFilesV1FilesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
        /**
         * Purpose
         */
        purpose?: string | null;
    };
    url: '/v1/files';
};

export type ListFilesV1FilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFilesV1FilesGetError = ListFilesV1FilesGetErrors[keyof ListFilesV1FilesGetErrors];

export type ListFilesV1FilesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateFileV1FilesPostData = {
    body: BodyCreateFileV1FilesPost;
    path?: never;
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/files';
};

export type CreateFileV1FilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFileV1FilesPostError = CreateFileV1FilesPostErrors[keyof CreateFileV1FilesPostErrors];

export type CreateFileV1FilesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListFilesProviderV1FilesGetData = {
    body?: never;
    path: {
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: {
        /**
         * Purpose
         */
        purpose?: string | null;
    };
    url: '/{provider}/v1/files';
};

export type ListFilesProviderV1FilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFilesProviderV1FilesGetError = ListFilesProviderV1FilesGetErrors[keyof ListFilesProviderV1FilesGetErrors];

export type ListFilesProviderV1FilesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateFileProviderV1FilesPostData = {
    body: BodyCreateFileProviderV1FilesPost;
    path: {
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/files';
};

export type CreateFileProviderV1FilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFileProviderV1FilesPostError = CreateFileProviderV1FilesPostErrors[keyof CreateFileProviderV1FilesPostErrors];

export type CreateFileProviderV1FilesPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileContentFilesFileIdContentGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/files/{file_id}/content';
};

export type GetFileContentFilesFileIdContentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileContentFilesFileIdContentGetError = GetFileContentFilesFileIdContentGetErrors[keyof GetFileContentFilesFileIdContentGetErrors];

export type GetFileContentFilesFileIdContentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileContentV1FilesFileIdContentGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/files/{file_id}/content';
};

export type GetFileContentV1FilesFileIdContentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileContentV1FilesFileIdContentGetError = GetFileContentV1FilesFileIdContentGetErrors[keyof GetFileContentV1FilesFileIdContentGetErrors];

export type GetFileContentV1FilesFileIdContentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileContentProviderV1FilesFileIdContentGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/files/{file_id}/content';
};

export type GetFileContentProviderV1FilesFileIdContentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileContentProviderV1FilesFileIdContentGetError = GetFileContentProviderV1FilesFileIdContentGetErrors[keyof GetFileContentProviderV1FilesFileIdContentGetErrors];

export type GetFileContentProviderV1FilesFileIdContentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteFileFilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/files/{file_id}';
};

export type DeleteFileFilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFileFilesFileIdDeleteError = DeleteFileFilesFileIdDeleteErrors[keyof DeleteFileFilesFileIdDeleteErrors];

export type DeleteFileFilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileFilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/files/{file_id}';
};

export type GetFileFilesFileIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileFilesFileIdGetError = GetFileFilesFileIdGetErrors[keyof GetFileFilesFileIdGetErrors];

export type GetFileFilesFileIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteFileV1FilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/files/{file_id}';
};

export type DeleteFileV1FilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFileV1FilesFileIdDeleteError = DeleteFileV1FilesFileIdDeleteErrors[keyof DeleteFileV1FilesFileIdDeleteErrors];

export type DeleteFileV1FilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileV1FilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: {
        /**
         * Provider
         */
        provider?: string | null;
    };
    url: '/v1/files/{file_id}';
};

export type GetFileV1FilesFileIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileV1FilesFileIdGetError = GetFileV1FilesFileIdGetErrors[keyof GetFileV1FilesFileIdGetErrors];

export type GetFileV1FilesFileIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteFileProviderV1FilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/files/{file_id}';
};

export type DeleteFileProviderV1FilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFileProviderV1FilesFileIdDeleteError = DeleteFileProviderV1FilesFileIdDeleteErrors[keyof DeleteFileProviderV1FilesFileIdDeleteErrors];

export type DeleteFileProviderV1FilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileProviderV1FilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
        /**
         * Provider
         */
        provider: string | null;
    };
    query?: never;
    url: '/{provider}/v1/files/{file_id}';
};

export type GetFileProviderV1FilesFileIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileProviderV1FilesFileIdGetError = GetFileProviderV1FilesFileIdGetErrors[keyof GetFileProviderV1FilesFileIdGetErrors];

export type GetFileProviderV1FilesFileIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTeamCallbacksTeamTeamIdCallbackGetData = {
    body?: never;
    path: {
        /**
         * Team Id
         */
        team_id: string;
    };
    query?: never;
    url: '/team/{team_id}/callback';
};

export type GetTeamCallbacksTeamTeamIdCallbackGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTeamCallbacksTeamTeamIdCallbackGetError = GetTeamCallbacksTeamTeamIdCallbackGetErrors[keyof GetTeamCallbacksTeamTeamIdCallbackGetErrors];

export type GetTeamCallbacksTeamTeamIdCallbackGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddTeamCallbacksTeamTeamIdCallbackPostData = {
    body: AddTeamCallback;
    headers?: {
        /**
         * Litellm-Changed-By
         * The litellm-changed-by header enables tracking of actions performed by authorized users on behalf of other users, providing an audit trail for accountability
         */
        'litellm-changed-by'?: string | null;
    };
    path: {
        /**
         * Team Id
         */
        team_id: string;
    };
    query?: never;
    url: '/team/{team_id}/callback';
};

export type AddTeamCallbacksTeamTeamIdCallbackPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddTeamCallbacksTeamTeamIdCallbackPostError = AddTeamCallbacksTeamTeamIdCallbackPostErrors[keyof AddTeamCallbacksTeamTeamIdCallbackPostErrors];

export type AddTeamCallbacksTeamTeamIdCallbackPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DisableTeamLoggingTeamTeamIdDisableLoggingPostData = {
    body?: never;
    path: {
        /**
         * Team Id
         */
        team_id: string;
    };
    query?: never;
    url: '/team/{team_id}/disable_logging';
};

export type DisableTeamLoggingTeamTeamIdDisableLoggingPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DisableTeamLoggingTeamTeamIdDisableLoggingPostError = DisableTeamLoggingTeamTeamIdDisableLoggingPostErrors[keyof DisableTeamLoggingTeamTeamIdDisableLoggingPostErrors];

export type DisableTeamLoggingTeamTeamIdDisableLoggingPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type NewBudgetBudgetNewPostData = {
    body: BudgetNewRequest;
    path?: never;
    query?: never;
    url: '/budget/new';
};

export type NewBudgetBudgetNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewBudgetBudgetNewPostError = NewBudgetBudgetNewPostErrors[keyof NewBudgetBudgetNewPostErrors];

export type NewBudgetBudgetNewPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateBudgetBudgetUpdatePostData = {
    body: BudgetNewRequest;
    path?: never;
    query?: never;
    url: '/budget/update';
};

export type UpdateBudgetBudgetUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateBudgetBudgetUpdatePostError = UpdateBudgetBudgetUpdatePostErrors[keyof UpdateBudgetBudgetUpdatePostErrors];

export type UpdateBudgetBudgetUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type InfoBudgetBudgetInfoPostData = {
    body: BudgetRequest;
    path?: never;
    query?: never;
    url: '/budget/info';
};

export type InfoBudgetBudgetInfoPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InfoBudgetBudgetInfoPostError = InfoBudgetBudgetInfoPostErrors[keyof InfoBudgetBudgetInfoPostErrors];

export type InfoBudgetBudgetInfoPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BudgetSettingsBudgetSettingsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Budget Id
         */
        budget_id: string;
    };
    url: '/budget/settings';
};

export type BudgetSettingsBudgetSettingsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BudgetSettingsBudgetSettingsGetError = BudgetSettingsBudgetSettingsGetErrors[keyof BudgetSettingsBudgetSettingsGetErrors];

export type BudgetSettingsBudgetSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListBudgetBudgetListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/budget/list';
};

export type ListBudgetBudgetListGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteBudgetBudgetDeletePostData = {
    body: BudgetDeleteRequest;
    path?: never;
    query?: never;
    url: '/budget/delete';
};

export type DeleteBudgetBudgetDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteBudgetBudgetDeletePostError = DeleteBudgetBudgetDeletePostErrors[keyof DeleteBudgetBudgetDeletePostErrors];

export type DeleteBudgetBudgetDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PatchModelModelModelIdUpdatePatchData = {
    body: UpdateDeployment;
    path: {
        /**
         * Model Id
         */
        model_id: string;
    };
    query?: never;
    url: '/model/{model_id}/update';
};

export type PatchModelModelModelIdUpdatePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchModelModelModelIdUpdatePatchError = PatchModelModelModelIdUpdatePatchErrors[keyof PatchModelModelModelIdUpdatePatchErrors];

export type PatchModelModelModelIdUpdatePatchResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteModelModelDeletePostData = {
    body: ModelInfoDelete;
    path?: never;
    query?: never;
    url: '/model/delete';
};

export type DeleteModelModelDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteModelModelDeletePostError = DeleteModelModelDeletePostErrors[keyof DeleteModelModelDeletePostErrors];

export type DeleteModelModelDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddNewModelModelNewPostData = {
    body: Deployment;
    path?: never;
    query?: never;
    url: '/model/new';
};

export type AddNewModelModelNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddNewModelModelNewPostError = AddNewModelModelNewPostErrors[keyof AddNewModelModelNewPostErrors];

export type AddNewModelModelNewPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateModelModelUpdatePostData = {
    body: UpdateDeployment;
    path?: never;
    query?: never;
    url: '/model/update';
};

export type UpdateModelModelUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateModelModelUpdatePostError = UpdateModelModelUpdatePostErrors[keyof UpdateModelModelUpdatePostErrors];

export type UpdateModelModelUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type NewTagTagNewPostData = {
    body: TagNewRequest;
    path?: never;
    query?: never;
    url: '/tag/new';
};

export type NewTagTagNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewTagTagNewPostError = NewTagTagNewPostErrors[keyof NewTagTagNewPostErrors];

export type NewTagTagNewPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateTagTagUpdatePostData = {
    body: TagUpdateRequest;
    path?: never;
    query?: never;
    url: '/tag/update';
};

export type UpdateTagTagUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTagTagUpdatePostError = UpdateTagTagUpdatePostErrors[keyof UpdateTagTagUpdatePostErrors];

export type UpdateTagTagUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type InfoTagTagInfoPostData = {
    body: TagInfoRequest;
    path?: never;
    query?: never;
    url: '/tag/info';
};

export type InfoTagTagInfoPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InfoTagTagInfoPostError = InfoTagTagInfoPostErrors[keyof InfoTagTagInfoPostErrors];

export type InfoTagTagInfoPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListTagsTagListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tag/list';
};

export type ListTagsTagListGetResponses = {
    /**
     * Response List Tags Tag List Get
     * Successful Response
     */
    200: Array<TagConfig>;
};

export type ListTagsTagListGetResponse = ListTagsTagListGetResponses[keyof ListTagsTagListGetResponses];

export type DeleteTagTagDeletePostData = {
    body: TagDeleteRequest;
    path?: never;
    query?: never;
    url: '/tag/delete';
};

export type DeleteTagTagDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTagTagDeletePostError = DeleteTagTagDeletePostErrors[keyof DeleteTagTagDeletePostErrors];

export type DeleteTagTagDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTagDailyActivityTagDailyActivityGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Tags
         */
        tags?: string | null;
        /**
         * Start Date
         */
        start_date?: string | null;
        /**
         * End Date
         */
        end_date?: string | null;
        /**
         * Model
         */
        model?: string | null;
        /**
         * Api Key
         */
        api_key?: string | null;
        /**
         * Page
         */
        page?: number;
        /**
         * Page Size
         */
        page_size?: number;
    };
    url: '/tag/daily/activity';
};

export type GetTagDailyActivityTagDailyActivityGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTagDailyActivityTagDailyActivityGetError = GetTagDailyActivityTagDailyActivityGetErrors[keyof GetTagDailyActivityTagDailyActivityGetErrors];

export type GetTagDailyActivityTagDailyActivityGetResponses = {
    /**
     * Successful Response
     */
    200: SpendAnalyticsPaginatedResponse;
};

export type GetTagDailyActivityTagDailyActivityGetResponse = GetTagDailyActivityTagDailyActivityGetResponses[keyof GetTagDailyActivityTagDailyActivityGetResponses];

export type NewVectorStoreVectorStoreNewPostData = {
    body: LiteLlmManagedVectorStore;
    path?: never;
    query?: never;
    url: '/vector_store/new';
};

export type NewVectorStoreVectorStoreNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type NewVectorStoreVectorStoreNewPostError = NewVectorStoreVectorStoreNewPostErrors[keyof NewVectorStoreVectorStoreNewPostErrors];

export type NewVectorStoreVectorStoreNewPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListVectorStoresVectorStoreListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Page Size
         */
        page_size?: number;
    };
    url: '/vector_store/list';
};

export type ListVectorStoresVectorStoreListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListVectorStoresVectorStoreListGetError = ListVectorStoresVectorStoreListGetErrors[keyof ListVectorStoresVectorStoreListGetErrors];

export type ListVectorStoresVectorStoreListGetResponses = {
    /**
     * Successful Response
     */
    200: LiteLlmManagedVectorStoreListResponse;
};

export type ListVectorStoresVectorStoreListGetResponse = ListVectorStoresVectorStoreListGetResponses[keyof ListVectorStoresVectorStoreListGetResponses];

export type DeleteVectorStoreVectorStoreDeletePostData = {
    body: VectorStoreDeleteRequest;
    path?: never;
    query?: never;
    url: '/vector_store/delete';
};

export type DeleteVectorStoreVectorStoreDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteVectorStoreVectorStoreDeletePostError = DeleteVectorStoreVectorStoreDeletePostErrors[keyof DeleteVectorStoreVectorStoreDeletePostErrors];

export type DeleteVectorStoreVectorStoreDeletePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetRobotsRobotsTxtGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/robots.txt';
};

export type GetRobotsRobotsTxtGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};